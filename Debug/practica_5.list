
practica_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000353c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  000050f4  2**0
                  CONTENTS
  4 .ARM          00000008  080037e0  080037e0  000047e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e8  080037e8  000050f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037ec  080037ec  000047ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080037f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200000f4  080038e4  000050f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080038e4  0000535c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f04  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf8  00000000  00000000  0000e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e8  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c78  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a501  00000000  00000000  00031658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c85c7  00000000  00000000  0003bb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002320  00000000  00000000  00104164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00106484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080036f4 	.word	0x080036f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f8 	.word	0x200000f8
 800020c:	080036f4 	.word	0x080036f4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int};
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fe58 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f80a 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f8a0 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060c:	f000 f874 	bl	80006f8 <MX_USART2_UART_Init>
  uartFSM_init();
 8000610:	f000 fcc4 	bl	8000f9c <uartFSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
      /* USER CODE END WHILE */
	  uartFSM_update();
 8000614:	f000 fcd8 	bl	8000fc8 <uartFSM_update>
 8000618:	e7fc      	b.n	8000614 <main+0x18>
	...

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	@ 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fbe4 	bl	8002df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	@ (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a22      	ldr	r2, [pc, #136]	@ (80006f4 <SystemClock_Config+0xd8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000698:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fc6c 	bl	8001f88 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006b6:	f000 f8b7 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2302      	movs	r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f90c 	bl	80018f4 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e2:	f000 f8a1 	bl	8000828 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART2_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x4c>)
 8000730:	f001 fec8 	bl	80024c4 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f875 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000110 	.word	0x20000110
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a2c      	ldr	r2, [pc, #176]	@ (800081c <MX_GPIO_Init+0xd0>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a25      	ldr	r2, [pc, #148]	@ (800081c <MX_GPIO_Init+0xd0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a1e      	ldr	r2, [pc, #120]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a17      	ldr	r2, [pc, #92]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	4812      	ldr	r0, [pc, #72]	@ (8000820 <MX_GPIO_Init+0xd4>)
 80007d8:	f001 f858 	bl	800188c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_GPIO_Init+0xd8>)
 80007f4:	f000 feb6 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f8:	2320      	movs	r3, #32
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_GPIO_Init+0xd4>)
 8000810:	f000 fea8 	bl	8001564 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020800 	.word	0x40020800

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	@ (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	@ 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fe42 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	@ (8000908 <HAL_UART_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a17      	ldr	r2, [pc, #92]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008de:	230c      	movs	r3, #12
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <HAL_UART_MspInit+0x8c>)
 80008fa:	f000 fe33 	bl	8001564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	@ 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40004400 	.word	0x40004400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 fcf5 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f002 fa30 	bl	8002e08 <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20020000 	.word	0x20020000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	20000154 	.word	0x20000154
 80009dc:	20000360 	.word	0x20000360

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	@ (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	@ (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 f9ef 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fde1 	bl	80005fc <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000a48:	080037f0 	.word	0x080037f0
  ldr r2, =_sbss
 8000a4c:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000a50:	2000035c 	.word	0x2000035c

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <clearCommand>:
 * @brief Clears the command buffer.
 *
 * Resets all characters in the global @ref command buffer
 * to the null character ('\0').
 */
static void clearCommand() {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
	while (i < 64) {
 8000a62:	e006      	b.n	8000a72 <clearCommand+0x1a>
		command[i++] = '\0';
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	71fa      	strb	r2, [r7, #7]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <clearCommand+0x30>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	5499      	strb	r1, [r3, r2]
	while (i < 64) {
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a76:	d9f5      	bls.n	8000a64 <clearCommand+0xc>
	}
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000158 	.word	0x20000158

08000a8c <isEndCharacter>:
 *
 * @param[in] mander  Character to check.
 * @return `true` if the character is an end-of-line marker,
 *         `false` otherwise.
 */
static bool_t isEndCharacter(uint8_t mander) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
	uint8_t size = sizeof(END_LINE_CHARS) / sizeof(END_LINE_CHARS[0]);
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	73bb      	strb	r3, [r7, #14]
	while (i < size) {
 8000a9e:	e00a      	b.n	8000ab6 <isEndCharacter+0x2a>
		if (mander == END_LINE_CHARS[i]) {
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <isEndCharacter+0x40>)
 8000aa4:	5cd3      	ldrb	r3, [r2, r3]
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d101      	bne.n	8000ab0 <isEndCharacter+0x24>
			return true;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e007      	b.n	8000ac0 <isEndCharacter+0x34>
		}
		i++;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	73fb      	strb	r3, [r7, #15]
	while (i < size) {
 8000ab6:	7bfa      	ldrb	r2, [r7, #15]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d3f0      	bcc.n	8000aa0 <isEndCharacter+0x14>
	}
	return false;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	080037a8 	.word	0x080037a8

08000ad0 <isValidChar>:
 *
 * @param[in] mander  Character to validate.
 * @return `true` if the character is valid,
 *         `false` otherwise.
 */
static bool_t isValidChar(uint8_t mander) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	return mander == 10 || mander == 13 || mander == 0 || (mander > 31 && mander < 126);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d00b      	beq.n	8000af8 <isValidChar+0x28>
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b0d      	cmp	r3, #13
 8000ae4:	d008      	beq.n	8000af8 <isValidChar+0x28>
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d005      	beq.n	8000af8 <isValidChar+0x28>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b1f      	cmp	r3, #31
 8000af0:	d904      	bls.n	8000afc <isValidChar+0x2c>
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b7d      	cmp	r3, #125	@ 0x7d
 8000af6:	d801      	bhi.n	8000afc <isValidChar+0x2c>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <isValidChar+0x2e>
 8000afc:	2300      	movs	r3, #0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <writeChar>:
 * Stores the given character at the current @ref pointer position
 * in the @ref command buffer, then increments the pointer.
 *
 * @param[in] mander  Character to store.
 */
static void writeChar(uint8_t mander) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	command[pointer++] = mander;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <writeChar+0x2c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <writeChar+0x2c>)
 8000b24:	7011      	strb	r1, [r2, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <writeChar+0x30>)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	5453      	strb	r3, [r2, r1]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000198 	.word	0x20000198
 8000b40:	20000158 	.word	0x20000158

08000b44 <idleState>:
 * - Detects comment lines and end-of-line characters.
 * - Transitions to:
 *   - @ref receiveState if valid input starts a command,
 *   - Stays in idle state if invalid or comment input is received.
 */
static void idleState() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	if (firstIdle) {
 8000b4a:	4b43      	ldr	r3, [pc, #268]	@ (8000c58 <idleState+0x114>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <idleState+0x1a>
		uartSendString(INIT_MESSAGE);
 8000b52:	4842      	ldr	r0, [pc, #264]	@ (8000c5c <idleState+0x118>)
 8000b54:	f000 fb62 	bl	800121c <uartSendString>
		firstIdle = false;
 8000b58:	4b3f      	ldr	r3, [pc, #252]	@ (8000c58 <idleState+0x114>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
	}
	uint8_t mander = '\0';
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
	uartReceiveStringSize(&mander, 1);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fb8e 	bl	8001288 <uartReceiveStringSize>
	if (!isValidChar(mander)) {
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffae 	bl	8000ad0 <isValidChar>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f083 0301 	eor.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d166      	bne.n	8000c4e <idleState+0x10a>
		return;
	}
	if (mander == COMMENT_1 || mander == COMMENT_2) {
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <idleState+0x11c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d004      	beq.n	8000b94 <idleState+0x50>
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	4b35      	ldr	r3, [pc, #212]	@ (8000c64 <idleState+0x120>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d102      	bne.n	8000b9a <idleState+0x56>
		commentLine = true;
 8000b94:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <idleState+0x124>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
	}
	if (!commentLine && !isEndCharacter(mander) && mander != '\0') {
 8000b9a:	4b33      	ldr	r3, [pc, #204]	@ (8000c68 <idleState+0x124>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f083 0301 	eor.w	r3, r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d027      	beq.n	8000bf8 <idleState+0xb4>
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff6e 	bl	8000a8c <isEndCharacter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	f083 0301 	eor.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01d      	beq.n	8000bf8 <idleState+0xb4>
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d01a      	beq.n	8000bf8 <idleState+0xb4>
		uartSendStringSize(&mander, 1);
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fb48 	bl	800125c <uartSendStringSize>
		clearCommand();
 8000bcc:	f7ff ff44 	bl	8000a58 <clearCommand>
		actualFunction = receiveState;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <idleState+0x128>)
 8000bd2:	4a27      	ldr	r2, [pc, #156]	@ (8000c70 <idleState+0x12c>)
 8000bd4:	601a      	str	r2, [r3, #0]
		pointer = 0;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <idleState+0x130>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		writeChar(mander);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff96 	bl	8000b10 <writeChar>
		delayInit(&timeoutDelay, TIMEOUT_DELAY);
 8000be4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000be8:	4619      	mov	r1, r3
 8000bea:	4823      	ldr	r0, [pc, #140]	@ (8000c78 <idleState+0x134>)
 8000bec:	f000 fa3b 	bl	8001066 <delayInit>
		firstIdle = true;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <idleState+0x114>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e02b      	b.n	8000c50 <idleState+0x10c>
	} else if (commentLine) {
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <idleState+0x124>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d027      	beq.n	8000c50 <idleState+0x10c>
		uartSendStringSize(&mander, 1);
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	2101      	movs	r1, #1
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fb29 	bl	800125c <uartSendStringSize>
		commentLine = !isEndCharacter(mander);
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff3d 	bl	8000a8c <isEndCharacter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf14      	ite	ne
 8000c18:	2301      	movne	r3, #1
 8000c1a:	2300      	moveq	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f083 0301 	eor.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <idleState+0x124>)
 8000c2c:	701a      	strb	r2, [r3, #0]
		firstIdle = !commentLine;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <idleState+0x124>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bf14      	ite	ne
 8000c36:	2301      	movne	r3, #1
 8000c38:	2300      	moveq	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f083 0301 	eor.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	@ (8000c58 <idleState+0x114>)
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e000      	b.n	8000c50 <idleState+0x10c>
		return;
 8000c4e:	bf00      	nop
	}
}
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000009a 	.word	0x2000009a
 8000c5c:	20000074 	.word	0x20000074
 8000c60:	20000098 	.word	0x20000098
 8000c64:	20000099 	.word	0x20000099
 8000c68:	200001c4 	.word	0x200001c4
 8000c6c:	200001c8 	.word	0x200001c8
 8000c70:	08000c7d 	.word	0x08000c7d
 8000c74:	20000198 	.word	0x20000198
 8000c78:	200001a0 	.word	0x200001a0

08000c7c <receiveState>:
 * - Transitions to:
 *   - @ref parseState if an end-of-line character is received,
 *   - @ref errorState on buffer overflow,
 *   - @ref timeoutState if no input arrives before timeout.
 */
static void receiveState() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t mander = '\0';
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uartReceiveStringSize(&mander, 1);
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fafc 	bl	8001288 <uartReceiveStringSize>
	uartSendStringSize(&mander, 1);
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	2101      	movs	r1, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fae1 	bl	800125c <uartSendStringSize>
	if (isEndCharacter(mander)) {
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fef5 	bl	8000a8c <isEndCharacter>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <receiveState+0x34>
		actualFunction = parseState;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <receiveState+0x74>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <receiveState+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
			actualFunction = errorState;
		}
	} else if (delayRead(&timeoutDelay)) {
		actualFunction = timeoutState;
	}
}
 8000cae:	e01a      	b.n	8000ce6 <receiveState+0x6a>
	} else if (mander != '\0') {
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00e      	beq.n	8000cd4 <receiveState+0x58>
		writeChar(mander);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff29 	bl	8000b10 <writeChar>
		if (pointer >= CMD_MAX_LINE) {
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <receiveState+0x7c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cc4:	d90f      	bls.n	8000ce6 <receiveState+0x6a>
			ERROR_MESSAGE = OVERFLOW_ERROR;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <receiveState+0x80>)
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <receiveState+0x84>)
 8000cca:	601a      	str	r2, [r3, #0]
			actualFunction = errorState;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <receiveState+0x74>)
 8000cce:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <receiveState+0x88>)
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	e008      	b.n	8000ce6 <receiveState+0x6a>
	} else if (delayRead(&timeoutDelay)) {
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <receiveState+0x8c>)
 8000cd6:	f000 f98e 	bl	8000ff6 <delayRead>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <receiveState+0x6a>
		actualFunction = timeoutState;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <receiveState+0x74>)
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <receiveState+0x90>)
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200001c8 	.word	0x200001c8
 8000cf4:	08000d61 	.word	0x08000d61
 8000cf8:	20000198 	.word	0x20000198
 8000cfc:	2000019c 	.word	0x2000019c
 8000d00:	20000004 	.word	0x20000004
 8000d04:	08000d11 	.word	0x08000d11
 8000d08:	200001a0 	.word	0x200001a0
 8000d0c:	08000f71 	.word	0x08000f71

08000d10 <errorState>:
 *
 * - Sends the current @ref ERROR_MESSAGE over UART (if set).
 * - Waits for a delay before resetting back to @ref idleState.
 * - Clears the error message after transmission.
 */
static void errorState() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	if (ERROR_MESSAGE != NULL) {
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <errorState+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00a      	beq.n	8000d32 <errorState+0x22>
		delayInit(&messageDelay, MESSAGE_DELAY);
 8000d1c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d20:	4619      	mov	r1, r3
 8000d22:	480c      	ldr	r0, [pc, #48]	@ (8000d54 <errorState+0x44>)
 8000d24:	f000 f99f 	bl	8001066 <delayInit>
		uartSendString(ERROR_MESSAGE);
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <errorState+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fa75 	bl	800121c <uartSendString>
	}
	if (delayRead(&messageDelay)) {
 8000d32:	4808      	ldr	r0, [pc, #32]	@ (8000d54 <errorState+0x44>)
 8000d34:	f000 f95f 	bl	8000ff6 <delayRead>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <errorState+0x34>
		actualFunction = idleState;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <errorState+0x48>)
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <errorState+0x4c>)
 8000d42:	601a      	str	r2, [r3, #0]
	}
	ERROR_MESSAGE = NULL;
 8000d44:	4b02      	ldr	r3, [pc, #8]	@ (8000d50 <errorState+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000019c 	.word	0x2000019c
 8000d54:	200001ac 	.word	0x200001ac
 8000d58:	200001c8 	.word	0x200001c8
 8000d5c:	08000b45 	.word	0x08000b45

08000d60 <parseState>:
 * - Validates token count and arguments.
 * - Transitions to:
 *   - @ref execState if a valid command is parsed,
 *   - @ref errorState otherwise.
 */
static void parseState() {
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
	uint8_t *tokens[CMD_MAX_TOKENS] = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
	uint8_t tokenCount = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	77fb      	strb	r3, [r7, #31]

	uint8_t *p = command;
 8000d78:	4b37      	ldr	r3, [pc, #220]	@ (8000e58 <parseState+0xf8>)
 8000d7a:	61bb      	str	r3, [r7, #24]
	while (*p && tokenCount < pointer + 1) {
 8000d7c:	e03d      	b.n	8000dfa <parseState+0x9a>
		while (*p == ' ') p++;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	3301      	adds	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d0f8      	beq.n	8000d7e <parseState+0x1e>
		if (!*p) break;
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d03c      	beq.n	8000e0e <parseState+0xae>

		tokens[tokenCount++] = p;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	77fa      	strb	r2, [r7, #31]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	3320      	adds	r3, #32
 8000d9e:	443b      	add	r3, r7
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (tokenCount >= CMD_MAX_TOKENS) {
 8000da6:	7ffb      	ldrb	r3, [r7, #31]
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d914      	bls.n	8000dd6 <parseState+0x76>
			ERROR_MESSAGE = ARGS_ERROR;
 8000dac:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <parseState+0xfc>)
 8000dae:	4a2c      	ldr	r2, [pc, #176]	@ (8000e60 <parseState+0x100>)
 8000db0:	601a      	str	r2, [r3, #0]
			break;
 8000db2:	e02d      	b.n	8000e10 <parseState+0xb0>
		}

		while (*p && *p != ' ') {
			if (*p >= 'A' && *p <= 'Z') {
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b40      	cmp	r3, #64	@ 0x40
 8000dba:	d909      	bls.n	8000dd0 <parseState+0x70>
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b5a      	cmp	r3, #90	@ 0x5a
 8000dc2:	d805      	bhi.n	8000dd0 <parseState+0x70>
				*p = *p + ('a' - 'A');
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	3320      	adds	r3, #32
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	701a      	strb	r2, [r3, #0]
			}
			p++;
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
		while (*p && *p != ' ') {
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <parseState+0x86>
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b20      	cmp	r3, #32
 8000de4:	d1e6      	bne.n	8000db4 <parseState+0x54>
		}

		if (*p == ' ') {
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b20      	cmp	r3, #32
 8000dec:	d105      	bne.n	8000dfa <parseState+0x9a>
			*p = '\0';
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
			p++;
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	3301      	adds	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
	while (*p && tokenCount < pointer + 1) {
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <parseState+0xb0>
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <parseState+0x104>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	7ffa      	ldrb	r2, [r7, #31]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d9bb      	bls.n	8000d84 <parseState+0x24>
 8000e0c:	e000      	b.n	8000e10 <parseState+0xb0>
		if (!*p) break;
 8000e0e:	bf00      	nop
		}
	}
	if (tokenCount == 0) {
 8000e10:	7ffb      	ldrb	r3, [r7, #31]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <parseState+0xbc>
		ERROR_MESSAGE = ARGS_ERROR;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <parseState+0xfc>)
 8000e18:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <parseState+0x100>)
 8000e1a:	601a      	str	r2, [r3, #0]
	}
	if (tokenCount > 0 && tokenCount < CMD_MAX_TOKENS) {
 8000e1c:	7ffb      	ldrb	r3, [r7, #31]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00f      	beq.n	8000e42 <parseState+0xe2>
 8000e22:	7ffb      	ldrb	r3, [r7, #31]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d80c      	bhi.n	8000e42 <parseState+0xe2>
		actualFunction = execState;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <parseState+0x108>)
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <parseState+0x10c>)
 8000e2c:	601a      	str	r2, [r3, #0]
		receivedCommand = tokens[0];
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <parseState+0x110>)
 8000e32:	6013      	str	r3, [r2, #0]
		argZero = tokens[1];
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4a0f      	ldr	r2, [pc, #60]	@ (8000e74 <parseState+0x114>)
 8000e38:	6013      	str	r3, [r2, #0]
		argOne = tokens[2];
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <parseState+0x118>)
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e003      	b.n	8000e4a <parseState+0xea>
	} else {
		actualFunction = errorState;
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <parseState+0x108>)
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <parseState+0x11c>)
 8000e46:	601a      	str	r2, [r3, #0]
	}
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3724      	adds	r7, #36	@ 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000158 	.word	0x20000158
 8000e5c:	2000019c 	.word	0x2000019c
 8000e60:	20000030 	.word	0x20000030
 8000e64:	20000198 	.word	0x20000198
 8000e68:	200001c8 	.word	0x200001c8
 8000e6c:	08000e81 	.word	0x08000e81
 8000e70:	200001b8 	.word	0x200001b8
 8000e74:	200001bc 	.word	0x200001bc
 8000e78:	200001c0 	.word	0x200001c0
 8000e7c:	08000d11 	.word	0x08000d11

08000e80 <execState>:
 *
 * - Executes the parsed command (e.g., LED control commands).
 * - Sends an acknowledgment or error message over UART.
 * - Transitions back to @ref idleState after a delay.
 */
static void execState() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	if (receivedCommand != NULL) {
 8000e86:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <execState+0xbc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d045      	beq.n	8000f1a <execState+0x9a>
		delayInit(&messageDelay, MESSAGE_DELAY);
 8000e8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e92:	4619      	mov	r1, r3
 8000e94:	482a      	ldr	r0, [pc, #168]	@ (8000f40 <execState+0xc0>)
 8000e96:	f000 f8e6 	bl	8001066 <delayInit>
		bool_t invalidCommand = true;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
		if (!strcmp((char*)receivedCommand, (char*)LED_COMMAND)) {
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <execState+0xbc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4928      	ldr	r1, [pc, #160]	@ (8000f44 <execState+0xc4>)
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f9b3 	bl	8000210 <strcmp>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d127      	bne.n	8000f00 <execState+0x80>
			char* arg = (char*)argZero;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <execState+0xc8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	603b      	str	r3, [r7, #0]
			if (!strcmp(arg, (char*)LED_ON_COMMAND)) {
 8000eb6:	4925      	ldr	r1, [pc, #148]	@ (8000f4c <execState+0xcc>)
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff f9a9 	bl	8000210 <strcmp>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d105      	bne.n	8000ed0 <execState+0x50>
				setPin(true);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f000 f8e1 	bl	800108c <setPin>
				invalidCommand = false;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
 8000ece:	e017      	b.n	8000f00 <execState+0x80>
			}
			else if (!strcmp(arg, (char*)LED_TOGGLE_COMMAND)) {
 8000ed0:	491f      	ldr	r1, [pc, #124]	@ (8000f50 <execState+0xd0>)
 8000ed2:	6838      	ldr	r0, [r7, #0]
 8000ed4:	f7ff f99c 	bl	8000210 <strcmp>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <execState+0x68>
				togglePin();
 8000ede:	f000 f8e7 	bl	80010b0 <togglePin>
				invalidCommand = false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e00b      	b.n	8000f00 <execState+0x80>
			}
			else if (!strcmp(arg, (char*)LED_OFF_COMMAND)) {
 8000ee8:	491a      	ldr	r1, [pc, #104]	@ (8000f54 <execState+0xd4>)
 8000eea:	6838      	ldr	r0, [r7, #0]
 8000eec:	f7ff f990 	bl	8000210 <strcmp>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <execState+0x80>
				setPin(false);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f8c8 	bl	800108c <setPin>
				invalidCommand = false;
 8000efc:	2300      	movs	r3, #0
 8000efe:	71fb      	strb	r3, [r7, #7]
			}
		}
		if (invalidCommand) {
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <execState+0x94>
			ERROR_MESSAGE = INVALID_COMMAND_ERROR;
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <execState+0xd8>)
 8000f08:	4a14      	ldr	r2, [pc, #80]	@ (8000f5c <execState+0xdc>)
 8000f0a:	601a      	str	r2, [r3, #0]
			actualFunction = errorState;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <execState+0xe0>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	@ (8000f64 <execState+0xe4>)
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e002      	b.n	8000f1a <execState+0x9a>
		} else {
			uartSendString(OK_MESSAGE);
 8000f14:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <execState+0xe8>)
 8000f16:	f000 f981 	bl	800121c <uartSendString>
		}

	}
	if (delayRead(&messageDelay)) {
 8000f1a:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <execState+0xc0>)
 8000f1c:	f000 f86b 	bl	8000ff6 <delayRead>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <execState+0xac>
		actualFunction = idleState;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <execState+0xe0>)
 8000f28:	4a10      	ldr	r2, [pc, #64]	@ (8000f6c <execState+0xec>)
 8000f2a:	601a      	str	r2, [r3, #0]
	}
	receivedCommand = NULL;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <execState+0xbc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001b8 	.word	0x200001b8
 8000f40:	200001ac 	.word	0x200001ac
 8000f44:	20000084 	.word	0x20000084
 8000f48:	200001bc 	.word	0x200001bc
 8000f4c:	20000088 	.word	0x20000088
 8000f50:	2000008c 	.word	0x2000008c
 8000f54:	20000094 	.word	0x20000094
 8000f58:	2000019c 	.word	0x2000019c
 8000f5c:	20000058 	.word	0x20000058
 8000f60:	200001c8 	.word	0x200001c8
 8000f64:	08000d11 	.word	0x08000d11
 8000f68:	2000007c 	.word	0x2000007c
 8000f6c:	08000b45 	.word	0x08000b45

08000f70 <timeoutState>:
 * @brief FSM timeout state handler.
 *
 * Sets @ref ERROR_MESSAGE to a timeout error and transitions
 * to @ref errorState.
 */
static void timeoutState() {
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	ERROR_MESSAGE = TIMEOUT_ERROR;
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <timeoutState+0x1c>)
 8000f76:	4a06      	ldr	r2, [pc, #24]	@ (8000f90 <timeoutState+0x20>)
 8000f78:	601a      	str	r2, [r3, #0]
	actualFunction = errorState;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <timeoutState+0x24>)
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <timeoutState+0x28>)
 8000f7e:	601a      	str	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000019c 	.word	0x2000019c
 8000f90:	2000001c 	.word	0x2000001c
 8000f94:	200001c8 	.word	0x200001c8
 8000f98:	08000d11 	.word	0x08000d11

08000f9c <uartFSM_init>:
 *
 * - Sets the initial state to @ref idleState.
 * - Initializes the UART peripheral.
 * - Calls @ref Error_Handler if UART initialization fails.
 */
void uartFSM_init() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	actualFunction = idleState;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <uartFSM_init+0x24>)
 8000fa2:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <uartFSM_init+0x28>)
 8000fa4:	601a      	str	r2, [r3, #0]
	if (!uartInit()) {
 8000fa6:	f000 f8c9 	bl	800113c <uartInit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <uartFSM_init+0x1e>
		Error_Handler();
 8000fb6:	f7ff fc37 	bl	8000828 <Error_Handler>
	}
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001c8 	.word	0x200001c8
 8000fc4:	08000b45 	.word	0x08000b45

08000fc8 <uartFSM_update>:
 * @brief Updates the UART finite state machine (FSM).
 *
 * Executes the function associated with the current state.
 * This should be called periodically in the main loop.
 */
void uartFSM_update() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	actualFunction();
 8000fcc:	4b02      	ldr	r3, [pc, #8]	@ (8000fd8 <uartFSM_update+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4798      	blx	r3
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200001c8 	.word	0x200001c8

08000fdc <errorIfNeeded>:
#include "API_hardware.h"
#include <stddef.h>

void Error_Handler(void); // Implemented in main.c always and defined in its main.h

static void errorIfNeeded(delay_t* delay) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <errorIfNeeded+0x12>
		Error_Handler();
 8000fea:	f7ff fc1d 	bl	8000828 <Error_Handler>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <delayRead>:
 * @param[in,out] delay  Pointer to the delay structure.
 *
 * @return `true` if the delay has expired.
 *         `false` if the delay is still running.
 */
bool_t delayRead( delay_t * delay ) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	errorIfNeeded(delay);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffec 	bl	8000fdc <errorIfNeeded>
	if (!delay->running) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7a1b      	ldrb	r3, [r3, #8]
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d009      	beq.n	8001026 <delayRead+0x30>
		delay->running = true;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	721a      	strb	r2, [r3, #8]
		delay->startTime = getTick();
 8001018:	f000 f854 	bl	80010c4 <getTick>
 800101c:	4602      	mov	r2, r0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
		return false;
 8001022:	2300      	movs	r3, #0
 8001024:	e01b      	b.n	800105e <delayRead+0x68>
	}
	delay->running = (getTick() - delay->startTime) < delay->duration;
 8001026:	f000 f84d 	bl	80010c4 <getTick>
 800102a:	4602      	mov	r2, r0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	bf34      	ite	cc
 800103a:	2301      	movcc	r3, #1
 800103c:	2300      	movcs	r3, #0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	721a      	strb	r2, [r3, #8]
	return !delay->running;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7a1b      	ldrb	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf14      	ite	ne
 800104c:	2301      	movne	r3, #1
 800104e:	2300      	moveq	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <delayInit>:
 * as false (`running = false`).
 *
 * @param[in,out] delay     Pointer to the delay structure to initialize.
 * @param[in]     duration  Delay duration in milliseconds.
 */
void delayInit( delay_t * delay, tick_t duration ) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
	errorIfNeeded(delay);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffb3 	bl	8000fdc <errorIfNeeded>
	delay->duration = duration;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	721a      	strb	r2, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <setPin>:
#include "stm32f4xx_hal.h"

#define LD2_Pin GPIO_PIN_5
#define LD2_GPIO_Port GPIOA

void setPin(bool_t on) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, on);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	461a      	mov	r2, r3
 800109a:	2120      	movs	r1, #32
 800109c:	4803      	ldr	r0, [pc, #12]	@ (80010ac <setPin+0x20>)
 800109e:	f000 fbf5 	bl	800188c <HAL_GPIO_WritePin>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020000 	.word	0x40020000

080010b0 <togglePin>:
void togglePin() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80010b4:	2120      	movs	r1, #32
 80010b6:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <togglePin+0x10>)
 80010b8:	f000 fc01 	bl	80018be <HAL_GPIO_TogglePin>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020000 	.word	0x40020000

080010c4 <getTick>:
bool_t readPin() {
	return HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
}
uint32_t getTick() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80010c8:	f000 f95a 	bl	8001380 <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <errorIfNeeded>:

static UART_HandleTypeDef UartHandle;
void Error_Handler(void); // Implemented in main.c always and defined in its main.h

const uint32_t TIMEOUT = 3000;
static void errorIfNeeded(void* delay) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <errorIfNeeded+0x12>
		Error_Handler();
 80010e0:	f7ff fba2 	bl	8000828 <Error_Handler>
	}
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <findCharIndex>:
 * @param[in] charToFind   Character to search for.
 * @param[in] max          Maximum number of characters to inspect.
 *
 * @return Index of the found character within the string.
 */
static uint16_t findCharIndex(uint8_t *pstring, uint8_t charToFind, uint16_t max) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	81fb      	strh	r3, [r7, #14]
	uint8_t actual = pstring[i];
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind) {
 800110a:	e00d      	b.n	8001128 <findCharIndex+0x3c>
		i++;
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	3301      	adds	r3, #1
 8001110:	81fb      	strh	r3, [r7, #14]
		actual = pstring[i];
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	737b      	strb	r3, [r7, #13]
		if (i >= max) {
 800111c:	89fa      	ldrh	r2, [r7, #14]
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d301      	bcc.n	8001128 <findCharIndex+0x3c>
			Error_Handler();
 8001124:	f7ff fb80 	bl	8000828 <Error_Handler>
	while (actual != charToFind) {
 8001128:	7b7a      	ldrb	r2, [r7, #13]
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	429a      	cmp	r2, r3
 800112e:	d1ed      	bne.n	800110c <findCharIndex+0x20>
		}
	}
	return i;
 8001130:	89fb      	ldrh	r3, [r7, #14]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <uartInit>:
 * the configuration.
 *
 * @return `true` if the UART was successfully initialized,
 *         `false` otherwise.
 */
bool_t uartInit() {
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b0cb      	sub	sp, #300	@ 0x12c
 8001140:	af06      	add	r7, sp, #24
	UartHandle.Instance = USART2;
 8001142:	4b32      	ldr	r3, [pc, #200]	@ (800120c <uartInit+0xd0>)
 8001144:	4a32      	ldr	r2, [pc, #200]	@ (8001210 <uartInit+0xd4>)
 8001146:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8001148:	4b30      	ldr	r3, [pc, #192]	@ (800120c <uartInit+0xd0>)
 800114a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800114e:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8001150:	4b2e      	ldr	r3, [pc, #184]	@ (800120c <uartInit+0xd0>)
 8001152:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001156:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <uartInit+0xd0>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <uartInit+0xd0>)
 8001160:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001164:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b29      	ldr	r3, [pc, #164]	@ (800120c <uartInit+0xd0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <uartInit+0xd0>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <uartInit+0xd0>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
	bool_t status = HAL_UART_Init(&UartHandle) == HAL_OK;
 8001178:	4824      	ldr	r0, [pc, #144]	@ (800120c <uartInit+0xd0>)
 800117a:	f001 f9a3 	bl	80024c4 <HAL_UART_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	if (status) {
 800118c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001190:	2b00      	cmp	r3, #0
 8001192:	d033      	beq.n	80011fc <uartInit+0xc0>
		char uart_json[256];

		snprintf(uart_json, sizeof(uart_json),
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <uartInit+0xd0>)
 8001196:	685e      	ldr	r6, [r3, #4]
 8001198:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <uartInit+0xd0>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <uartInit+0xd0>)
 80011a0:	68d2      	ldr	r2, [r2, #12]
 80011a2:	491a      	ldr	r1, [pc, #104]	@ (800120c <uartInit+0xd0>)
 80011a4:	6909      	ldr	r1, [r1, #16]
 80011a6:	4819      	ldr	r0, [pc, #100]	@ (800120c <uartInit+0xd0>)
 80011a8:	6980      	ldr	r0, [r0, #24]
 80011aa:	4c18      	ldr	r4, [pc, #96]	@ (800120c <uartInit+0xd0>)
 80011ac:	6964      	ldr	r4, [r4, #20]
 80011ae:	f107 050c 	add.w	r5, r7, #12
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <uartInit+0xd8>)
 80011b4:	9305      	str	r3, [sp, #20]
 80011b6:	9404      	str	r4, [sp, #16]
 80011b8:	9003      	str	r0, [sp, #12]
 80011ba:	9102      	str	r1, [sp, #8]
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4633      	mov	r3, r6
 80011c4:	4a14      	ldr	r2, [pc, #80]	@ (8001218 <uartInit+0xdc>)
 80011c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ca:	4628      	mov	r0, r5
 80011cc:	f001 fdde 	bl	8002d8c <sniprintf>
			UartHandle.Init.Parity,
			UartHandle.Init.HwFlowCtl,
			UartHandle.Init.Mode,
			"USART2"
		);
		uint8_t i = findCharIndex((uint8_t*)uart_json, '\n', 256);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	210a      	movs	r1, #10
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff86 	bl	80010ec <findCharIndex>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		uartSendStringSize((uint8_t*)uart_json, i+1);
 80011e6:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f830 	bl	800125c <uartSendStringSize>
	};
	return status;
 80011fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
}
 8001200:	4618      	mov	r0, r3
 8001202:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001206:	46bd      	mov	sp, r7
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	bf00      	nop
 800120c:	200001cc 	.word	0x200001cc
 8001210:	40004400 	.word	0x40004400
 8001214:	08003788 	.word	0x08003788
 8001218:	0800370c 	.word	0x0800370c

0800121c <uartSendString>:
 * The function determines the string length by searching for the
 * null terminator (`'\0'`) before transmitting.
 *
 * @param[in] pstring  Pointer to the null-terminated string to transmit.
 */
void uartSendString(uint8_t * pstring) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	errorIfNeeded(pstring);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff54 	bl	80010d2 <errorIfNeeded>
	uint16_t max = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	81fb      	strh	r3, [r7, #14]
	uint16_t i = findCharIndex(pstring, '\0', max -1);
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	3b01      	subs	r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff57 	bl	80010ec <findCharIndex>
 800123e:	4603      	mov	r3, r0
 8001240:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&UartHandle, pstring, i, TIMEOUT);
 8001242:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001246:	89ba      	ldrh	r2, [r7, #12]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4803      	ldr	r0, [pc, #12]	@ (8001258 <uartSendString+0x3c>)
 800124c:	f001 f987 	bl	800255e <HAL_UART_Transmit>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001cc 	.word	0x200001cc

0800125c <uartSendStringSize>:
 * Transmits exactly @p size bytes from the given string buffer.
 *
 * @param[in] pstring  Pointer to the string buffer to transmit.
 * @param[in] size     Number of bytes to transmit.
 */
void uartSendStringSize(uint8_t * pstring, uint16_t size) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
	errorIfNeeded(pstring);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff32 	bl	80010d2 <errorIfNeeded>
	HAL_UART_Transmit(&UartHandle, pstring, size, TIMEOUT);
 800126e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4803      	ldr	r0, [pc, #12]	@ (8001284 <uartSendStringSize+0x28>)
 8001278:	f001 f971 	bl	800255e <HAL_UART_Transmit>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001cc 	.word	0x200001cc

08001288 <uartReceiveStringSize>:
 * Reads exactly @p size bytes from UART into the given buffer.
 *
 * @param[out] pstring  Pointer to the buffer where received data will be stored.
 * @param[in]  size     Number of bytes to receive.
 */
void uartReceiveStringSize(uint8_t * pstring, uint16_t size) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
	errorIfNeeded(pstring);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff1c 	bl	80010d2 <errorIfNeeded>
	HAL_UART_Receive(&UartHandle, pstring, size, TIMEOUT);
 800129a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4803      	ldr	r0, [pc, #12]	@ (80012b0 <uartReceiveStringSize+0x28>)
 80012a4:	f001 f9ed 	bl	8002682 <HAL_UART_Receive>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001cc 	.word	0x200001cc

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f90d 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff faa4 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f917 	bl	800154a <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001334:	f000 f8ed 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	200000a0 	.word	0x200000a0
 8001354:	2000009c 	.word	0x2000009c

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200000a0 	.word	0x200000a0
 800137c:	20000210 	.word	0x20000210

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000210 	.word	0x20000210

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	@ (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	@ (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	@ 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	@ 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff47 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff5c 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffb0 	bl	80014b8 <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e165      	b.n	800184c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 8154 	bne.w	8001846 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80ae 	beq.w	8001846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a5c      	ldr	r2, [pc, #368]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001864 <HAL_GPIO_Init+0x300>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_GPIO_Init+0x304>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	@ (800186c <HAL_GPIO_Init+0x308>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d025      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01f      	beq.n	800177a <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	@ (8001874 <HAL_GPIO_Init+0x310>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d019      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	@ (8001878 <HAL_GPIO_Init+0x314>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	@ (800187c <HAL_GPIO_Init+0x318>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00d      	beq.n	800176e <HAL_GPIO_Init+0x20a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4a      	ldr	r2, [pc, #296]	@ (8001880 <HAL_GPIO_Init+0x31c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x206>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a49      	ldr	r2, [pc, #292]	@ (8001884 <HAL_GPIO_Init+0x320>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_GPIO_Init+0x202>
 8001762:	2306      	movs	r3, #6
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001766:	2307      	movs	r3, #7
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x21c>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	@ (8001868 <HAL_GPIO_Init+0x304>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3a      	ldr	r3, [pc, #232]	@ (8001888 <HAL_GPIO_Init+0x324>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a31      	ldr	r2, [pc, #196]	@ (8001888 <HAL_GPIO_Init+0x324>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <HAL_GPIO_Init+0x324>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_GPIO_Init+0x324>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b25      	ldr	r3, [pc, #148]	@ (8001888 <HAL_GPIO_Init+0x324>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_GPIO_Init+0x324>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_GPIO_Init+0x324>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <HAL_GPIO_Init+0x324>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae96 	bls.w	8001580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]
 8001898:	4613      	mov	r3, r2
 800189a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a8:	e003      	b.n	80018b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	041a      	lsls	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	619a      	str	r2, [r3, #24]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4013      	ands	r3, r2
 80018d6:	041a      	lsls	r2, r3, #16
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43d9      	mvns	r1, r3
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fccc 	bl	8001380 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff fcc8 	bl	8001380 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f855 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc2c 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08003790 	.word	0x08003790
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	2000009c 	.word	0x2000009c

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a9b      	lsrs	r3, r3, #10
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4903      	ldr	r1, [pc, #12]	@ (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5ccb      	ldrb	r3, [r1, r3]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	080037a0 	.word	0x080037a0

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffdc 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0b5b      	lsrs	r3, r3, #13
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	@ (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	080037a0 	.word	0x080037a0

08001b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b2c:	b0ae      	sub	sp, #184	@ 0xb8
 8001b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4e:	4bcb      	ldr	r3, [pc, #812]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	f200 8206 	bhi.w	8001f68 <HAL_RCC_GetSysClockFreq+0x440>
 8001b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b99 	.word	0x08001b99
 8001b68:	08001f69 	.word	0x08001f69
 8001b6c:	08001f69 	.word	0x08001f69
 8001b70:	08001f69 	.word	0x08001f69
 8001b74:	08001ba1 	.word	0x08001ba1
 8001b78:	08001f69 	.word	0x08001f69
 8001b7c:	08001f69 	.word	0x08001f69
 8001b80:	08001f69 	.word	0x08001f69
 8001b84:	08001ba9 	.word	0x08001ba9
 8001b88:	08001f69 	.word	0x08001f69
 8001b8c:	08001f69 	.word	0x08001f69
 8001b90:	08001f69 	.word	0x08001f69
 8001b94:	08001d99 	.word	0x08001d99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4bb9      	ldr	r3, [pc, #740]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001b9e:	e1e7      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba0:	4bb8      	ldr	r3, [pc, #736]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ba6:	e1e3      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba8:	4bb4      	ldr	r3, [pc, #720]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb4:	4bb1      	ldr	r3, [pc, #708]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d071      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc0:	4bae      	ldr	r3, [pc, #696]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001bcc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	0159      	lsls	r1, r3, #5
 8001bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf8:	0150      	lsls	r0, r2, #5
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4621      	mov	r1, r4
 8001c00:	1a51      	subs	r1, r2, r1
 8001c02:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c04:	4629      	mov	r1, r5
 8001c06:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c18:	4649      	mov	r1, r9
 8001c1a:	018b      	lsls	r3, r1, #6
 8001c1c:	4641      	mov	r1, r8
 8001c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c22:	4641      	mov	r1, r8
 8001c24:	018a      	lsls	r2, r1, #6
 8001c26:	4641      	mov	r1, r8
 8001c28:	1a51      	subs	r1, r2, r1
 8001c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c40:	4649      	mov	r1, r9
 8001c42:	00cb      	lsls	r3, r1, #3
 8001c44:	4641      	mov	r1, r8
 8001c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4a:	4641      	mov	r1, r8
 8001c4c:	00ca      	lsls	r2, r1, #3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	4622      	mov	r2, r4
 8001c56:	189b      	adds	r3, r3, r2
 8001c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	eb42 0303 	adc.w	r3, r2, r3
 8001c62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c70:	4629      	mov	r1, r5
 8001c72:	024b      	lsls	r3, r1, #9
 8001c74:	4621      	mov	r1, r4
 8001c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	024a      	lsls	r2, r1, #9
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c94:	f7fe fb1c 	bl	80002d0 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ca2:	e067      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca4:	4b75      	ldr	r3, [pc, #468]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	2200      	movs	r2, #0
 8001cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cb0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	462b      	mov	r3, r5
 8001cca:	f04f 0000 	mov.w	r0, #0
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	0159      	lsls	r1, r3, #5
 8001cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd8:	0150      	lsls	r0, r2, #5
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4621      	mov	r1, r4
 8001ce0:	1a51      	subs	r1, r2, r1
 8001ce2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d02:	4641      	mov	r1, r8
 8001d04:	018a      	lsls	r2, r1, #6
 8001d06:	4641      	mov	r1, r8
 8001d08:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d26:	4692      	mov	sl, r2
 8001d28:	469b      	mov	fp, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	eb1a 0303 	adds.w	r3, sl, r3
 8001d30:	623b      	str	r3, [r7, #32]
 8001d32:	462b      	mov	r3, r5
 8001d34:	eb4b 0303 	adc.w	r3, fp, r3
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d46:	4629      	mov	r1, r5
 8001d48:	028b      	lsls	r3, r1, #10
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d50:	4621      	mov	r1, r4
 8001d52:	028a      	lsls	r2, r1, #10
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d60:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d66:	f7fe fab3 	bl	80002d0 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4613      	mov	r3, r2
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d74:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	0c1b      	lsrs	r3, r3, #16
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d96:	e0eb      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d98:	4b38      	ldr	r3, [pc, #224]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da4:	4b35      	ldr	r3, [pc, #212]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d06b      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	2200      	movs	r2, #0
 8001db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001dbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001dc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dcc:	4622      	mov	r2, r4
 8001dce:	462b      	mov	r3, r5
 8001dd0:	f04f 0000 	mov.w	r0, #0
 8001dd4:	f04f 0100 	mov.w	r1, #0
 8001dd8:	0159      	lsls	r1, r3, #5
 8001dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dde:	0150      	lsls	r0, r2, #5
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4621      	mov	r1, r4
 8001de6:	1a51      	subs	r1, r2, r1
 8001de8:	61b9      	str	r1, [r7, #24]
 8001dea:	4629      	mov	r1, r5
 8001dec:	eb63 0301 	sbc.w	r3, r3, r1
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001dfe:	4659      	mov	r1, fp
 8001e00:	018b      	lsls	r3, r1, #6
 8001e02:	4651      	mov	r1, sl
 8001e04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e08:	4651      	mov	r1, sl
 8001e0a:	018a      	lsls	r2, r1, #6
 8001e0c:	4651      	mov	r1, sl
 8001e0e:	ebb2 0801 	subs.w	r8, r2, r1
 8001e12:	4659      	mov	r1, fp
 8001e14:	eb63 0901 	sbc.w	r9, r3, r1
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e2c:	4690      	mov	r8, r2
 8001e2e:	4699      	mov	r9, r3
 8001e30:	4623      	mov	r3, r4
 8001e32:	eb18 0303 	adds.w	r3, r8, r3
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	462b      	mov	r3, r5
 8001e3a:	eb49 0303 	adc.w	r3, r9, r3
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	024b      	lsls	r3, r1, #9
 8001e50:	4621      	mov	r1, r4
 8001e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e56:	4621      	mov	r1, r4
 8001e58:	024a      	lsls	r2, r1, #9
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e62:	2200      	movs	r2, #0
 8001e64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e6c:	f7fe fa30 	bl	80002d0 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e7a:	e065      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x420>
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e88:	4b3d      	ldr	r3, [pc, #244]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	4611      	mov	r1, r2
 8001e94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e98:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ea2:	4642      	mov	r2, r8
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	f04f 0000 	mov.w	r0, #0
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	0159      	lsls	r1, r3, #5
 8001eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb4:	0150      	lsls	r0, r2, #5
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4641      	mov	r1, r8
 8001ebc:	1a51      	subs	r1, r2, r1
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ed4:	4659      	mov	r1, fp
 8001ed6:	018b      	lsls	r3, r1, #6
 8001ed8:	4651      	mov	r1, sl
 8001eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ede:	4651      	mov	r1, sl
 8001ee0:	018a      	lsls	r2, r1, #6
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	1a54      	subs	r4, r2, r1
 8001ee6:	4659      	mov	r1, fp
 8001ee8:	eb63 0501 	sbc.w	r5, r3, r1
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	00eb      	lsls	r3, r5, #3
 8001ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001efa:	00e2      	lsls	r2, r4, #3
 8001efc:	4614      	mov	r4, r2
 8001efe:	461d      	mov	r5, r3
 8001f00:	4643      	mov	r3, r8
 8001f02:	18e3      	adds	r3, r4, r3
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	464b      	mov	r3, r9
 8001f08:	eb45 0303 	adc.w	r3, r5, r3
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	028b      	lsls	r3, r1, #10
 8001f1e:	4621      	mov	r1, r4
 8001f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f24:	4621      	mov	r1, r4
 8001f26:	028a      	lsls	r2, r1, #10
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f30:	2200      	movs	r2, #0
 8001f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f3a:	f7fe f9c9 	bl	80002d0 <__aeabi_uldivmod>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4613      	mov	r3, r2
 8001f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0f1b      	lsrs	r3, r3, #28
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f66:	e003      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	37b8      	adds	r7, #184	@ 0xb8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	00f42400 	.word	0x00f42400

08001f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e28d      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8083 	beq.w	80020ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fa8:	4b94      	ldr	r3, [pc, #592]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d019      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fb4:	4b91      	ldr	r3, [pc, #580]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b8b      	ldr	r3, [pc, #556]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b84      	ldr	r3, [pc, #528]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d05b      	beq.n	80020ac <HAL_RCC_OscConfig+0x124>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d157      	bne.n	80020ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e25a      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x90>
 800200a:	4b7c      	ldr	r3, [pc, #496]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7b      	ldr	r2, [pc, #492]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xcc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0xb4>
 8002022:	4b76      	ldr	r3, [pc, #472]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b73      	ldr	r3, [pc, #460]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a72      	ldr	r2, [pc, #456]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xcc>
 800203c:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b6c      	ldr	r3, [pc, #432]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6b      	ldr	r2, [pc, #428]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f990 	bl	8001380 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f98c 	bl	8001380 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e21f      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xdc>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f97c 	bl	8001380 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f978 	bl	8001380 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e20b      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x104>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d06f      	beq.n	800219a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ba:	4b50      	ldr	r3, [pc, #320]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d017      	beq.n	80020f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020c6:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d105      	bne.n	80020de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x186>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1d3      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4937      	ldr	r1, [pc, #220]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b34      	ldr	r3, [pc, #208]	@ (8002200 <HAL_RCC_OscConfig+0x278>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f925 	bl	8001380 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f921 	bl	8001380 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1b4      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b28      	ldr	r3, [pc, #160]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4925      	ldr	r1, [pc, #148]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <HAL_RCC_OscConfig+0x278>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f904 	bl	8001380 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f900 	bl	8001380 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e193      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f8e4 	bl	8001380 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f8e0 	bl	8001380 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e173      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_RCC_OscConfig+0x274>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x234>
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_OscConfig+0x27c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7ff f8cd 	bl	8001380 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e00e      	b.n	8002208 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff f8c9 	bl	8001380 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d907      	bls.n	8002208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e15c      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470000 	.word	0x42470000
 8002204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b8a      	ldr	r3, [pc, #552]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ea      	bne.n	80021ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8097 	beq.w	8002350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b83      	ldr	r3, [pc, #524]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b7f      	ldr	r3, [pc, #508]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b7c      	ldr	r3, [pc, #496]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b79      	ldr	r3, [pc, #484]	@ (8002438 <HAL_RCC_OscConfig+0x4b0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCC_OscConfig+0x4b0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x4b0>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff f889 	bl	8001380 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff f885 	bl	8001380 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e118      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <HAL_RCC_OscConfig+0x4b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x31e>
 8002298:	4b66      	ldr	r3, [pc, #408]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229c:	4a65      	ldr	r2, [pc, #404]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x358>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x340>
 80022ae:	4b61      	ldr	r3, [pc, #388]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a60      	ldr	r2, [pc, #384]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	4a5d      	ldr	r2, [pc, #372]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x358>
 80022c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a56      	ldr	r2, [pc, #344]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7ff f84a 	bl	8001380 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7ff f846 	bl	8001380 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0d7      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <HAL_RCC_OscConfig+0x368>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff f834 	bl	8001380 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff f830 	bl	8001380 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0c1      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	4b40      	ldr	r3, [pc, #256]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ee      	bne.n	800231c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b3b      	ldr	r3, [pc, #236]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	4a3a      	ldr	r2, [pc, #232]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80ad 	beq.w	80024b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235a:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d060      	beq.n	8002428 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d145      	bne.n	80023fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b33      	ldr	r3, [pc, #204]	@ (800243c <HAL_RCC_OscConfig+0x4b4>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f804 	bl	8001380 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f800 	bl	8001380 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e093      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	019b      	lsls	r3, r3, #6
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	071b      	lsls	r3, r3, #28
 80023c6:	491b      	ldr	r1, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x4b4>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe ffd5 	bl	8001380 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe ffd1 	bl	8001380 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e064      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x452>
 80023f8:	e05c      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x4b4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe ffbe 	bl	8001380 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ffba 	bl	8001380 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04d      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x480>
 8002426:	e045      	b.n	80024b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e040      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000
 800243c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002440:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <HAL_RCC_OscConfig+0x538>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d030      	beq.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d129      	bne.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d122      	bne.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002478:	4293      	cmp	r3, r2
 800247a:	d119      	bne.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d10f      	bne.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e03f      	b.n	8002556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe f9ca 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f9cb 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800251c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800252c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800253c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b08a      	sub	sp, #40	@ 0x28
 8002562:	af02      	add	r7, sp, #8
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b20      	cmp	r3, #32
 800257c:	d17c      	bne.n	8002678 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <HAL_UART_Transmit+0x2c>
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e075      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_UART_Transmit+0x3e>
 8002598:	2302      	movs	r3, #2
 800259a:	e06e      	b.n	800267a <HAL_UART_Transmit+0x11c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2221      	movs	r2, #33	@ 0x21
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025b2:	f7fe fee5 	bl	8001380 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	88fa      	ldrh	r2, [r7, #6]
 80025bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025cc:	d108      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	e003      	b.n	80025e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80025f0:	e02a      	b.n	8002648 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2180      	movs	r1, #128	@ 0x80
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f8e2 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e036      	b.n	800267a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10b      	bne.n	800262a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002620:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3302      	adds	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e007      	b.n	800263a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	781a      	ldrb	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1cf      	bne.n	80025f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2140      	movs	r1, #64	@ 0x40
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f8b2 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e006      	b.n	800267a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b08a      	sub	sp, #40	@ 0x28
 8002686:	af02      	add	r7, sp, #8
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	f040 808c 	bne.w	80027bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_UART_Receive+0x2e>
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e084      	b.n	80027be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Receive+0x40>
 80026be:	2302      	movs	r3, #2
 80026c0:	e07d      	b.n	80027be <HAL_UART_Receive+0x13c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2222      	movs	r2, #34	@ 0x22
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026de:	f7fe fe4f 	bl	8001380 <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	88fa      	ldrh	r2, [r7, #6]
 80026ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f8:	d108      	bne.n	800270c <HAL_UART_Receive+0x8a>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	e003      	b.n	8002714 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800271c:	e043      	b.n	80027a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2200      	movs	r2, #0
 8002726:	2120      	movs	r1, #32
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f84c 	bl	80027c6 <UART_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e042      	b.n	80027be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	b29b      	uxth	r3, r3
 8002746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274a:	b29a      	uxth	r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	3302      	adds	r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e01f      	b.n	8002798 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002760:	d007      	beq.n	8002772 <HAL_UART_Receive+0xf0>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <HAL_UART_Receive+0xfe>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e008      	b.n	8002792 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278c:	b2da      	uxtb	r2, r3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3301      	adds	r3, #1
 8002796:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1b6      	bne.n	800271e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e000      	b.n	80027be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80027bc:	2302      	movs	r3, #2
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b090      	sub	sp, #64	@ 0x40
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d6:	e050      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027de:	d04c      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027e6:	f7fe fdcb 	bl	8001380 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d241      	bcs.n	800287a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	330c      	adds	r3, #12
 8002814:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002816:	637a      	str	r2, [r7, #52]	@ 0x34
 8002818:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800281c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e5      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3314      	adds	r3, #20
 8002830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	e853 3f00 	ldrex	r3, [r3]
 8002838:	613b      	str	r3, [r7, #16]
   return(result);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800284a:	623a      	str	r2, [r7, #32]
 800284c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	69f9      	ldr	r1, [r7, #28]
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	61bb      	str	r3, [r7, #24]
   return(result);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e5      	bne.n	800282a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d09f      	beq.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3740      	adds	r7, #64	@ 0x40
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0c0      	sub	sp, #256	@ 0x100
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	ea40 0301 	orr.w	r3, r0, r1
 80028cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028fc:	f021 010c 	bic.w	r1, r1, #12
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	6999      	ldr	r1, [r3, #24]
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	ea40 0301 	orr.w	r3, r0, r1
 800292a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <UART_SetConfig+0xa0>
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <UART_SetConfig+0x2d0>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d104      	bne.n	800294e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7ff f8dc 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 8002948:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff f8c3 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002952:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002960:	f040 810c 	bne.w	8002b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800296e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	1891      	adds	r1, r2, r2
 800297c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800297e:	415b      	adcs	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002986:	4621      	mov	r1, r4
 8002988:	eb12 0801 	adds.w	r8, r2, r1
 800298c:	4629      	mov	r1, r5
 800298e:	eb43 0901 	adc.w	r9, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb18 0303 	adds.w	r3, r8, r3
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029b4:	462b      	mov	r3, r5
 80029b6:	eb49 0303 	adc.w	r3, r9, r3
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029d2:	460b      	mov	r3, r1
 80029d4:	18db      	adds	r3, r3, r3
 80029d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029d8:	4613      	mov	r3, r2
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	657b      	str	r3, [r7, #84]	@ 0x54
 80029e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029e8:	f7fd fc72 	bl	80002d0 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b61      	ldr	r3, [pc, #388]	@ (8002b78 <UART_SetConfig+0x2d4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a14:	415b      	adcs	r3, r3
 8002a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a22:	4649      	mov	r1, r9
 8002a24:	eb43 0b01 	adc.w	fp, r3, r1
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	469b      	mov	fp, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	eb1a 0303 	adds.w	r3, sl, r3
 8002a46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a7e:	f7fd fc27 	bl	80002d0 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2264      	movs	r2, #100	@ 0x64
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a9e:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002aac:	441c      	add	r4, r3
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b04:	464b      	mov	r3, r9
 8002b06:	460a      	mov	r2, r1
 8002b08:	eb42 0303 	adc.w	r3, r2, r3
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b24:	460b      	mov	r3, r1
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	eb42 0303 	adc.w	r3, r2, r3
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b3a:	f7fd fbc9 	bl	80002d0 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	@ 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	3332      	adds	r3, #50	@ 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b6c:	e106      	b.n	8002d7c <UART_SetConfig+0x4d8>
 8002b6e:	bf00      	nop
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b8e:	4642      	mov	r2, r8
 8002b90:	464b      	mov	r3, r9
 8002b92:	1891      	adds	r1, r2, r2
 8002b94:	6239      	str	r1, [r7, #32]
 8002b96:	415b      	adcs	r3, r3
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1854      	adds	r4, r2, r1
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	eb43 0501 	adc.w	r5, r3, r1
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	eb45 0303 	adc.w	r3, r5, r3
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bea:	4629      	mov	r1, r5
 8002bec:	008b      	lsls	r3, r1, #2
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	008a      	lsls	r2, r1, #2
 8002bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bfc:	f7fd fb68 	bl	80002d0 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b60      	ldr	r3, [pc, #384]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002c06:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	011c      	lsls	r4, r3, #4
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	61b9      	str	r1, [r7, #24]
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c88:	4649      	mov	r1, r9
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4641      	mov	r1, r8
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c9a:	f7fd fb19 	bl	80002d0 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	@ 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	@ 0x32
 8002cb8:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cce:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d16:	464b      	mov	r3, r9
 8002d18:	460a      	mov	r2, r1
 8002d1a:	eb42 0303 	adc.w	r3, r2, r3
 8002d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d4a:	f7fd fac1 	bl	80002d0 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	@ 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	@ 0x32
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d82:	46bd      	mov	sp, r7
 8002d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <sniprintf>:
 8002d8c:	b40c      	push	{r2, r3}
 8002d8e:	b530      	push	{r4, r5, lr}
 8002d90:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <sniprintf+0x68>)
 8002d92:	1e0c      	subs	r4, r1, #0
 8002d94:	681d      	ldr	r5, [r3, #0]
 8002d96:	b09d      	sub	sp, #116	@ 0x74
 8002d98:	da08      	bge.n	8002dac <sniprintf+0x20>
 8002d9a:	238b      	movs	r3, #139	@ 0x8b
 8002d9c:	602b      	str	r3, [r5, #0]
 8002d9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002da2:	b01d      	add	sp, #116	@ 0x74
 8002da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002da8:	b002      	add	sp, #8
 8002daa:	4770      	bx	lr
 8002dac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002db0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002dba:	bf14      	ite	ne
 8002dbc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002dc0:	4623      	moveq	r3, r4
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	9307      	str	r3, [sp, #28]
 8002dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dca:	9002      	str	r0, [sp, #8]
 8002dcc:	9006      	str	r0, [sp, #24]
 8002dce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002dd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002dd4:	ab21      	add	r3, sp, #132	@ 0x84
 8002dd6:	a902      	add	r1, sp, #8
 8002dd8:	4628      	mov	r0, r5
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	f000 f994 	bl	8003108 <_svfiprintf_r>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	bfbc      	itt	lt
 8002de4:	238b      	movlt	r3, #139	@ 0x8b
 8002de6:	602b      	strlt	r3, [r5, #0]
 8002de8:	2c00      	cmp	r4, #0
 8002dea:	d0da      	beq.n	8002da2 <sniprintf+0x16>
 8002dec:	9b02      	ldr	r3, [sp, #8]
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e7d6      	b.n	8002da2 <sniprintf+0x16>
 8002df4:	200000a4 	.word	0x200000a4

08002df8 <memset>:
 8002df8:	4402      	add	r2, r0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <memset+0xa>
 8002e00:	4770      	bx	lr
 8002e02:	f803 1b01 	strb.w	r1, [r3], #1
 8002e06:	e7f9      	b.n	8002dfc <memset+0x4>

08002e08 <__errno>:
 8002e08:	4b01      	ldr	r3, [pc, #4]	@ (8002e10 <__errno+0x8>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	200000a4 	.word	0x200000a4

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4d0d      	ldr	r5, [pc, #52]	@ (8002e4c <__libc_init_array+0x38>)
 8002e18:	4c0d      	ldr	r4, [pc, #52]	@ (8002e50 <__libc_init_array+0x3c>)
 8002e1a:	1b64      	subs	r4, r4, r5
 8002e1c:	10a4      	asrs	r4, r4, #2
 8002e1e:	2600      	movs	r6, #0
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	4d0b      	ldr	r5, [pc, #44]	@ (8002e54 <__libc_init_array+0x40>)
 8002e26:	4c0c      	ldr	r4, [pc, #48]	@ (8002e58 <__libc_init_array+0x44>)
 8002e28:	f000 fc64 	bl	80036f4 <_init>
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	2600      	movs	r6, #0
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	080037e8 	.word	0x080037e8
 8002e50:	080037e8 	.word	0x080037e8
 8002e54:	080037e8 	.word	0x080037e8
 8002e58:	080037ec 	.word	0x080037ec

08002e5c <__retarget_lock_acquire_recursive>:
 8002e5c:	4770      	bx	lr

08002e5e <__retarget_lock_release_recursive>:
 8002e5e:	4770      	bx	lr

08002e60 <_free_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	4605      	mov	r5, r0
 8002e64:	2900      	cmp	r1, #0
 8002e66:	d041      	beq.n	8002eec <_free_r+0x8c>
 8002e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e6c:	1f0c      	subs	r4, r1, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfb8      	it	lt
 8002e72:	18e4      	addlt	r4, r4, r3
 8002e74:	f000 f8e0 	bl	8003038 <__malloc_lock>
 8002e78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <_free_r+0x90>)
 8002e7a:	6813      	ldr	r3, [r2, #0]
 8002e7c:	b933      	cbnz	r3, 8002e8c <_free_r+0x2c>
 8002e7e:	6063      	str	r3, [r4, #4]
 8002e80:	6014      	str	r4, [r2, #0]
 8002e82:	4628      	mov	r0, r5
 8002e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e88:	f000 b8dc 	b.w	8003044 <__malloc_unlock>
 8002e8c:	42a3      	cmp	r3, r4
 8002e8e:	d908      	bls.n	8002ea2 <_free_r+0x42>
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	1821      	adds	r1, r4, r0
 8002e94:	428b      	cmp	r3, r1
 8002e96:	bf01      	itttt	eq
 8002e98:	6819      	ldreq	r1, [r3, #0]
 8002e9a:	685b      	ldreq	r3, [r3, #4]
 8002e9c:	1809      	addeq	r1, r1, r0
 8002e9e:	6021      	streq	r1, [r4, #0]
 8002ea0:	e7ed      	b.n	8002e7e <_free_r+0x1e>
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b10b      	cbz	r3, 8002eac <_free_r+0x4c>
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	d9fa      	bls.n	8002ea2 <_free_r+0x42>
 8002eac:	6811      	ldr	r1, [r2, #0]
 8002eae:	1850      	adds	r0, r2, r1
 8002eb0:	42a0      	cmp	r0, r4
 8002eb2:	d10b      	bne.n	8002ecc <_free_r+0x6c>
 8002eb4:	6820      	ldr	r0, [r4, #0]
 8002eb6:	4401      	add	r1, r0
 8002eb8:	1850      	adds	r0, r2, r1
 8002eba:	4283      	cmp	r3, r0
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	d1e0      	bne.n	8002e82 <_free_r+0x22>
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	6053      	str	r3, [r2, #4]
 8002ec6:	4408      	add	r0, r1
 8002ec8:	6010      	str	r0, [r2, #0]
 8002eca:	e7da      	b.n	8002e82 <_free_r+0x22>
 8002ecc:	d902      	bls.n	8002ed4 <_free_r+0x74>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	e7d6      	b.n	8002e82 <_free_r+0x22>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	1821      	adds	r1, r4, r0
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	bf04      	itt	eq
 8002edc:	6819      	ldreq	r1, [r3, #0]
 8002ede:	685b      	ldreq	r3, [r3, #4]
 8002ee0:	6063      	str	r3, [r4, #4]
 8002ee2:	bf04      	itt	eq
 8002ee4:	1809      	addeq	r1, r1, r0
 8002ee6:	6021      	streq	r1, [r4, #0]
 8002ee8:	6054      	str	r4, [r2, #4]
 8002eea:	e7ca      	b.n	8002e82 <_free_r+0x22>
 8002eec:	bd38      	pop	{r3, r4, r5, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000358 	.word	0x20000358

08002ef4 <sbrk_aligned>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8002f34 <sbrk_aligned+0x40>)
 8002ef8:	460c      	mov	r4, r1
 8002efa:	6831      	ldr	r1, [r6, #0]
 8002efc:	4605      	mov	r5, r0
 8002efe:	b911      	cbnz	r1, 8002f06 <sbrk_aligned+0x12>
 8002f00:	f000 fba4 	bl	800364c <_sbrk_r>
 8002f04:	6030      	str	r0, [r6, #0]
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 fb9f 	bl	800364c <_sbrk_r>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	d103      	bne.n	8002f1a <sbrk_aligned+0x26>
 8002f12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f16:	4620      	mov	r0, r4
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	1cc4      	adds	r4, r0, #3
 8002f1c:	f024 0403 	bic.w	r4, r4, #3
 8002f20:	42a0      	cmp	r0, r4
 8002f22:	d0f8      	beq.n	8002f16 <sbrk_aligned+0x22>
 8002f24:	1a21      	subs	r1, r4, r0
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 fb90 	bl	800364c <_sbrk_r>
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d1f2      	bne.n	8002f16 <sbrk_aligned+0x22>
 8002f30:	e7ef      	b.n	8002f12 <sbrk_aligned+0x1e>
 8002f32:	bf00      	nop
 8002f34:	20000354 	.word	0x20000354

08002f38 <_malloc_r>:
 8002f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f3c:	1ccd      	adds	r5, r1, #3
 8002f3e:	f025 0503 	bic.w	r5, r5, #3
 8002f42:	3508      	adds	r5, #8
 8002f44:	2d0c      	cmp	r5, #12
 8002f46:	bf38      	it	cc
 8002f48:	250c      	movcc	r5, #12
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	db01      	blt.n	8002f54 <_malloc_r+0x1c>
 8002f50:	42a9      	cmp	r1, r5
 8002f52:	d904      	bls.n	8002f5e <_malloc_r+0x26>
 8002f54:	230c      	movs	r3, #12
 8002f56:	6033      	str	r3, [r6, #0]
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003034 <_malloc_r+0xfc>
 8002f62:	f000 f869 	bl	8003038 <__malloc_lock>
 8002f66:	f8d8 3000 	ldr.w	r3, [r8]
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	bb44      	cbnz	r4, 8002fc0 <_malloc_r+0x88>
 8002f6e:	4629      	mov	r1, r5
 8002f70:	4630      	mov	r0, r6
 8002f72:	f7ff ffbf 	bl	8002ef4 <sbrk_aligned>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	4604      	mov	r4, r0
 8002f7a:	d158      	bne.n	800302e <_malloc_r+0xf6>
 8002f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8002f80:	4627      	mov	r7, r4
 8002f82:	2f00      	cmp	r7, #0
 8002f84:	d143      	bne.n	800300e <_malloc_r+0xd6>
 8002f86:	2c00      	cmp	r4, #0
 8002f88:	d04b      	beq.n	8003022 <_malloc_r+0xea>
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4630      	mov	r0, r6
 8002f90:	eb04 0903 	add.w	r9, r4, r3
 8002f94:	f000 fb5a 	bl	800364c <_sbrk_r>
 8002f98:	4581      	cmp	r9, r0
 8002f9a:	d142      	bne.n	8003022 <_malloc_r+0xea>
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	1a6d      	subs	r5, r5, r1
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f7ff ffa6 	bl	8002ef4 <sbrk_aligned>
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d03a      	beq.n	8003022 <_malloc_r+0xea>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	442b      	add	r3, r5
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	bb62      	cbnz	r2, 8003014 <_malloc_r+0xdc>
 8002fba:	f8c8 7000 	str.w	r7, [r8]
 8002fbe:	e00f      	b.n	8002fe0 <_malloc_r+0xa8>
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	1b52      	subs	r2, r2, r5
 8002fc4:	d420      	bmi.n	8003008 <_malloc_r+0xd0>
 8002fc6:	2a0b      	cmp	r2, #11
 8002fc8:	d917      	bls.n	8002ffa <_malloc_r+0xc2>
 8002fca:	1961      	adds	r1, r4, r5
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	6025      	str	r5, [r4, #0]
 8002fd0:	bf18      	it	ne
 8002fd2:	6059      	strne	r1, [r3, #4]
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	bf08      	it	eq
 8002fd8:	f8c8 1000 	streq.w	r1, [r8]
 8002fdc:	5162      	str	r2, [r4, r5]
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	f000 f82f 	bl	8003044 <__malloc_unlock>
 8002fe6:	f104 000b 	add.w	r0, r4, #11
 8002fea:	1d23      	adds	r3, r4, #4
 8002fec:	f020 0007 	bic.w	r0, r0, #7
 8002ff0:	1ac2      	subs	r2, r0, r3
 8002ff2:	bf1c      	itt	ne
 8002ff4:	1a1b      	subne	r3, r3, r0
 8002ff6:	50a3      	strne	r3, [r4, r2]
 8002ff8:	e7af      	b.n	8002f5a <_malloc_r+0x22>
 8002ffa:	6862      	ldr	r2, [r4, #4]
 8002ffc:	42a3      	cmp	r3, r4
 8002ffe:	bf0c      	ite	eq
 8003000:	f8c8 2000 	streq.w	r2, [r8]
 8003004:	605a      	strne	r2, [r3, #4]
 8003006:	e7eb      	b.n	8002fe0 <_malloc_r+0xa8>
 8003008:	4623      	mov	r3, r4
 800300a:	6864      	ldr	r4, [r4, #4]
 800300c:	e7ae      	b.n	8002f6c <_malloc_r+0x34>
 800300e:	463c      	mov	r4, r7
 8003010:	687f      	ldr	r7, [r7, #4]
 8003012:	e7b6      	b.n	8002f82 <_malloc_r+0x4a>
 8003014:	461a      	mov	r2, r3
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	42a3      	cmp	r3, r4
 800301a:	d1fb      	bne.n	8003014 <_malloc_r+0xdc>
 800301c:	2300      	movs	r3, #0
 800301e:	6053      	str	r3, [r2, #4]
 8003020:	e7de      	b.n	8002fe0 <_malloc_r+0xa8>
 8003022:	230c      	movs	r3, #12
 8003024:	6033      	str	r3, [r6, #0]
 8003026:	4630      	mov	r0, r6
 8003028:	f000 f80c 	bl	8003044 <__malloc_unlock>
 800302c:	e794      	b.n	8002f58 <_malloc_r+0x20>
 800302e:	6005      	str	r5, [r0, #0]
 8003030:	e7d6      	b.n	8002fe0 <_malloc_r+0xa8>
 8003032:	bf00      	nop
 8003034:	20000358 	.word	0x20000358

08003038 <__malloc_lock>:
 8003038:	4801      	ldr	r0, [pc, #4]	@ (8003040 <__malloc_lock+0x8>)
 800303a:	f7ff bf0f 	b.w	8002e5c <__retarget_lock_acquire_recursive>
 800303e:	bf00      	nop
 8003040:	20000350 	.word	0x20000350

08003044 <__malloc_unlock>:
 8003044:	4801      	ldr	r0, [pc, #4]	@ (800304c <__malloc_unlock+0x8>)
 8003046:	f7ff bf0a 	b.w	8002e5e <__retarget_lock_release_recursive>
 800304a:	bf00      	nop
 800304c:	20000350 	.word	0x20000350

08003050 <__ssputs_r>:
 8003050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	688e      	ldr	r6, [r1, #8]
 8003056:	461f      	mov	r7, r3
 8003058:	42be      	cmp	r6, r7
 800305a:	680b      	ldr	r3, [r1, #0]
 800305c:	4682      	mov	sl, r0
 800305e:	460c      	mov	r4, r1
 8003060:	4690      	mov	r8, r2
 8003062:	d82d      	bhi.n	80030c0 <__ssputs_r+0x70>
 8003064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003068:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800306c:	d026      	beq.n	80030bc <__ssputs_r+0x6c>
 800306e:	6965      	ldr	r5, [r4, #20]
 8003070:	6909      	ldr	r1, [r1, #16]
 8003072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003076:	eba3 0901 	sub.w	r9, r3, r1
 800307a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800307e:	1c7b      	adds	r3, r7, #1
 8003080:	444b      	add	r3, r9
 8003082:	106d      	asrs	r5, r5, #1
 8003084:	429d      	cmp	r5, r3
 8003086:	bf38      	it	cc
 8003088:	461d      	movcc	r5, r3
 800308a:	0553      	lsls	r3, r2, #21
 800308c:	d527      	bpl.n	80030de <__ssputs_r+0x8e>
 800308e:	4629      	mov	r1, r5
 8003090:	f7ff ff52 	bl	8002f38 <_malloc_r>
 8003094:	4606      	mov	r6, r0
 8003096:	b360      	cbz	r0, 80030f2 <__ssputs_r+0xa2>
 8003098:	6921      	ldr	r1, [r4, #16]
 800309a:	464a      	mov	r2, r9
 800309c:	f000 fae6 	bl	800366c <memcpy>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	6126      	str	r6, [r4, #16]
 80030ae:	6165      	str	r5, [r4, #20]
 80030b0:	444e      	add	r6, r9
 80030b2:	eba5 0509 	sub.w	r5, r5, r9
 80030b6:	6026      	str	r6, [r4, #0]
 80030b8:	60a5      	str	r5, [r4, #8]
 80030ba:	463e      	mov	r6, r7
 80030bc:	42be      	cmp	r6, r7
 80030be:	d900      	bls.n	80030c2 <__ssputs_r+0x72>
 80030c0:	463e      	mov	r6, r7
 80030c2:	6820      	ldr	r0, [r4, #0]
 80030c4:	4632      	mov	r2, r6
 80030c6:	4641      	mov	r1, r8
 80030c8:	f000 faa6 	bl	8003618 <memmove>
 80030cc:	68a3      	ldr	r3, [r4, #8]
 80030ce:	1b9b      	subs	r3, r3, r6
 80030d0:	60a3      	str	r3, [r4, #8]
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	4433      	add	r3, r6
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	2000      	movs	r0, #0
 80030da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030de:	462a      	mov	r2, r5
 80030e0:	f000 fad2 	bl	8003688 <_realloc_r>
 80030e4:	4606      	mov	r6, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d1e0      	bne.n	80030ac <__ssputs_r+0x5c>
 80030ea:	6921      	ldr	r1, [r4, #16]
 80030ec:	4650      	mov	r0, sl
 80030ee:	f7ff feb7 	bl	8002e60 <_free_r>
 80030f2:	230c      	movs	r3, #12
 80030f4:	f8ca 3000 	str.w	r3, [sl]
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030fe:	81a3      	strh	r3, [r4, #12]
 8003100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003104:	e7e9      	b.n	80030da <__ssputs_r+0x8a>
	...

08003108 <_svfiprintf_r>:
 8003108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310c:	4698      	mov	r8, r3
 800310e:	898b      	ldrh	r3, [r1, #12]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	b09d      	sub	sp, #116	@ 0x74
 8003114:	4607      	mov	r7, r0
 8003116:	460d      	mov	r5, r1
 8003118:	4614      	mov	r4, r2
 800311a:	d510      	bpl.n	800313e <_svfiprintf_r+0x36>
 800311c:	690b      	ldr	r3, [r1, #16]
 800311e:	b973      	cbnz	r3, 800313e <_svfiprintf_r+0x36>
 8003120:	2140      	movs	r1, #64	@ 0x40
 8003122:	f7ff ff09 	bl	8002f38 <_malloc_r>
 8003126:	6028      	str	r0, [r5, #0]
 8003128:	6128      	str	r0, [r5, #16]
 800312a:	b930      	cbnz	r0, 800313a <_svfiprintf_r+0x32>
 800312c:	230c      	movs	r3, #12
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003134:	b01d      	add	sp, #116	@ 0x74
 8003136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800313a:	2340      	movs	r3, #64	@ 0x40
 800313c:	616b      	str	r3, [r5, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	9309      	str	r3, [sp, #36]	@ 0x24
 8003142:	2320      	movs	r3, #32
 8003144:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003148:	f8cd 800c 	str.w	r8, [sp, #12]
 800314c:	2330      	movs	r3, #48	@ 0x30
 800314e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80032ec <_svfiprintf_r+0x1e4>
 8003152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003156:	f04f 0901 	mov.w	r9, #1
 800315a:	4623      	mov	r3, r4
 800315c:	469a      	mov	sl, r3
 800315e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003162:	b10a      	cbz	r2, 8003168 <_svfiprintf_r+0x60>
 8003164:	2a25      	cmp	r2, #37	@ 0x25
 8003166:	d1f9      	bne.n	800315c <_svfiprintf_r+0x54>
 8003168:	ebba 0b04 	subs.w	fp, sl, r4
 800316c:	d00b      	beq.n	8003186 <_svfiprintf_r+0x7e>
 800316e:	465b      	mov	r3, fp
 8003170:	4622      	mov	r2, r4
 8003172:	4629      	mov	r1, r5
 8003174:	4638      	mov	r0, r7
 8003176:	f7ff ff6b 	bl	8003050 <__ssputs_r>
 800317a:	3001      	adds	r0, #1
 800317c:	f000 80a7 	beq.w	80032ce <_svfiprintf_r+0x1c6>
 8003180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003182:	445a      	add	r2, fp
 8003184:	9209      	str	r2, [sp, #36]	@ 0x24
 8003186:	f89a 3000 	ldrb.w	r3, [sl]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 809f 	beq.w	80032ce <_svfiprintf_r+0x1c6>
 8003190:	2300      	movs	r3, #0
 8003192:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800319a:	f10a 0a01 	add.w	sl, sl, #1
 800319e:	9304      	str	r3, [sp, #16]
 80031a0:	9307      	str	r3, [sp, #28]
 80031a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80031a8:	4654      	mov	r4, sl
 80031aa:	2205      	movs	r2, #5
 80031ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b0:	484e      	ldr	r0, [pc, #312]	@ (80032ec <_svfiprintf_r+0x1e4>)
 80031b2:	f7fd f83d 	bl	8000230 <memchr>
 80031b6:	9a04      	ldr	r2, [sp, #16]
 80031b8:	b9d8      	cbnz	r0, 80031f2 <_svfiprintf_r+0xea>
 80031ba:	06d0      	lsls	r0, r2, #27
 80031bc:	bf44      	itt	mi
 80031be:	2320      	movmi	r3, #32
 80031c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031c4:	0711      	lsls	r1, r2, #28
 80031c6:	bf44      	itt	mi
 80031c8:	232b      	movmi	r3, #43	@ 0x2b
 80031ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ce:	f89a 3000 	ldrb.w	r3, [sl]
 80031d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031d4:	d015      	beq.n	8003202 <_svfiprintf_r+0xfa>
 80031d6:	9a07      	ldr	r2, [sp, #28]
 80031d8:	4654      	mov	r4, sl
 80031da:	2000      	movs	r0, #0
 80031dc:	f04f 0c0a 	mov.w	ip, #10
 80031e0:	4621      	mov	r1, r4
 80031e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031e6:	3b30      	subs	r3, #48	@ 0x30
 80031e8:	2b09      	cmp	r3, #9
 80031ea:	d94b      	bls.n	8003284 <_svfiprintf_r+0x17c>
 80031ec:	b1b0      	cbz	r0, 800321c <_svfiprintf_r+0x114>
 80031ee:	9207      	str	r2, [sp, #28]
 80031f0:	e014      	b.n	800321c <_svfiprintf_r+0x114>
 80031f2:	eba0 0308 	sub.w	r3, r0, r8
 80031f6:	fa09 f303 	lsl.w	r3, r9, r3
 80031fa:	4313      	orrs	r3, r2
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	46a2      	mov	sl, r4
 8003200:	e7d2      	b.n	80031a8 <_svfiprintf_r+0xa0>
 8003202:	9b03      	ldr	r3, [sp, #12]
 8003204:	1d19      	adds	r1, r3, #4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	9103      	str	r1, [sp, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfbb      	ittet	lt
 800320e:	425b      	neglt	r3, r3
 8003210:	f042 0202 	orrlt.w	r2, r2, #2
 8003214:	9307      	strge	r3, [sp, #28]
 8003216:	9307      	strlt	r3, [sp, #28]
 8003218:	bfb8      	it	lt
 800321a:	9204      	strlt	r2, [sp, #16]
 800321c:	7823      	ldrb	r3, [r4, #0]
 800321e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003220:	d10a      	bne.n	8003238 <_svfiprintf_r+0x130>
 8003222:	7863      	ldrb	r3, [r4, #1]
 8003224:	2b2a      	cmp	r3, #42	@ 0x2a
 8003226:	d132      	bne.n	800328e <_svfiprintf_r+0x186>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9203      	str	r2, [sp, #12]
 8003230:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003234:	3402      	adds	r4, #2
 8003236:	9305      	str	r3, [sp, #20]
 8003238:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80032fc <_svfiprintf_r+0x1f4>
 800323c:	7821      	ldrb	r1, [r4, #0]
 800323e:	2203      	movs	r2, #3
 8003240:	4650      	mov	r0, sl
 8003242:	f7fc fff5 	bl	8000230 <memchr>
 8003246:	b138      	cbz	r0, 8003258 <_svfiprintf_r+0x150>
 8003248:	9b04      	ldr	r3, [sp, #16]
 800324a:	eba0 000a 	sub.w	r0, r0, sl
 800324e:	2240      	movs	r2, #64	@ 0x40
 8003250:	4082      	lsls	r2, r0
 8003252:	4313      	orrs	r3, r2
 8003254:	3401      	adds	r4, #1
 8003256:	9304      	str	r3, [sp, #16]
 8003258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800325c:	4824      	ldr	r0, [pc, #144]	@ (80032f0 <_svfiprintf_r+0x1e8>)
 800325e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003262:	2206      	movs	r2, #6
 8003264:	f7fc ffe4 	bl	8000230 <memchr>
 8003268:	2800      	cmp	r0, #0
 800326a:	d036      	beq.n	80032da <_svfiprintf_r+0x1d2>
 800326c:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <_svfiprintf_r+0x1ec>)
 800326e:	bb1b      	cbnz	r3, 80032b8 <_svfiprintf_r+0x1b0>
 8003270:	9b03      	ldr	r3, [sp, #12]
 8003272:	3307      	adds	r3, #7
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	3308      	adds	r3, #8
 800327a:	9303      	str	r3, [sp, #12]
 800327c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800327e:	4433      	add	r3, r6
 8003280:	9309      	str	r3, [sp, #36]	@ 0x24
 8003282:	e76a      	b.n	800315a <_svfiprintf_r+0x52>
 8003284:	fb0c 3202 	mla	r2, ip, r2, r3
 8003288:	460c      	mov	r4, r1
 800328a:	2001      	movs	r0, #1
 800328c:	e7a8      	b.n	80031e0 <_svfiprintf_r+0xd8>
 800328e:	2300      	movs	r3, #0
 8003290:	3401      	adds	r4, #1
 8003292:	9305      	str	r3, [sp, #20]
 8003294:	4619      	mov	r1, r3
 8003296:	f04f 0c0a 	mov.w	ip, #10
 800329a:	4620      	mov	r0, r4
 800329c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a0:	3a30      	subs	r2, #48	@ 0x30
 80032a2:	2a09      	cmp	r2, #9
 80032a4:	d903      	bls.n	80032ae <_svfiprintf_r+0x1a6>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0c6      	beq.n	8003238 <_svfiprintf_r+0x130>
 80032aa:	9105      	str	r1, [sp, #20]
 80032ac:	e7c4      	b.n	8003238 <_svfiprintf_r+0x130>
 80032ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80032b2:	4604      	mov	r4, r0
 80032b4:	2301      	movs	r3, #1
 80032b6:	e7f0      	b.n	800329a <_svfiprintf_r+0x192>
 80032b8:	ab03      	add	r3, sp, #12
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	462a      	mov	r2, r5
 80032be:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <_svfiprintf_r+0x1f0>)
 80032c0:	a904      	add	r1, sp, #16
 80032c2:	4638      	mov	r0, r7
 80032c4:	f3af 8000 	nop.w
 80032c8:	1c42      	adds	r2, r0, #1
 80032ca:	4606      	mov	r6, r0
 80032cc:	d1d6      	bne.n	800327c <_svfiprintf_r+0x174>
 80032ce:	89ab      	ldrh	r3, [r5, #12]
 80032d0:	065b      	lsls	r3, r3, #25
 80032d2:	f53f af2d 	bmi.w	8003130 <_svfiprintf_r+0x28>
 80032d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032d8:	e72c      	b.n	8003134 <_svfiprintf_r+0x2c>
 80032da:	ab03      	add	r3, sp, #12
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462a      	mov	r2, r5
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <_svfiprintf_r+0x1f0>)
 80032e2:	a904      	add	r1, sp, #16
 80032e4:	4638      	mov	r0, r7
 80032e6:	f000 f879 	bl	80033dc <_printf_i>
 80032ea:	e7ed      	b.n	80032c8 <_svfiprintf_r+0x1c0>
 80032ec:	080037aa 	.word	0x080037aa
 80032f0:	080037b4 	.word	0x080037b4
 80032f4:	00000000 	.word	0x00000000
 80032f8:	08003051 	.word	0x08003051
 80032fc:	080037b0 	.word	0x080037b0

08003300 <_printf_common>:
 8003300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003304:	4616      	mov	r6, r2
 8003306:	4698      	mov	r8, r3
 8003308:	688a      	ldr	r2, [r1, #8]
 800330a:	690b      	ldr	r3, [r1, #16]
 800330c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003310:	4293      	cmp	r3, r2
 8003312:	bfb8      	it	lt
 8003314:	4613      	movlt	r3, r2
 8003316:	6033      	str	r3, [r6, #0]
 8003318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800331c:	4607      	mov	r7, r0
 800331e:	460c      	mov	r4, r1
 8003320:	b10a      	cbz	r2, 8003326 <_printf_common+0x26>
 8003322:	3301      	adds	r3, #1
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	0699      	lsls	r1, r3, #26
 800332a:	bf42      	ittt	mi
 800332c:	6833      	ldrmi	r3, [r6, #0]
 800332e:	3302      	addmi	r3, #2
 8003330:	6033      	strmi	r3, [r6, #0]
 8003332:	6825      	ldr	r5, [r4, #0]
 8003334:	f015 0506 	ands.w	r5, r5, #6
 8003338:	d106      	bne.n	8003348 <_printf_common+0x48>
 800333a:	f104 0a19 	add.w	sl, r4, #25
 800333e:	68e3      	ldr	r3, [r4, #12]
 8003340:	6832      	ldr	r2, [r6, #0]
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	42ab      	cmp	r3, r5
 8003346:	dc26      	bgt.n	8003396 <_printf_common+0x96>
 8003348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	3b00      	subs	r3, #0
 8003350:	bf18      	it	ne
 8003352:	2301      	movne	r3, #1
 8003354:	0692      	lsls	r2, r2, #26
 8003356:	d42b      	bmi.n	80033b0 <_printf_common+0xb0>
 8003358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800335c:	4641      	mov	r1, r8
 800335e:	4638      	mov	r0, r7
 8003360:	47c8      	blx	r9
 8003362:	3001      	adds	r0, #1
 8003364:	d01e      	beq.n	80033a4 <_printf_common+0xa4>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	6922      	ldr	r2, [r4, #16]
 800336a:	f003 0306 	and.w	r3, r3, #6
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf02      	ittt	eq
 8003372:	68e5      	ldreq	r5, [r4, #12]
 8003374:	6833      	ldreq	r3, [r6, #0]
 8003376:	1aed      	subeq	r5, r5, r3
 8003378:	68a3      	ldr	r3, [r4, #8]
 800337a:	bf0c      	ite	eq
 800337c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003380:	2500      	movne	r5, #0
 8003382:	4293      	cmp	r3, r2
 8003384:	bfc4      	itt	gt
 8003386:	1a9b      	subgt	r3, r3, r2
 8003388:	18ed      	addgt	r5, r5, r3
 800338a:	2600      	movs	r6, #0
 800338c:	341a      	adds	r4, #26
 800338e:	42b5      	cmp	r5, r6
 8003390:	d11a      	bne.n	80033c8 <_printf_common+0xc8>
 8003392:	2000      	movs	r0, #0
 8003394:	e008      	b.n	80033a8 <_printf_common+0xa8>
 8003396:	2301      	movs	r3, #1
 8003398:	4652      	mov	r2, sl
 800339a:	4641      	mov	r1, r8
 800339c:	4638      	mov	r0, r7
 800339e:	47c8      	blx	r9
 80033a0:	3001      	adds	r0, #1
 80033a2:	d103      	bne.n	80033ac <_printf_common+0xac>
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ac:	3501      	adds	r5, #1
 80033ae:	e7c6      	b.n	800333e <_printf_common+0x3e>
 80033b0:	18e1      	adds	r1, r4, r3
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	2030      	movs	r0, #48	@ 0x30
 80033b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033ba:	4422      	add	r2, r4
 80033bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033c4:	3302      	adds	r3, #2
 80033c6:	e7c7      	b.n	8003358 <_printf_common+0x58>
 80033c8:	2301      	movs	r3, #1
 80033ca:	4622      	mov	r2, r4
 80033cc:	4641      	mov	r1, r8
 80033ce:	4638      	mov	r0, r7
 80033d0:	47c8      	blx	r9
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0e6      	beq.n	80033a4 <_printf_common+0xa4>
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7d9      	b.n	800338e <_printf_common+0x8e>
	...

080033dc <_printf_i>:
 80033dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033e0:	7e0f      	ldrb	r7, [r1, #24]
 80033e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033e4:	2f78      	cmp	r7, #120	@ 0x78
 80033e6:	4691      	mov	r9, r2
 80033e8:	4680      	mov	r8, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	469a      	mov	sl, r3
 80033ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033f2:	d807      	bhi.n	8003404 <_printf_i+0x28>
 80033f4:	2f62      	cmp	r7, #98	@ 0x62
 80033f6:	d80a      	bhi.n	800340e <_printf_i+0x32>
 80033f8:	2f00      	cmp	r7, #0
 80033fa:	f000 80d1 	beq.w	80035a0 <_printf_i+0x1c4>
 80033fe:	2f58      	cmp	r7, #88	@ 0x58
 8003400:	f000 80b8 	beq.w	8003574 <_printf_i+0x198>
 8003404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800340c:	e03a      	b.n	8003484 <_printf_i+0xa8>
 800340e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003412:	2b15      	cmp	r3, #21
 8003414:	d8f6      	bhi.n	8003404 <_printf_i+0x28>
 8003416:	a101      	add	r1, pc, #4	@ (adr r1, 800341c <_printf_i+0x40>)
 8003418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800341c:	08003475 	.word	0x08003475
 8003420:	08003489 	.word	0x08003489
 8003424:	08003405 	.word	0x08003405
 8003428:	08003405 	.word	0x08003405
 800342c:	08003405 	.word	0x08003405
 8003430:	08003405 	.word	0x08003405
 8003434:	08003489 	.word	0x08003489
 8003438:	08003405 	.word	0x08003405
 800343c:	08003405 	.word	0x08003405
 8003440:	08003405 	.word	0x08003405
 8003444:	08003405 	.word	0x08003405
 8003448:	08003587 	.word	0x08003587
 800344c:	080034b3 	.word	0x080034b3
 8003450:	08003541 	.word	0x08003541
 8003454:	08003405 	.word	0x08003405
 8003458:	08003405 	.word	0x08003405
 800345c:	080035a9 	.word	0x080035a9
 8003460:	08003405 	.word	0x08003405
 8003464:	080034b3 	.word	0x080034b3
 8003468:	08003405 	.word	0x08003405
 800346c:	08003405 	.word	0x08003405
 8003470:	08003549 	.word	0x08003549
 8003474:	6833      	ldr	r3, [r6, #0]
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6032      	str	r2, [r6, #0]
 800347c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003484:	2301      	movs	r3, #1
 8003486:	e09c      	b.n	80035c2 <_printf_i+0x1e6>
 8003488:	6833      	ldr	r3, [r6, #0]
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	1d19      	adds	r1, r3, #4
 800348e:	6031      	str	r1, [r6, #0]
 8003490:	0606      	lsls	r6, r0, #24
 8003492:	d501      	bpl.n	8003498 <_printf_i+0xbc>
 8003494:	681d      	ldr	r5, [r3, #0]
 8003496:	e003      	b.n	80034a0 <_printf_i+0xc4>
 8003498:	0645      	lsls	r5, r0, #25
 800349a:	d5fb      	bpl.n	8003494 <_printf_i+0xb8>
 800349c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	da03      	bge.n	80034ac <_printf_i+0xd0>
 80034a4:	232d      	movs	r3, #45	@ 0x2d
 80034a6:	426d      	negs	r5, r5
 80034a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034ac:	4858      	ldr	r0, [pc, #352]	@ (8003610 <_printf_i+0x234>)
 80034ae:	230a      	movs	r3, #10
 80034b0:	e011      	b.n	80034d6 <_printf_i+0xfa>
 80034b2:	6821      	ldr	r1, [r4, #0]
 80034b4:	6833      	ldr	r3, [r6, #0]
 80034b6:	0608      	lsls	r0, r1, #24
 80034b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80034bc:	d402      	bmi.n	80034c4 <_printf_i+0xe8>
 80034be:	0649      	lsls	r1, r1, #25
 80034c0:	bf48      	it	mi
 80034c2:	b2ad      	uxthmi	r5, r5
 80034c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80034c6:	4852      	ldr	r0, [pc, #328]	@ (8003610 <_printf_i+0x234>)
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	bf14      	ite	ne
 80034cc:	230a      	movne	r3, #10
 80034ce:	2308      	moveq	r3, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034d6:	6866      	ldr	r6, [r4, #4]
 80034d8:	60a6      	str	r6, [r4, #8]
 80034da:	2e00      	cmp	r6, #0
 80034dc:	db05      	blt.n	80034ea <_printf_i+0x10e>
 80034de:	6821      	ldr	r1, [r4, #0]
 80034e0:	432e      	orrs	r6, r5
 80034e2:	f021 0104 	bic.w	r1, r1, #4
 80034e6:	6021      	str	r1, [r4, #0]
 80034e8:	d04b      	beq.n	8003582 <_printf_i+0x1a6>
 80034ea:	4616      	mov	r6, r2
 80034ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80034f0:	fb03 5711 	mls	r7, r3, r1, r5
 80034f4:	5dc7      	ldrb	r7, [r0, r7]
 80034f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034fa:	462f      	mov	r7, r5
 80034fc:	42bb      	cmp	r3, r7
 80034fe:	460d      	mov	r5, r1
 8003500:	d9f4      	bls.n	80034ec <_printf_i+0x110>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d10b      	bne.n	800351e <_printf_i+0x142>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	07df      	lsls	r7, r3, #31
 800350a:	d508      	bpl.n	800351e <_printf_i+0x142>
 800350c:	6923      	ldr	r3, [r4, #16]
 800350e:	6861      	ldr	r1, [r4, #4]
 8003510:	4299      	cmp	r1, r3
 8003512:	bfde      	ittt	le
 8003514:	2330      	movle	r3, #48	@ 0x30
 8003516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800351a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800351e:	1b92      	subs	r2, r2, r6
 8003520:	6122      	str	r2, [r4, #16]
 8003522:	f8cd a000 	str.w	sl, [sp]
 8003526:	464b      	mov	r3, r9
 8003528:	aa03      	add	r2, sp, #12
 800352a:	4621      	mov	r1, r4
 800352c:	4640      	mov	r0, r8
 800352e:	f7ff fee7 	bl	8003300 <_printf_common>
 8003532:	3001      	adds	r0, #1
 8003534:	d14a      	bne.n	80035cc <_printf_i+0x1f0>
 8003536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800353a:	b004      	add	sp, #16
 800353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	f043 0320 	orr.w	r3, r3, #32
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	4832      	ldr	r0, [pc, #200]	@ (8003614 <_printf_i+0x238>)
 800354a:	2778      	movs	r7, #120	@ 0x78
 800354c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	6831      	ldr	r1, [r6, #0]
 8003554:	061f      	lsls	r7, r3, #24
 8003556:	f851 5b04 	ldr.w	r5, [r1], #4
 800355a:	d402      	bmi.n	8003562 <_printf_i+0x186>
 800355c:	065f      	lsls	r7, r3, #25
 800355e:	bf48      	it	mi
 8003560:	b2ad      	uxthmi	r5, r5
 8003562:	6031      	str	r1, [r6, #0]
 8003564:	07d9      	lsls	r1, r3, #31
 8003566:	bf44      	itt	mi
 8003568:	f043 0320 	orrmi.w	r3, r3, #32
 800356c:	6023      	strmi	r3, [r4, #0]
 800356e:	b11d      	cbz	r5, 8003578 <_printf_i+0x19c>
 8003570:	2310      	movs	r3, #16
 8003572:	e7ad      	b.n	80034d0 <_printf_i+0xf4>
 8003574:	4826      	ldr	r0, [pc, #152]	@ (8003610 <_printf_i+0x234>)
 8003576:	e7e9      	b.n	800354c <_printf_i+0x170>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	f023 0320 	bic.w	r3, r3, #32
 800357e:	6023      	str	r3, [r4, #0]
 8003580:	e7f6      	b.n	8003570 <_printf_i+0x194>
 8003582:	4616      	mov	r6, r2
 8003584:	e7bd      	b.n	8003502 <_printf_i+0x126>
 8003586:	6833      	ldr	r3, [r6, #0]
 8003588:	6825      	ldr	r5, [r4, #0]
 800358a:	6961      	ldr	r1, [r4, #20]
 800358c:	1d18      	adds	r0, r3, #4
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	062e      	lsls	r6, r5, #24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	d501      	bpl.n	800359a <_printf_i+0x1be>
 8003596:	6019      	str	r1, [r3, #0]
 8003598:	e002      	b.n	80035a0 <_printf_i+0x1c4>
 800359a:	0668      	lsls	r0, r5, #25
 800359c:	d5fb      	bpl.n	8003596 <_printf_i+0x1ba>
 800359e:	8019      	strh	r1, [r3, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	6123      	str	r3, [r4, #16]
 80035a4:	4616      	mov	r6, r2
 80035a6:	e7bc      	b.n	8003522 <_printf_i+0x146>
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	1d1a      	adds	r2, r3, #4
 80035ac:	6032      	str	r2, [r6, #0]
 80035ae:	681e      	ldr	r6, [r3, #0]
 80035b0:	6862      	ldr	r2, [r4, #4]
 80035b2:	2100      	movs	r1, #0
 80035b4:	4630      	mov	r0, r6
 80035b6:	f7fc fe3b 	bl	8000230 <memchr>
 80035ba:	b108      	cbz	r0, 80035c0 <_printf_i+0x1e4>
 80035bc:	1b80      	subs	r0, r0, r6
 80035be:	6060      	str	r0, [r4, #4]
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	6123      	str	r3, [r4, #16]
 80035c4:	2300      	movs	r3, #0
 80035c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ca:	e7aa      	b.n	8003522 <_printf_i+0x146>
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	4632      	mov	r2, r6
 80035d0:	4649      	mov	r1, r9
 80035d2:	4640      	mov	r0, r8
 80035d4:	47d0      	blx	sl
 80035d6:	3001      	adds	r0, #1
 80035d8:	d0ad      	beq.n	8003536 <_printf_i+0x15a>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	079b      	lsls	r3, r3, #30
 80035de:	d413      	bmi.n	8003608 <_printf_i+0x22c>
 80035e0:	68e0      	ldr	r0, [r4, #12]
 80035e2:	9b03      	ldr	r3, [sp, #12]
 80035e4:	4298      	cmp	r0, r3
 80035e6:	bfb8      	it	lt
 80035e8:	4618      	movlt	r0, r3
 80035ea:	e7a6      	b.n	800353a <_printf_i+0x15e>
 80035ec:	2301      	movs	r3, #1
 80035ee:	4632      	mov	r2, r6
 80035f0:	4649      	mov	r1, r9
 80035f2:	4640      	mov	r0, r8
 80035f4:	47d0      	blx	sl
 80035f6:	3001      	adds	r0, #1
 80035f8:	d09d      	beq.n	8003536 <_printf_i+0x15a>
 80035fa:	3501      	adds	r5, #1
 80035fc:	68e3      	ldr	r3, [r4, #12]
 80035fe:	9903      	ldr	r1, [sp, #12]
 8003600:	1a5b      	subs	r3, r3, r1
 8003602:	42ab      	cmp	r3, r5
 8003604:	dcf2      	bgt.n	80035ec <_printf_i+0x210>
 8003606:	e7eb      	b.n	80035e0 <_printf_i+0x204>
 8003608:	2500      	movs	r5, #0
 800360a:	f104 0619 	add.w	r6, r4, #25
 800360e:	e7f5      	b.n	80035fc <_printf_i+0x220>
 8003610:	080037bb 	.word	0x080037bb
 8003614:	080037cc 	.word	0x080037cc

08003618 <memmove>:
 8003618:	4288      	cmp	r0, r1
 800361a:	b510      	push	{r4, lr}
 800361c:	eb01 0402 	add.w	r4, r1, r2
 8003620:	d902      	bls.n	8003628 <memmove+0x10>
 8003622:	4284      	cmp	r4, r0
 8003624:	4623      	mov	r3, r4
 8003626:	d807      	bhi.n	8003638 <memmove+0x20>
 8003628:	1e43      	subs	r3, r0, #1
 800362a:	42a1      	cmp	r1, r4
 800362c:	d008      	beq.n	8003640 <memmove+0x28>
 800362e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003636:	e7f8      	b.n	800362a <memmove+0x12>
 8003638:	4402      	add	r2, r0
 800363a:	4601      	mov	r1, r0
 800363c:	428a      	cmp	r2, r1
 800363e:	d100      	bne.n	8003642 <memmove+0x2a>
 8003640:	bd10      	pop	{r4, pc}
 8003642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800364a:	e7f7      	b.n	800363c <memmove+0x24>

0800364c <_sbrk_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4d06      	ldr	r5, [pc, #24]	@ (8003668 <_sbrk_r+0x1c>)
 8003650:	2300      	movs	r3, #0
 8003652:	4604      	mov	r4, r0
 8003654:	4608      	mov	r0, r1
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	f7fd f98c 	bl	8000974 <_sbrk>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_sbrk_r+0x1a>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_sbrk_r+0x1a>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	2000034c 	.word	0x2000034c

0800366c <memcpy>:
 800366c:	440a      	add	r2, r1
 800366e:	4291      	cmp	r1, r2
 8003670:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003674:	d100      	bne.n	8003678 <memcpy+0xc>
 8003676:	4770      	bx	lr
 8003678:	b510      	push	{r4, lr}
 800367a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800367e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003682:	4291      	cmp	r1, r2
 8003684:	d1f9      	bne.n	800367a <memcpy+0xe>
 8003686:	bd10      	pop	{r4, pc}

08003688 <_realloc_r>:
 8003688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800368c:	4607      	mov	r7, r0
 800368e:	4614      	mov	r4, r2
 8003690:	460d      	mov	r5, r1
 8003692:	b921      	cbnz	r1, 800369e <_realloc_r+0x16>
 8003694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003698:	4611      	mov	r1, r2
 800369a:	f7ff bc4d 	b.w	8002f38 <_malloc_r>
 800369e:	b92a      	cbnz	r2, 80036ac <_realloc_r+0x24>
 80036a0:	f7ff fbde 	bl	8002e60 <_free_r>
 80036a4:	4625      	mov	r5, r4
 80036a6:	4628      	mov	r0, r5
 80036a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ac:	f000 f81a 	bl	80036e4 <_malloc_usable_size_r>
 80036b0:	4284      	cmp	r4, r0
 80036b2:	4606      	mov	r6, r0
 80036b4:	d802      	bhi.n	80036bc <_realloc_r+0x34>
 80036b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036ba:	d8f4      	bhi.n	80036a6 <_realloc_r+0x1e>
 80036bc:	4621      	mov	r1, r4
 80036be:	4638      	mov	r0, r7
 80036c0:	f7ff fc3a 	bl	8002f38 <_malloc_r>
 80036c4:	4680      	mov	r8, r0
 80036c6:	b908      	cbnz	r0, 80036cc <_realloc_r+0x44>
 80036c8:	4645      	mov	r5, r8
 80036ca:	e7ec      	b.n	80036a6 <_realloc_r+0x1e>
 80036cc:	42b4      	cmp	r4, r6
 80036ce:	4622      	mov	r2, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	bf28      	it	cs
 80036d4:	4632      	movcs	r2, r6
 80036d6:	f7ff ffc9 	bl	800366c <memcpy>
 80036da:	4629      	mov	r1, r5
 80036dc:	4638      	mov	r0, r7
 80036de:	f7ff fbbf 	bl	8002e60 <_free_r>
 80036e2:	e7f1      	b.n	80036c8 <_realloc_r+0x40>

080036e4 <_malloc_usable_size_r>:
 80036e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e8:	1f18      	subs	r0, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bfbc      	itt	lt
 80036ee:	580b      	ldrlt	r3, [r1, r0]
 80036f0:	18c0      	addlt	r0, r0, r3
 80036f2:	4770      	bx	lr

080036f4 <_init>:
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f6:	bf00      	nop
 80036f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fa:	bc08      	pop	{r3}
 80036fc:	469e      	mov	lr, r3
 80036fe:	4770      	bx	lr

08003700 <_fini>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr
