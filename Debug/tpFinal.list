
tpFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004988  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d14  08004d14  00006098  2**0
                  CONTENTS
  4 .ARM          00000008  08004d14  08004d14  00005d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d1c  08004d1c  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00005d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08004d24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000098  08004dbc  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08004dbc  00006310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c921  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252a  00000000  00000000  000129e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00014f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000909  00000000  00000000  00015af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fda  00000000  00000000  000163f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109aa  00000000  00000000  000383d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb65e  00000000  00000000  00048d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001143db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  00114420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001177f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b40 	.word	0x08004b40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08004b40 	.word	0x08004b40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80005e2:	f001 f8a7 	bl	8001734 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f823 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8e7 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f8bb 	bl	8000768 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f88b 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize */
  if (!Init_FSM()) Error_Handler();
 80005f6:	f000 faaf 	bl	8000b58 <Init_FSM>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f083 0301 	eor.w	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <main+0x2e>
 8000606:	f000 f947 	bl	8000898 <Error_Handler>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bool status = UpdateFSM();
 800060a:	f000 fae3 	bl	8000bd4 <UpdateFSM>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	  if (!status) {
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f5      	beq.n	800060a <main+0x2e>
		  uartSendString(ERROR_STAGE_LCD);
 800061e:	4b03      	ldr	r3, [pc, #12]	@ (800062c <main+0x50>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f80e 	bl	8001644 <uartSendString>
    {
 8000628:	e7ef      	b.n	800060a <main+0x2e>
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	@ 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fe00 	bl	8004244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <SystemClock_Config+0xd4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a29      	ldr	r2, [pc, #164]	@ (8000704 <SystemClock_Config+0xd4>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <SystemClock_Config+0xd8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a22      	ldr	r2, [pc, #136]	@ (8000708 <SystemClock_Config+0xd8>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 febe 	bl	8003440 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ca:	f000 f8e5 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fb5e 	bl	8002dac <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006f6:	f000 f8cf 	bl	8000898 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	@ 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 fb35 	bl	8001db8 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f8a0 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000b4 	.word	0x200000b4
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f003 f8ec 	bl	800397c <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f875 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000108 	.word	0x20000108
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f001 fa9c 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_GPIO_Init+0xd8>)
 8000864:	f001 f8e2 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000880:	f001 f8d4 	bl	8001a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f001 f86e 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <HAL_I2C_MspInit+0x84>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12c      	bne.n	8000970 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000932:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000944:	2304      	movs	r3, #4
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <HAL_I2C_MspInit+0x8c>)
 8000950:	f001 f86c 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a07      	ldr	r2, [pc, #28]	@ (800097c <HAL_I2C_MspInit+0x88>)
 800095e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_I2C_MspInit+0x88>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40005400 	.word	0x40005400
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400

08000984 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	@ (8000a08 <HAL_UART_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_UART_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009de:	230c      	movs	r3, #12
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ee:	2307      	movs	r3, #7
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_UART_MspInit+0x8c>)
 80009fa:	f001 f817 	bl	8001a2c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <NMI_Handler+0x4>

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6a:	f000 feb5 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f003 fbd6 	bl	8004254 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20020000 	.word	0x20020000
 8000ad4:	00000400 	.word	0x00000400
 8000ad8:	20000150 	.word	0x20000150
 8000adc:	20000310 	.word	0x20000310

08000ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	@ (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	@ (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff ffd7 	bl	8000ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fb95 	bl	8004260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd51 	bl	80005dc <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000b48:	08004d24 	.word	0x08004d24
  ldr r2, =_sbss
 8000b4c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000b50:	20000310 	.word	0x20000310

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <Init_FSM>:
static tick_t WAITING_TIME = 2000;

static uint16_t readValue = 0;
static uint8_t asciiValueRead[4] = { 0 };

bool Init_FSM() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
	actualFunction = idleStage;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <Init_FSM+0x64>)
 8000b60:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <Init_FSM+0x68>)
 8000b62:	601a      	str	r2, [r3, #0]
	debounceFSM_init();
 8000b64:	f000 fbde 	bl	8001324 <debounceFSM_init>
	bool uartInitialized = uartInit();
 8000b68:	f000 fcfc 	bl	8001564 <uartInit>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
	bool initialized = InitLCD();
 8000b70:	f000 fa5c 	bl	800102c <InitLCD>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71bb      	strb	r3, [r7, #6]
	if (initialized) {
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d011      	beq.n	8000ba2 <Init_FSM+0x4a>
		WriteString(ROW_ONE_WELCOME);
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <Init_FSM+0x6c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f9a4 	bl	8000ed0 <WriteString>
		GoToNextRow();
 8000b88:	f000 f9b0 	bl	8000eec <GoToNextRow>
		WriteString(ROW_TWO_WELCOME);
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <Init_FSM+0x70>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f99d 	bl	8000ed0 <WriteString>
		uartSendString(UART_WELCOME);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <Init_FSM+0x74>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fd52 	bl	8001644 <uartSendString>
 8000ba0:	e007      	b.n	8000bb2 <Init_FSM+0x5a>
	} else if (uartInitialized) uartSendString(ERROR_INIT_UART);
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <Init_FSM+0x5a>
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <Init_FSM+0x78>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fd49 	bl	8001644 <uartSendString>
	return initialized;
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000154 	.word	0x20000154
 8000bc0:	08000be9 	.word	0x08000be9
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000010 	.word	0x20000010
 8000bd0:	20000028 	.word	0x20000028

08000bd4 <UpdateFSM>:

bool UpdateFSM() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	return actualFunction();
 8000bd8:	4b02      	ldr	r3, [pc, #8]	@ (8000be4 <UpdateFSM+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4798      	blx	r3
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000154 	.word	0x20000154

08000be8 <idleStage>:

bool idleStage() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	debounceFSM_update();
 8000bec:	f000 fbae 	bl	800134c <debounceFSM_update>
	if (readKey()) {
 8000bf0:	f000 fbca 	bl	8001388 <readKey>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <idleStage+0x18>
		actualFunction = sendingStage;
 8000bfa:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <idleStage+0x20>)
 8000bfc:	4a03      	ldr	r2, [pc, #12]	@ (8000c0c <idleStage+0x24>)
 8000bfe:	601a      	str	r2, [r3, #0]
	}
	return true;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000154 	.word	0x20000154
 8000c0c:	08000c11 	.word	0x08000c11

08000c10 <sendingStage>:

bool sendingStage() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	bool status = WriteSensor();
 8000c16:	f000 fc61 	bl	80014dc <WriteSensor>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	delayInit(&waitingTimeDelay, WAITING_TIME);
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <sendingStage+0x6c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4816      	ldr	r0, [pc, #88]	@ (8000c80 <sendingStage+0x70>)
 8000c26:	f000 fc06 	bl	8001436 <delayInit>
	status = status && ClearScreen() && WriteString(CALCULATING_DISTANCE);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00e      	beq.n	8000c4e <sendingStage+0x3e>
 8000c30:	f000 f9c8 	bl	8000fc4 <ClearScreen>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d009      	beq.n	8000c4e <sendingStage+0x3e>
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <sendingStage+0x74>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f946 	bl	8000ed0 <WriteString>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <sendingStage+0x3e>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <sendingStage+0x40>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	71fb      	strb	r3, [r7, #7]
	if (status) uartSendString(UART_CALCULATING_DISTANCE);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <sendingStage+0x5a>
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <sendingStage+0x78>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fced 	bl	8001644 <uartSendString>
	actualFunction = waitingStage;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <sendingStage+0x7c>)
 8000c6c:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <sendingStage+0x80>)
 8000c6e:	601a      	str	r2, [r3, #0]
	return status;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000002c 	.word	0x2000002c
 8000c80:	20000158 	.word	0x20000158
 8000c84:	20000020 	.word	0x20000020
 8000c88:	20000024 	.word	0x20000024
 8000c8c:	20000154 	.word	0x20000154
 8000c90:	08000c95 	.word	0x08000c95

08000c94 <waitingStage>:

bool waitingStage() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	if (delayRead(&waitingTimeDelay)) {
 8000c98:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <waitingStage+0x1c>)
 8000c9a:	f000 fb94 	bl	80013c6 <delayRead>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <waitingStage+0x16>
		actualFunction = readingStage;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <waitingStage+0x20>)
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <waitingStage+0x24>)
 8000ca8:	601a      	str	r2, [r3, #0]
	}
	return true;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000158 	.word	0x20000158
 8000cb4:	20000154 	.word	0x20000154
 8000cb8:	08000cbd 	.word	0x08000cbd

08000cbc <readingStage>:

bool readingStage() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	bool status = ReadSensor(&readValue);
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <readingStage+0x5c>)
 8000cc4:	f000 fbe4 	bl	8001490 <ReadSensor>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
	status = status && NumberToAscii(readValue, asciiValueRead);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <readingStage+0x2c>
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <readingStage+0x5c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	4911      	ldr	r1, [pc, #68]	@ (8000d1c <readingStage+0x60>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 fd13 	bl	8001704 <NumberToAscii>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <readingStage+0x2c>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <readingStage+0x2e>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	71fb      	strb	r3, [r7, #7]
	if (!status) {
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f083 0301 	eor.w	r3, r3, #1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <readingStage+0x4c>
		actualFunction = sendingStage; // Error in medition, fall back
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <readingStage+0x64>)
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <readingStage+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <readingStage+0x52>
	} else {
		actualFunction = writingStage;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <readingStage+0x64>)
 8000d0a:	4a07      	ldr	r2, [pc, #28]	@ (8000d28 <readingStage+0x6c>)
 8000d0c:	601a      	str	r2, [r3, #0]
	}
	return status;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000164 	.word	0x20000164
 8000d1c:	20000168 	.word	0x20000168
 8000d20:	20000154 	.word	0x20000154
 8000d24:	08000c11 	.word	0x08000c11
 8000d28:	08000d2d 	.word	0x08000d2d

08000d2c <writingStage>:

bool writingStage() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	bool status = ClearScreen();
 8000d32:	f000 f947 	bl	8000fc4 <ClearScreen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	status = status && WriteString(READ_DISTANCE);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d009      	beq.n	8000d54 <writingStage+0x28>
 8000d40:	4b30      	ldr	r3, [pc, #192]	@ (8000e04 <writingStage+0xd8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f8c3 	bl	8000ed0 <WriteString>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <writingStage+0x28>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <writingStage+0x2a>
 8000d54:	2300      	movs	r3, #0
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
	status = status && GoToNextRow();
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <writingStage+0x48>
 8000d66:	f000 f8c1 	bl	8000eec <GoToNextRow>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <writingStage+0x48>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <writingStage+0x4a>
 8000d74:	2300      	movs	r3, #0
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
	status = status && WriteString(asciiValueRead) && WriteString(DISTANCE_UNIT);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00f      	beq.n	8000da6 <writingStage+0x7a>
 8000d86:	4820      	ldr	r0, [pc, #128]	@ (8000e08 <writingStage+0xdc>)
 8000d88:	f000 f8a2 	bl	8000ed0 <WriteString>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d009      	beq.n	8000da6 <writingStage+0x7a>
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <writingStage+0xe0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f89a 	bl	8000ed0 <WriteString>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <writingStage+0x7a>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <writingStage+0x7c>
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	71fb      	strb	r3, [r7, #7]
	if (status) {
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <writingStage+0xce>
		status = uartSendString(UART_READ_DISTANCE) && uartSendString(asciiValueRead) && uartSendString(DISTANCE_UNIT);
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <writingStage+0xe4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fc41 	bl	8001644 <uartSendString>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00f      	beq.n	8000de8 <writingStage+0xbc>
 8000dc8:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <writingStage+0xdc>)
 8000dca:	f000 fc3b 	bl	8001644 <uartSendString>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <writingStage+0xbc>
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <writingStage+0xe0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fc33 	bl	8001644 <uartSendString>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <writingStage+0xbc>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <writingStage+0xbe>
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	71fb      	strb	r3, [r7, #7]
		actualFunction = idleStage;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <writingStage+0xe8>)
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <writingStage+0xec>)
 8000df8:	601a      	str	r2, [r3, #0]
	}
	return status;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000014 	.word	0x20000014
 8000e08:	20000168 	.word	0x20000168
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	2000001c 	.word	0x2000001c
 8000e14:	20000154 	.word	0x20000154
 8000e18:	08000be9 	.word	0x08000be9

08000e1c <TransmitToSize>:
extern I2C_HandleTypeDef hi2c1;
static const uint32_t TIMEOUT = 500;
bool Transmit(uint16_t unshiftedAddress, uint8_t* value) {
	return HAL_I2C_Master_Transmit (&hi2c1, unshiftedAddress<<1, value, sizeof(value), TIMEOUT) == HAL_OK;
}
bool TransmitToSize(uint16_t unshiftedAddress, uint8_t* value, uint16_t size) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit (&hi2c1, unshiftedAddress<<1, value, size, TIMEOUT) == HAL_OK;
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	b299      	uxth	r1, r3
 8000e32:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e36:	88bb      	ldrh	r3, [r7, #4]
 8000e38:	9200      	str	r2, [sp, #0]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <TransmitToSize+0x3c>)
 8000e3e:	f001 f8ff 	bl	8002040 <HAL_I2C_Master_Transmit>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bf0c      	ite	eq
 8000e48:	2301      	moveq	r3, #1
 8000e4a:	2300      	movne	r3, #0
 8000e4c:	b2db      	uxtb	r3, r3
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000b4 	.word	0x200000b4

08000e5c <ReceiveToSize>:
bool ReceiveToSize(uint16_t unshiftedAddress, uint8_t* value, uint16_t size) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	80fb      	strh	r3, [r7, #6]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive (&hi2c1, unshiftedAddress<<1, value, size, TIMEOUT) == HAL_OK;
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	b299      	uxth	r1, r3
 8000e72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	9200      	str	r2, [sp, #0]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <ReceiveToSize+0x3c>)
 8000e7e:	f001 f9dd 	bl	800223c <HAL_I2C_Master_Receive>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2db      	uxtb	r3, r3
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200000b4 	.word	0x200000b4

08000e9c <goToAddress>:
};

static uint8_t initCommandsSize = sizeof(INIT_COMMANDS) / sizeof(INIT_COMMANDS[0]);
static uint8_t clearCommandsSize = sizeof(CLEAR_COMMANDS) / sizeof(CLEAR_COMMANDS[0]);

static bool goToAddress(uint8_t address) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
	sentAddress = MAX_ADDRESS | address;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <goToAddress+0x2c>)
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <goToAddress+0x30>)
 8000eb2:	701a      	strb	r2, [r3, #0]

	return WriteLCD(&sentAddress, true);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <goToAddress+0x30>)
 8000eb8:	f000 f973 	bl	80011a2 <WriteLCD>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000033 	.word	0x20000033
 8000ecc:	2000016d 	.word	0x2000016d

08000ed0 <WriteString>:
bool WriteString(uint8_t* str) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	return WriteLCD(str, false);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f961 	bl	80011a2 <WriteLCD>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <GoToNextRow>:
bool GoToNextRow() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	nextAddress = (nextAddress + ROW_SIZE) % MAX_ADDRESS;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <GoToNextRow+0x34>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <GoToNextRow+0x38>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <GoToNextRow+0x3c>)
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f04:	fb01 f202 	mul.w	r2, r1, r2
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <GoToNextRow+0x34>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	return goToAddress(nextAddress);
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <GoToNextRow+0x34>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffc1 	bl	8000e9c <goToAddress>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000016c 	.word	0x2000016c
 8000f24:	20000032 	.word	0x20000032
 8000f28:	20000033 	.word	0x20000033

08000f2c <set4Bit>:


static bool set4Bit() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	HAL_Delay(50); // Initial power-on delay
 8000f30:	2032      	movs	r0, #50	@ 0x32
 8000f32:	f000 fc71 	bl	8001818 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <set4Bit+0x90>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f912 	bl	8001164 <sendInitNibble>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <set4Bit+0x24>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e033      	b.n	8000fb8 <set4Bit+0x8c>
	HAL_Delay(5);
 8000f50:	2005      	movs	r0, #5
 8000f52:	f000 fc61 	bl	8001818 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <set4Bit+0x90>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f902 	bl	8001164 <sendInitNibble>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f083 0301 	eor.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <set4Bit+0x44>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e023      	b.n	8000fb8 <set4Bit+0x8c>
	HAL_Delay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 fc51 	bl	8001818 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <set4Bit+0x90>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f8f2 	bl	8001164 <sendInitNibble>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <set4Bit+0x64>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e013      	b.n	8000fb8 <set4Bit+0x8c>
	HAL_Delay(1);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 fc41 	bl	8001818 <HAL_Delay>

	if (!sendInitNibble(SECOND_COMMAND)) return false;  // Switch to 4-bit
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <set4Bit+0x94>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8e2 	bl	8001164 <sendInitNibble>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <set4Bit+0x84>
 8000fac:	2300      	movs	r3, #0
 8000fae:	e003      	b.n	8000fb8 <set4Bit+0x8c>
	HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fc31 	bl	8001818 <HAL_Delay>

	return true;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000034 	.word	0x20000034
 8000fc0:	20000035 	.word	0x20000035

08000fc4 <ClearScreen>:

bool ClearScreen() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	nextAddress = 0x00;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <ClearScreen+0x5c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < clearCommandsSize; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	e016      	b.n	8001004 <ClearScreen+0x40>
		bool status = WriteLCD(&CLEAR_COMMANDS[i], true);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <ClearScreen+0x60>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f8df 	bl	80011a2 <WriteLCD>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71bb      	strb	r3, [r7, #6]
		if (!status) {
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <ClearScreen+0x34>
			return status;
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	e00e      	b.n	8001016 <ClearScreen+0x52>
		}
		HAL_Delay(2);
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f000 fc0d 	bl	8001818 <HAL_Delay>
	for (uint8_t i = 0; i < clearCommandsSize; i++) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3301      	adds	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <ClearScreen+0x64>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3e3      	bcc.n	8000fd6 <ClearScreen+0x12>
	}
	return goToAddress(0x00);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff ff44 	bl	8000e9c <goToAddress>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000016c 	.word	0x2000016c
 8001024:	20000030 	.word	0x20000030
 8001028:	2000003c 	.word	0x2000003c

0800102c <InitLCD>:


bool InitLCD() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	if (!set4Bit()) return false;
 8001032:	f7ff ff7b 	bl	8000f2c <set4Bit>
 8001036:	4603      	mov	r3, r0
 8001038:	f083 0301 	eor.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <InitLCD+0x1a>
 8001042:	2300      	movs	r3, #0
 8001044:	e01f      	b.n	8001086 <InitLCD+0x5a>

	for (uint8_t i = 0; i < initCommandsSize; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	e014      	b.n	8001076 <InitLCD+0x4a>
		if (!WriteLCD(&INIT_COMMANDS[i], true)) return false;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <InitLCD+0x64>)
 8001050:	4413      	add	r3, r2
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8a4 	bl	80011a2 <WriteLCD>
 800105a:	4603      	mov	r3, r0
 800105c:	f083 0301 	eor.w	r3, r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <InitLCD+0x3e>
 8001066:	2300      	movs	r3, #0
 8001068:	e00d      	b.n	8001086 <InitLCD+0x5a>
		HAL_Delay(2);
 800106a:	2002      	movs	r0, #2
 800106c:	f000 fbd4 	bl	8001818 <HAL_Delay>
	for (uint8_t i = 0; i < initCommandsSize; i++) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	3301      	adds	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <InitLCD+0x68>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3e5      	bcc.n	800104c <InitLCD+0x20>
	}

	return ClearScreen();
 8001080:	f7ff ffa0 	bl	8000fc4 <ClearScreen>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000038 	.word	0x20000038
 8001094:	2000003b 	.word	0x2000003b

08001098 <translateIntoLcd>:
#define LCD_RW         0x00
#define LCD_RS         0x01

static const uint8_t MAX_LCD_CHARS = 16;  // More than this will fill the row
static const uint8_t MAX_LCD_BYTES = (MAX_LCD_CHARS * 4);
static void translateIntoLcd(uint8_t* value, uint16_t* size, uint8_t* lcdBuffer, bool command) {
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	70fb      	strb	r3, [r7, #3]
	uint16_t outIndex = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	82fb      	strh	r3, [r7, #22]
	uint8_t rsFlag = command ? 0x00 : LCD_RS;
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f083 0301 	eor.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	74fb      	strb	r3, [r7, #19]

	for (uint16_t i = 0; i < *size; i++) {
 80010b4:	2300      	movs	r3, #0
 80010b6:	82bb      	strh	r3, [r7, #20]
 80010b8:	e046      	b.n	8001148 <translateIntoLcd+0xb0>
		uint8_t ch = value[i];
 80010ba:	8abb      	ldrh	r3, [r7, #20]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	74bb      	strb	r3, [r7, #18]

		uint8_t highNibble = ch & 0xF0;
 80010c4:	7cbb      	ldrb	r3, [r7, #18]
 80010c6:	f023 030f 	bic.w	r3, r3, #15
 80010ca:	747b      	strb	r3, [r7, #17]
		uint8_t lowNibble  = (ch << 4) & 0xF0;
 80010cc:	7cbb      	ldrb	r3, [r7, #18]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	743b      	strb	r3, [r7, #16]

		// Send high nibble
		lcdBuffer[outIndex++] = highNibble | LCD_BACKLIGHT | rsFlag | LCD_ENABLE;
 80010d2:	7c7a      	ldrb	r2, [r7, #17]
 80010d4:	7cfb      	ldrb	r3, [r7, #19]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	8afb      	ldrh	r3, [r7, #22]
 80010dc:	1c59      	adds	r1, r3, #1
 80010de:	82f9      	strh	r1, [r7, #22]
 80010e0:	4619      	mov	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	440b      	add	r3, r1
 80010e6:	f042 020c 	orr.w	r2, r2, #12
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
		lcdBuffer[outIndex++] = highNibble | LCD_BACKLIGHT | rsFlag;
 80010ee:	7c7a      	ldrb	r2, [r7, #17]
 80010f0:	7cfb      	ldrb	r3, [r7, #19]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	8afb      	ldrh	r3, [r7, #22]
 80010f8:	1c59      	adds	r1, r3, #1
 80010fa:	82f9      	strh	r1, [r7, #22]
 80010fc:	4619      	mov	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	440b      	add	r3, r1
 8001102:	f042 0208 	orr.w	r2, r2, #8
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]

		// Send low nibble
		lcdBuffer[outIndex++] = lowNibble | LCD_BACKLIGHT | rsFlag | LCD_ENABLE;
 800110a:	7c3a      	ldrb	r2, [r7, #16]
 800110c:	7cfb      	ldrb	r3, [r7, #19]
 800110e:	4313      	orrs	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	1c59      	adds	r1, r3, #1
 8001116:	82f9      	strh	r1, [r7, #22]
 8001118:	4619      	mov	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	440b      	add	r3, r1
 800111e:	f042 020c 	orr.w	r2, r2, #12
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	701a      	strb	r2, [r3, #0]
		lcdBuffer[outIndex++] = lowNibble | LCD_BACKLIGHT | rsFlag;
 8001126:	7c3a      	ldrb	r2, [r7, #16]
 8001128:	7cfb      	ldrb	r3, [r7, #19]
 800112a:	4313      	orrs	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	8afb      	ldrh	r3, [r7, #22]
 8001130:	1c59      	adds	r1, r3, #1
 8001132:	82f9      	strh	r1, [r7, #22]
 8001134:	4619      	mov	r1, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	440b      	add	r3, r1
 800113a:	f042 0208 	orr.w	r2, r2, #8
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < *size; i++) {
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	82bb      	strh	r3, [r7, #20]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	8aba      	ldrh	r2, [r7, #20]
 800114e:	429a      	cmp	r2, r3
 8001150:	d3b3      	bcc.n	80010ba <translateIntoLcd+0x22>
	}
	*size = outIndex;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	8afa      	ldrh	r2, [r7, #22]
 8001156:	801a      	strh	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <sendInitNibble>:

bool sendInitNibble(uint8_t nibble) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble = nibble & 0xF0;  // Extract upper 4 bits
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f023 030f 	bic.w	r3, r3, #15
 8001174:	73fb      	strb	r3, [r7, #15]

	uint8_t data[2];
	data[0] = highNibble | LCD_BACKLIGHT | LCD_ENABLE;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 030c 	orr.w	r3, r3, #12
 800117c:	b2db      	uxtb	r3, r3
 800117e:	733b      	strb	r3, [r7, #12]
	data[1] = highNibble | LCD_BACKLIGHT;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	b2db      	uxtb	r3, r3
 8001188:	737b      	strb	r3, [r7, #13]

	return TransmitToSize(ADDRESS, data, 2);
 800118a:	2027      	movs	r0, #39	@ 0x27
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2202      	movs	r2, #2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fe42 	bl	8000e1c <TransmitToSize>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <WriteLCD>:

bool WriteLCD(uint8_t* value, bool command) {
 80011a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a6:	b087      	sub	sp, #28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
 80011b0:	466b      	mov	r3, sp
 80011b2:	461e      	mov	r6, r3
    uint16_t size = command ? 1 : findCharIndex(value, '\0');
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <WriteLCD+0x24>
 80011ba:	2100      	movs	r1, #0
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fa7d 	bl	80016bc <findCharIndex>
 80011c2:	4603      	mov	r3, r0
 80011c4:	e000      	b.n	80011c8 <WriteLCD+0x26>
 80011c6:	2301      	movs	r3, #1
 80011c8:	81bb      	strh	r3, [r7, #12]
    if (size > MAX_LCD_CHARS) {
 80011ca:	2310      	movs	r3, #16
 80011cc:	461a      	mov	r2, r3
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d201      	bcs.n	80011d8 <WriteLCD+0x36>
    	size = MAX_LCD_CHARS;
 80011d4:	2310      	movs	r3, #16
 80011d6:	81bb      	strh	r3, [r7, #12]
    }
    uint8_t lcdBuffer[MAX_LCD_BYTES] = { };
 80011d8:	2340      	movs	r3, #64	@ 0x40
 80011da:	3b01      	subs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	2340      	movs	r3, #64	@ 0x40
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	4698      	mov	r8, r3
 80011e6:	4691      	mov	r9, r2
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011fc:	2340      	movs	r3, #64	@ 0x40
 80011fe:	4619      	mov	r1, r3
 8001200:	2340      	movs	r3, #64	@ 0x40
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2200      	movs	r2, #0
 8001206:	461c      	mov	r4, r3
 8001208:	4615      	mov	r5, r2
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	00eb      	lsls	r3, r5, #3
 8001214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001218:	00e2      	lsls	r2, r4, #3
 800121a:	2340      	movs	r3, #64	@ 0x40
 800121c:	3307      	adds	r3, #7
 800121e:	08db      	lsrs	r3, r3, #3
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	ebad 0d03 	sub.w	sp, sp, r3
 8001226:	466b      	mov	r3, sp
 8001228:	3300      	adds	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	460a      	mov	r2, r1
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f003 f806 	bl	8004244 <memset>
    translateIntoLcd(value, &size, lcdBuffer, command);
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff29 	bl	8001098 <translateIntoLcd>

    bool success = TransmitToSize(ADDRESS, lcdBuffer, size);
 8001246:	2027      	movs	r0, #39	@ 0x27
 8001248:	89bb      	ldrh	r3, [r7, #12]
 800124a:	461a      	mov	r2, r3
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	f7ff fde5 	bl	8000e1c <TransmitToSize>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
    return success;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	46b5      	mov	sp, r6
}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001264 <buttonTransition>:
 * Updates the FSM state and assigns the corresponding handler function
 * depending on the pin level.
 *
 * @param[in] pin  Current logic level of the button input (true = pressed).
 */
static void buttonTransition(bool_t pin) {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	if (pin) {
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <buttonTransition+0x24>
		lastState = BUTTON_DOWN;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <buttonTransition+0x3c>)
 8001276:	2202      	movs	r2, #2
 8001278:	701a      	strb	r2, [r3, #0]
		wasPressed = true;
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <buttonTransition+0x40>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
		actualFunction = buttonDown;
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <buttonTransition+0x44>)
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <buttonTransition+0x48>)
 8001284:	601a      	str	r2, [r3, #0]
	} else {
		lastState = BUTTON_UP;
		actualFunction = buttonUp;
	}
}
 8001286:	e005      	b.n	8001294 <buttonTransition+0x30>
		lastState = BUTTON_UP;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <buttonTransition+0x3c>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		actualFunction = buttonUp;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <buttonTransition+0x44>)
 8001290:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <buttonTransition+0x4c>)
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	2000016e 	.word	0x2000016e
 80012a4:	20000174 	.word	0x20000174
 80012a8:	20000170 	.word	0x20000170
 80012ac:	080012e9 	.word	0x080012e9
 80012b0:	080012b5 	.word	0x080012b5

080012b4 <buttonUp>:
 * If the button is pressed (pin = true), transitions to the FALLING state
 * and sets the next handler to @ref buttonTransition.
 *
 * @param[in] pin  Current logic level of the button input.
 */
static void buttonUp(bool_t pin) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	if (pin) {
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <buttonUp+0x1c>
		actualFunction = buttonTransition;
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <buttonUp+0x28>)
 80012c6:	4a06      	ldr	r2, [pc, #24]	@ (80012e0 <buttonUp+0x2c>)
 80012c8:	601a      	str	r2, [r3, #0]
		lastState = BUTTON_FALLING;
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <buttonUp+0x30>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
	}
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000170 	.word	0x20000170
 80012e0:	08001265 	.word	0x08001265
 80012e4:	2000016e 	.word	0x2000016e

080012e8 <buttonDown>:
 * If the button is released (pin = false), transitions to the RAISING state
 * and sets the next handler to @ref buttonTransition.
 *
 * @param[in] pin  Current logic level of the button input.
 */
static void buttonDown(bool_t pin) {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	if (!pin) {
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f083 0301 	eor.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <buttonDown+0x22>
		actualFunction = buttonTransition;
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <buttonDown+0x30>)
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <buttonDown+0x34>)
 8001302:	601a      	str	r2, [r3, #0]
		lastState = BUTTON_RAISING;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <buttonDown+0x38>)
 8001306:	2203      	movs	r2, #3
 8001308:	701a      	strb	r2, [r3, #0]
	}
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000170 	.word	0x20000170
 800131c:	08001265 	.word	0x08001265
 8001320:	2000016e 	.word	0x2000016e

08001324 <debounceFSM_init>:
 * @brief Initializes the button debounce finite state machine (FSM).
 *
 * Sets the initial state to BUTTON_UP and assigns the handler function
 * @ref buttonUp.
 */
void debounceFSM_init() {
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	lastState = BUTTON_UP;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <debounceFSM_init+0x1c>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
	actualFunction = buttonUp;
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <debounceFSM_init+0x20>)
 8001330:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <debounceFSM_init+0x24>)
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2000016e 	.word	0x2000016e
 8001344:	20000170 	.word	0x20000170
 8001348:	080012b5 	.word	0x080012b5

0800134c <debounceFSM_update>:
 * @brief Updates the button debounce finite state machine (FSM).
 *
 * Reads the button pin and executes the current state handler function.
 * This function must be called periodically.
 */
void debounceFSM_update(){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	bool_t pressed = !readPin();
 8001352:	f000 f883 	bl	800145c <readPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f083 0301 	eor.w	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
	actualFunction(pressed);
 8001372:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <debounceFSM_update+0x38>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	4610      	mov	r0, r2
 800137a:	4798      	blx	r3
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000170 	.word	0x20000170

08001388 <readKey>:
 * the internal flag is cleared until the button is pressed again.
 *
 * @return `true` if the button was pressed since the last call.
 *         `false` otherwise.
 */
bool_t readKey() {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
	bool_t key = wasPressed;
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <readKey+0x20>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
	wasPressed = false;
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <readKey+0x20>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
	return key;
 800139a:	79fb      	ldrb	r3, [r7, #7]
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20000174 	.word	0x20000174

080013ac <errorIfNeeded>:
#include "API_hardware.h"
#include <stddef.h>

void Error_Handler(void); // Implemented in main.c always and defined in its main.h

static void errorIfNeeded(delay_t* delay) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <errorIfNeeded+0x12>
		Error_Handler();
 80013ba:	f7ff fa6d 	bl	8000898 <Error_Handler>
	}
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <delayRead>:
 * @param[in,out] delay  Pointer to the delay structure.
 *
 * @return `true` if the delay has expired.
 *         `false` if the delay is still running.
 */
bool_t delayRead( delay_t * delay ) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	errorIfNeeded(delay);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffec 	bl	80013ac <errorIfNeeded>
	if (!delay->running) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7a1b      	ldrb	r3, [r3, #8]
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <delayRead+0x30>
		delay->running = true;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	721a      	strb	r2, [r3, #8]
		delay->startTime = getTick();
 80013e8:	f000 f84a 	bl	8001480 <getTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
		return false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e01b      	b.n	800142e <delayRead+0x68>
	}
	delay->running = (getTick() - delay->startTime) < delay->duration;
 80013f6:	f000 f843 	bl	8001480 <getTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	bf34      	ite	cc
 800140a:	2301      	movcc	r3, #1
 800140c:	2300      	movcs	r3, #0
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	721a      	strb	r2, [r3, #8]
	return !delay->running;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7a1b      	ldrb	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <delayInit>:
 * as false (`running = false`).
 *
 * @param[in,out] delay     Pointer to the delay structure to initialize.
 * @param[in]     duration  Delay duration in milliseconds.
 */
void delayInit( delay_t * delay, tick_t duration ) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	errorIfNeeded(delay);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffb3 	bl	80013ac <errorIfNeeded>
	delay->duration = duration;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	721a      	strb	r2, [r3, #8]
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <readPin>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, on);
}
void togglePin() {
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
bool_t readPin() {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001464:	4805      	ldr	r0, [pc, #20]	@ (800147c <readPin+0x20>)
 8001466:	f000 fc75 	bl	8001d54 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020800 	.word	0x40020800

08001480 <getTick>:
uint32_t getTick() {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001484:	f000 f9bc 	bl	8001800 <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <ReadSensor>:
static uint8_t ADDRESS = 0x70;
static uint8_t WRITE_COMMAND = 81;
#define READ_SIZE 2
static uint8_t readValue[READ_SIZE];

bool ReadSensor(uint16_t* valueRead) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (valueRead == NULL) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <ReadSensor+0x12>
		return false;
 800149e:	2300      	movs	r3, #0
 80014a0:	e014      	b.n	80014cc <ReadSensor+0x3c>
	}
	ReceiveToSize(ADDRESS, readValue, READ_SIZE);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <ReadSensor+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	490b      	ldr	r1, [pc, #44]	@ (80014d8 <ReadSensor+0x48>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fcd6 	bl	8000e5c <ReceiveToSize>
	*valueRead = (uint16_t) readValue[0] << 8 | readValue[1];
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <ReadSensor+0x48>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <ReadSensor+0x48>)
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	801a      	strh	r2, [r3, #0]
	return true;
 80014ca:	2301      	movs	r3, #1

}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000003d 	.word	0x2000003d
 80014d8:	20000178 	.word	0x20000178

080014dc <WriteSensor>:
bool WriteSensor() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	return TransmitToSize(ADDRESS, &WRITE_COMMAND, 1);
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <WriteSensor+0x18>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2201      	movs	r2, #1
 80014e6:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <WriteSensor+0x1c>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc97 	bl	8000e1c <TransmitToSize>
 80014ee:	4603      	mov	r3, r0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000003d 	.word	0x2000003d
 80014f8:	2000003e 	.word	0x2000003e

080014fc <errorIfNeeded>:

static UART_HandleTypeDef UartHandle;
void Error_Handler(void); // Implemented in main.c always and defined in its main.h

const uint32_t TIMEOUT = 3000;
static void errorIfNeeded(void* delay) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if (delay == NULL) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <errorIfNeeded+0x12>
		Error_Handler();
 800150a:	f7ff f9c5 	bl	8000898 <Error_Handler>
	}
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <findCharIndex>:
 * @param[in] charToFind   Character to search for.
 * @param[in] max          Maximum number of characters to inspect.
 *
 * @return Index of the found character within the string.
 */
static uint16_t findCharIndex(uint8_t *pstring, uint8_t charToFind, uint16_t max) {
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	70fb      	strb	r3, [r7, #3]
 8001522:	4613      	mov	r3, r2
 8001524:	803b      	strh	r3, [r7, #0]
	uint16_t i = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	81fb      	strh	r3, [r7, #14]
	uint8_t actual = pstring[i];
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind) {
 8001534:	e00d      	b.n	8001552 <findCharIndex+0x3c>
		i++;
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	3301      	adds	r3, #1
 800153a:	81fb      	strh	r3, [r7, #14]
		actual = pstring[i];
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	737b      	strb	r3, [r7, #13]
		if (i >= max) {
 8001546:	89fa      	ldrh	r2, [r7, #14]
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d301      	bcc.n	8001552 <findCharIndex+0x3c>
			Error_Handler();
 800154e:	f7ff f9a3 	bl	8000898 <Error_Handler>
	while (actual != charToFind) {
 8001552:	7b7a      	ldrb	r2, [r7, #13]
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	429a      	cmp	r2, r3
 8001558:	d1ed      	bne.n	8001536 <findCharIndex+0x20>
		}
	}
	return i;
 800155a:	89fb      	ldrh	r3, [r7, #14]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <uartInit>:
 * the configuration.
 *
 * @return `true` if the UART was successfully initialized,
 *         `false` otherwise.
 */
bool uartInit() {
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b0cb      	sub	sp, #300	@ 0x12c
 8001568:	af06      	add	r7, sp, #24
	UartHandle.Instance = USART2;
 800156a:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <uartInit+0xd0>)
 800156c:	4a32      	ldr	r2, [pc, #200]	@ (8001638 <uartInit+0xd4>)
 800156e:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8001570:	4b30      	ldr	r3, [pc, #192]	@ (8001634 <uartInit+0xd0>)
 8001572:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001576:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <uartInit+0xd0>)
 800157a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800157e:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <uartInit+0xd0>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_ODD;
 8001586:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <uartInit+0xd0>)
 8001588:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800158c:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <uartInit+0xd0>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <uartInit+0xd0>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800159a:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <uartInit+0xd0>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
	bool_t status = HAL_UART_Init(&UartHandle) == HAL_OK;
 80015a0:	4824      	ldr	r0, [pc, #144]	@ (8001634 <uartInit+0xd0>)
 80015a2:	f002 f9eb 	bl	800397c <HAL_UART_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	if (status) {
 80015b4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d033      	beq.n	8001624 <uartInit+0xc0>
		char uart_json[256];

		snprintf(uart_json, sizeof(uart_json),
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <uartInit+0xd0>)
 80015be:	685e      	ldr	r6, [r3, #4]
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <uartInit+0xd0>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <uartInit+0xd0>)
 80015c8:	68d2      	ldr	r2, [r2, #12]
 80015ca:	491a      	ldr	r1, [pc, #104]	@ (8001634 <uartInit+0xd0>)
 80015cc:	6909      	ldr	r1, [r1, #16]
 80015ce:	4819      	ldr	r0, [pc, #100]	@ (8001634 <uartInit+0xd0>)
 80015d0:	6980      	ldr	r0, [r0, #24]
 80015d2:	4c18      	ldr	r4, [pc, #96]	@ (8001634 <uartInit+0xd0>)
 80015d4:	6964      	ldr	r4, [r4, #20]
 80015d6:	f107 050c 	add.w	r5, r7, #12
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <uartInit+0xd8>)
 80015dc:	9305      	str	r3, [sp, #20]
 80015de:	9404      	str	r4, [sp, #16]
 80015e0:	9003      	str	r0, [sp, #12]
 80015e2:	9102      	str	r1, [sp, #8]
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	4633      	mov	r3, r6
 80015ec:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <uartInit+0xdc>)
 80015ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f2:	4628      	mov	r0, r5
 80015f4:	f002 fdce 	bl	8004194 <sniprintf>
			UartHandle.Init.Parity,
			UartHandle.Init.HwFlowCtl,
			UartHandle.Init.Mode,
			"USART2"
		);
		uint8_t i = findCharIndex((uint8_t*)uart_json, '\n', 256);
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001600:	210a      	movs	r1, #10
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff87 	bl	8001516 <findCharIndex>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
		uartSendStringSize((uint8_t*)uart_json, i+1);
 800160e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001612:	b29b      	uxth	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f836 	bl	8001690 <uartSendStringSize>
	};
	return status;
 8001624:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
}
 8001628:	4618      	mov	r0, r3
 800162a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800162e:	46bd      	mov	sp, r7
 8001630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001632:	bf00      	nop
 8001634:	2000017c 	.word	0x2000017c
 8001638:	40004400 	.word	0x40004400
 800163c:	08004cbc 	.word	0x08004cbc
 8001640:	08004c40 	.word	0x08004c40

08001644 <uartSendString>:
 * The function determines the string length by searching for the
 * null terminator (`'\0'`) before transmitting.
 *
 * @param[in] pstring  Pointer to the null-terminated string to transmit.
 */
bool uartSendString(uint8_t * pstring) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	errorIfNeeded(pstring);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff55 	bl	80014fc <errorIfNeeded>
	uint16_t max = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	81fb      	strh	r3, [r7, #14]
	uint16_t i = findCharIndex(pstring, '\0', max -1);
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	3b01      	subs	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff58 	bl	8001516 <findCharIndex>
 8001666:	4603      	mov	r3, r0
 8001668:	81bb      	strh	r3, [r7, #12]
	return HAL_UART_Transmit(&UartHandle, pstring, i, TIMEOUT) == HAL_OK;
 800166a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800166e:	89ba      	ldrh	r2, [r7, #12]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <uartSendString+0x48>)
 8001674:	f002 f9d2 	bl	8003a1c <HAL_UART_Transmit>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000017c 	.word	0x2000017c

08001690 <uartSendStringSize>:
 * Transmits exactly @p size bytes from the given string buffer.
 *
 * @param[in] pstring  Pointer to the string buffer to transmit.
 * @param[in] size     Number of bytes to transmit.
 */
void uartSendStringSize(uint8_t * pstring, uint16_t size) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
	errorIfNeeded(pstring);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff2d 	bl	80014fc <errorIfNeeded>
	HAL_UART_Transmit(&UartHandle, pstring, size, TIMEOUT);
 80016a2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <uartSendStringSize+0x28>)
 80016ac:	f002 f9b6 	bl	8003a1c <HAL_UART_Transmit>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000017c 	.word	0x2000017c

080016bc <findCharIndex>:
 * @param[in] pstring      Pointer to the input string (null-terminated).
 * @param[in] charToFind   Character to search for.
 *
 * @return Index of the found character within the string.
 */
uint16_t findCharIndex(uint8_t *pstring, uint8_t charToFind) {
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70fb      	strb	r3, [r7, #3]
	uint16_t i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	81fb      	strh	r3, [r7, #14]
	uint8_t actual = pstring[i];
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind && actual != '\0') {
 80016d6:	e007      	b.n	80016e8 <findCharIndex+0x2c>
		i++;
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	3301      	adds	r3, #1
 80016dc:	81fb      	strh	r3, [r7, #14]
		actual = pstring[i];
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind && actual != '\0') {
 80016e8:	7b7a      	ldrb	r2, [r7, #13]
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d002      	beq.n	80016f6 <findCharIndex+0x3a>
 80016f0:	7b7b      	ldrb	r3, [r7, #13]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <findCharIndex+0x1c>
	}
	return i;
 80016f6:	89fb      	ldrh	r3, [r7, #14]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <NumberToAscii>:


bool NumberToAscii(uint16_t value, uint8_t *buffer) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	80fb      	strh	r3, [r7, #6]
    if (buffer == NULL) return false;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <NumberToAscii+0x16>
 8001716:	2300      	movs	r3, #0
 8001718:	e006      	b.n	8001728 <NumberToAscii+0x24>

    // Convert the number (uint16_t) to string (ASCII)
    sprintf((char*)buffer, "%u", value);
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	461a      	mov	r2, r3
 800171e:	4904      	ldr	r1, [pc, #16]	@ (8001730 <NumberToAscii+0x2c>)
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f002 fd6d 	bl	8004200 <siprintf>

    return true;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08004cc4 	.word	0x08004cc4

08001734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0d      	ldr	r2, [pc, #52]	@ (8001774 <HAL_Init+0x40>)
 800173e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_Init+0x40>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800174e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_Init+0x40>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f931 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff f89c 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f93b 	bl	8001a12 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b4:	f000 f911 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000044 	.word	0x20000044
 80017d4:	20000040 	.word	0x20000040

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000044 	.word	0x20000044
 80017fc:	200001c4 	.word	0x200001c4

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200001c4 	.word	0x200001c4

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000044 	.word	0x20000044

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff47 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff5c 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb0 	bl	8001980 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e165      	b.n	8001d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f040 8154 	bne.w	8001d0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d005      	beq.n	8001a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d017      	beq.n	8001b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ae 	beq.w	8001d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a5c      	ldr	r2, [pc, #368]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bce:	4a58      	ldr	r2, [pc, #352]	@ (8001d30 <HAL_GPIO_Init+0x304>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001d34 <HAL_GPIO_Init+0x308>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x216>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	@ (8001d3c <HAL_GPIO_Init+0x310>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x212>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d40 <HAL_GPIO_Init+0x314>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4b      	ldr	r2, [pc, #300]	@ (8001d44 <HAL_GPIO_Init+0x318>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x20a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d48 <HAL_GPIO_Init+0x31c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x206>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a49      	ldr	r2, [pc, #292]	@ (8001d4c <HAL_GPIO_Init+0x320>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x202>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e00c      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c2e:	2307      	movs	r3, #7
 8001c30:	e00a      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_GPIO_Init+0x21c>
 8001c46:	2300      	movs	r3, #0
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	f002 0203 	and.w	r2, r2, #3
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c58:	4935      	ldr	r1, [pc, #212]	@ (8001d30 <HAL_GPIO_Init+0x304>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b3a      	ldr	r3, [pc, #232]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a31      	ldr	r2, [pc, #196]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cba:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cde:	4a1c      	ldr	r2, [pc, #112]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d08:	4a11      	ldr	r2, [pc, #68]	@ (8001d50 <HAL_GPIO_Init+0x324>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	f67f ae96 	bls.w	8001a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3724      	adds	r7, #36	@ 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40013c00 	.word	0x40013c00

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e12b      	b.n	8002022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7fe fd88 	bl	80008f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	@ 0x24
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e1c:	f001 f8b8 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8001e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a81      	ldr	r2, [pc, #516]	@ (800202c <HAL_I2C_Init+0x274>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d807      	bhi.n	8001e3c <HAL_I2C_Init+0x84>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4a80      	ldr	r2, [pc, #512]	@ (8002030 <HAL_I2C_Init+0x278>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bf94      	ite	ls
 8001e34:	2301      	movls	r3, #1
 8001e36:	2300      	movhi	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	e006      	b.n	8001e4a <HAL_I2C_Init+0x92>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002034 <HAL_I2C_Init+0x27c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	bf94      	ite	ls
 8001e44:	2301      	movls	r3, #1
 8001e46:	2300      	movhi	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0e7      	b.n	8002022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a78      	ldr	r2, [pc, #480]	@ (8002038 <HAL_I2C_Init+0x280>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a6a      	ldr	r2, [pc, #424]	@ (800202c <HAL_I2C_Init+0x274>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d802      	bhi.n	8001e8c <HAL_I2C_Init+0xd4>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	e009      	b.n	8001ea0 <HAL_I2C_Init+0xe8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	4a69      	ldr	r2, [pc, #420]	@ (800203c <HAL_I2C_Init+0x284>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	495c      	ldr	r1, [pc, #368]	@ (800202c <HAL_I2C_Init+0x274>)
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	d819      	bhi.n	8001ef4 <HAL_I2C_Init+0x13c>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e59      	subs	r1, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ece:	1c59      	adds	r1, r3, #1
 8001ed0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_Init+0x138>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e59      	subs	r1, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	e051      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e04f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d111      	bne.n	8001f20 <HAL_I2C_Init+0x168>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf0c      	ite	eq
 8001f18:	2301      	moveq	r3, #1
 8001f1a:	2300      	movne	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e012      	b.n	8001f46 <HAL_I2C_Init+0x18e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	0099      	lsls	r1, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Init+0x196>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e022      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10e      	bne.n	8001f74 <HAL_I2C_Init+0x1bc>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1e58      	subs	r0, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	440b      	add	r3, r1
 8001f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Init+0x1dc>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6911      	ldr	r1, [r2, #16]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	000186a0 	.word	0x000186a0
 8002030:	001e847f 	.word	0x001e847f
 8002034:	003d08ff 	.word	0x003d08ff
 8002038:	431bde83 	.word	0x431bde83
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	461a      	mov	r2, r3
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
 8002050:	4613      	mov	r3, r2
 8002052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fbd4 	bl	8001800 <HAL_GetTick>
 8002058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 80e0 	bne.w	8002228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	4970      	ldr	r1, [pc, #448]	@ (8002234 <HAL_I2C_Master_Transmit+0x1f4>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fc64 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e0d3      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Transmit+0x50>
 800208c:	2302      	movs	r3, #2
 800208e:	e0cc      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2221      	movs	r2, #33	@ 0x21
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a50      	ldr	r2, [pc, #320]	@ (8002238 <HAL_I2C_Master_Transmit+0x1f8>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 face 	bl	80026a0 <I2C_MasterRequestWrite>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e08d      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002124:	e066      	b.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fd22 	bl	8002b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fd19 	bl	8002c04 <I2C_WaitOnBTFFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e01a      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d194      	bne.n	8002126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	@ 0x30
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	461a      	mov	r2, r3
 8002248:	460b      	mov	r3, r1
 800224a:	817b      	strh	r3, [r7, #10]
 800224c:	4613      	mov	r3, r2
 800224e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff fad6 	bl	8001800 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	f040 8217 	bne.w	8002692 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	497c      	ldr	r1, [pc, #496]	@ (8002460 <HAL_I2C_Master_Receive+0x224>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fb66 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	e20a      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_I2C_Master_Receive+0x50>
 8002288:	2302      	movs	r3, #2
 800228a:	e203      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d007      	beq.n	80022b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2222      	movs	r2, #34	@ 0x22
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2210      	movs	r2, #16
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	893a      	ldrh	r2, [r7, #8]
 80022e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_I2C_Master_Receive+0x228>)
 80022f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f4:	8979      	ldrh	r1, [r7, #10]
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fa52 	bl	80027a4 <I2C_MasterRequestRead>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1c4      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	2b00      	cmp	r3, #0
 8002310:	d113      	bne.n	800233a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e198      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	2b01      	cmp	r3, #1
 8002340:	d11b      	bne.n	800237a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e178      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	2b02      	cmp	r3, #2
 8002380:	d11b      	bne.n	80023ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	e158      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023e0:	e144      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f200 80f1 	bhi.w	80025ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d123      	bne.n	800243c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fc4b 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e145      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800243a:	e117      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002440:	2b02      	cmp	r3, #2
 8002442:	d14e      	bne.n	80024e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244a:	2200      	movs	r2, #0
 800244c:	4906      	ldr	r1, [pc, #24]	@ (8002468 <HAL_I2C_Master_Receive+0x22c>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa76 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e11a      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
 800245e:	bf00      	nop
 8002460:	00100002 	.word	0x00100002
 8002464:	ffff0000 	.word	0xffff0000
 8002468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024e0:	e0c4      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	496c      	ldr	r1, [pc, #432]	@ (800269c <HAL_I2C_Master_Receive+0x460>)
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa27 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0cb      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800250a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	2200      	movs	r2, #0
 8002546:	4955      	ldr	r1, [pc, #340]	@ (800269c <HAL_I2C_Master_Receive+0x460>)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f9f9 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e09d      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025cc:	e04e      	b.n	800266c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb5e 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e058      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d124      	bne.n	800266c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002626:	2b03      	cmp	r3, #3
 8002628:	d107      	bne.n	800263a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002638:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f aeb6 	bne.w	80023e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	00010004 	.word	0x00010004

080026a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	460b      	mov	r3, r1
 80026ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d006      	beq.n	80026ca <I2C_MasterRequestWrite+0x2a>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d003      	beq.n	80026ca <I2C_MasterRequestWrite+0x2a>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026c8:	d108      	bne.n	80026dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00b      	b.n	80026f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d107      	bne.n	80026f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f91d 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800271a:	d103      	bne.n	8002724 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e035      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002730:	d108      	bne.n	8002744 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	e01b      	b.n	800277c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	11db      	asrs	r3, r3, #7
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0306 	and.w	r3, r3, #6
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f063 030f 	orn	r3, r3, #15
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	490e      	ldr	r1, [pc, #56]	@ (800279c <I2C_MasterRequestWrite+0xfc>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f966 	bl	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e010      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4907      	ldr	r1, [pc, #28]	@ (80027a0 <I2C_MasterRequestWrite+0x100>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f956 	bl	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	00010008 	.word	0x00010008
 80027a0:	00010002 	.word	0x00010002

080027a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	460b      	mov	r3, r1
 80027b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d006      	beq.n	80027de <I2C_MasterRequestRead+0x3a>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <I2C_MasterRequestRead+0x3a>
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027dc:	d108      	bne.n	80027f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e00b      	b.n	8002808 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	2b11      	cmp	r3, #17
 80027f6:	d107      	bne.n	8002808 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f893 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800282e:	d103      	bne.n	8002838 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e079      	b.n	8002930 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002844:	d108      	bne.n	8002858 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	e05f      	b.n	8002918 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	11db      	asrs	r3, r3, #7
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 0306 	and.w	r3, r3, #6
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f063 030f 	orn	r3, r3, #15
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4930      	ldr	r1, [pc, #192]	@ (8002938 <I2C_MasterRequestRead+0x194>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f8dc 	bl	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e054      	b.n	8002930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4929      	ldr	r1, [pc, #164]	@ (800293c <I2C_MasterRequestRead+0x198>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8cc 	bl	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e044      	b.n	8002930 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f831 	bl	8002940 <I2C_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028f2:	d103      	bne.n	80028fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e017      	b.n	8002930 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002900:	897b      	ldrh	r3, [r7, #10]
 8002902:	11db      	asrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f003 0306 	and.w	r3, r3, #6
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f063 030e 	orn	r3, r3, #14
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4907      	ldr	r1, [pc, #28]	@ (800293c <I2C_MasterRequestRead+0x198>)
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f888 	bl	8002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	00010008 	.word	0x00010008
 800293c:	00010002 	.word	0x00010002

08002940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002950:	e048      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002958:	d044      	beq.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295a:	f7fe ff51 	bl	8001800 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d139      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d10d      	bne.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x56>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	e00c      	b.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	43da      	mvns	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d116      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e023      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10d      	bne.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0xca>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	43da      	mvns	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4013      	ands	r3, r2
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	e00c      	b.n	8002a24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d093      	beq.n	8002952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a42:	e071      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a52:	d123      	bne.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e067      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa2:	d041      	beq.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa4:	f7fe feac 	bl	8001800 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d302      	bcc.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d136      	bne.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10c      	bne.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf14      	ite	ne
 8002ad6:	2301      	movne	r3, #1
 8002ad8:	2300      	moveq	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	e00b      	b.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e021      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10c      	bne.n	8002b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	e00b      	b.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af6d 	bne.w	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b80:	e034      	b.n	8002bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8e3 	bl	8002d4e <I2C_IsAcknowledgeFailed>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e034      	b.n	8002bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b98:	d028      	beq.n	8002bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fe31 	bl	8001800 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11d      	bne.n	8002bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d016      	beq.n	8002bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e007      	b.n	8002bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf6:	2b80      	cmp	r3, #128	@ 0x80
 8002bf8:	d1c3      	bne.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c10:	e034      	b.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f89b 	bl	8002d4e <I2C_IsAcknowledgeFailed>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e034      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c28:	d028      	beq.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	f7fe fde9 	bl	8001800 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d302      	bcc.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11d      	bne.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d016      	beq.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e007      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d1c3      	bne.n	8002c12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca0:	e049      	b.n	8002d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d119      	bne.n	8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e030      	b.n	8002d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fe fd8c 	bl	8001800 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11d      	bne.n	8002d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d016      	beq.n	8002d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d40:	2b40      	cmp	r3, #64	@ 0x40
 8002d42:	d1ae      	bne.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d64:	d11b      	bne.n	8002d9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cc      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d90c      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d044      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e067      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4934      	ldr	r1, [pc, #208]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fcb0 	bl	8001800 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fcac 	bl	8001800 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f855 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	@ (8002f6c <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fc10 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08004cc8 	.word	0x08004cc8
 8002f70:	20000004 	.word	0x20000004
 8002f74:	20000040 	.word	0x20000040

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	08004cd8 	.word	0x08004cd8

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffdc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08004cd8 	.word	0x08004cd8

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b0ae      	sub	sp, #184	@ 0xb8
 8002fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003006:	4bcb      	ldr	r3, [pc, #812]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b0c      	cmp	r3, #12
 8003010:	f200 8206 	bhi.w	8003420 <HAL_RCC_GetSysClockFreq+0x440>
 8003014:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	08003051 	.word	0x08003051
 8003020:	08003421 	.word	0x08003421
 8003024:	08003421 	.word	0x08003421
 8003028:	08003421 	.word	0x08003421
 800302c:	08003059 	.word	0x08003059
 8003030:	08003421 	.word	0x08003421
 8003034:	08003421 	.word	0x08003421
 8003038:	08003421 	.word	0x08003421
 800303c:	08003061 	.word	0x08003061
 8003040:	08003421 	.word	0x08003421
 8003044:	08003421 	.word	0x08003421
 8003048:	08003421 	.word	0x08003421
 800304c:	08003251 	.word	0x08003251
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4bb9      	ldr	r3, [pc, #740]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x358>)
 8003052:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003056:	e1e7      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003058:	4bb8      	ldr	r3, [pc, #736]	@ (800333c <HAL_RCC_GetSysClockFreq+0x35c>)
 800305a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800305e:	e1e3      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003060:	4bb4      	ldr	r3, [pc, #720]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306c:	4bb1      	ldr	r3, [pc, #708]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d071      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4bae      	ldr	r3, [pc, #696]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003084:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800308c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003090:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800309a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4621      	mov	r1, r4
 80030b8:	1a51      	subs	r1, r2, r1
 80030ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80030bc:	4629      	mov	r1, r5
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80030d0:	4649      	mov	r1, r9
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	4641      	mov	r1, r8
 80030d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030da:	4641      	mov	r1, r8
 80030dc:	018a      	lsls	r2, r1, #6
 80030de:	4641      	mov	r1, r8
 80030e0:	1a51      	subs	r1, r2, r1
 80030e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030e4:	4649      	mov	r1, r9
 80030e6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80030f8:	4649      	mov	r1, r9
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4641      	mov	r1, r8
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4641      	mov	r1, r8
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4622      	mov	r2, r4
 800310e:	189b      	adds	r3, r3, r2
 8003110:	633b      	str	r3, [r7, #48]	@ 0x30
 8003112:	462b      	mov	r3, r5
 8003114:	460a      	mov	r2, r1
 8003116:	eb42 0303 	adc.w	r3, r2, r3
 800311a:	637b      	str	r3, [r7, #52]	@ 0x34
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003128:	4629      	mov	r1, r5
 800312a:	024b      	lsls	r3, r1, #9
 800312c:	4621      	mov	r1, r4
 800312e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003132:	4621      	mov	r1, r4
 8003134:	024a      	lsls	r2, r1, #9
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003144:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003148:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800314c:	f7fd f8b0 	bl	80002b0 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800315a:	e067      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4b75      	ldr	r3, [pc, #468]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003168:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800316c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003176:	2300      	movs	r3, #0
 8003178:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800317a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80031b0:	4649      	mov	r1, r9
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4641      	mov	r1, r8
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4641      	mov	r1, r8
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4641      	mov	r1, r8
 80031c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80031c4:	4649      	mov	r1, r9
 80031c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031de:	4692      	mov	sl, r2
 80031e0:	469b      	mov	fp, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb1a 0303 	adds.w	r3, sl, r3
 80031e8:	623b      	str	r3, [r7, #32]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb4b 0303 	adc.w	r3, fp, r3
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80031fe:	4629      	mov	r1, r5
 8003200:	028b      	lsls	r3, r1, #10
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003208:	4621      	mov	r1, r4
 800320a:	028a      	lsls	r2, r1, #10
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003214:	2200      	movs	r2, #0
 8003216:	673b      	str	r3, [r7, #112]	@ 0x70
 8003218:	677a      	str	r2, [r7, #116]	@ 0x74
 800321a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800321e:	f7fd f847 	bl	80002b0 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4613      	mov	r3, r2
 8003228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800322c:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	3301      	adds	r3, #1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800323e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800324e:	e0eb      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003250:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800325c:	4b35      	ldr	r3, [pc, #212]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d06b      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003268:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x354>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	2200      	movs	r2, #0
 8003270:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327a:	663b      	str	r3, [r7, #96]	@ 0x60
 800327c:	2300      	movs	r3, #0
 800327e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003280:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003284:	4622      	mov	r2, r4
 8003286:	462b      	mov	r3, r5
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	0159      	lsls	r1, r3, #5
 8003292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003296:	0150      	lsls	r0, r2, #5
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4621      	mov	r1, r4
 800329e:	1a51      	subs	r1, r2, r1
 80032a0:	61b9      	str	r1, [r7, #24]
 80032a2:	4629      	mov	r1, r5
 80032a4:	eb63 0301 	sbc.w	r3, r3, r1
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032b6:	4659      	mov	r1, fp
 80032b8:	018b      	lsls	r3, r1, #6
 80032ba:	4651      	mov	r1, sl
 80032bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032c0:	4651      	mov	r1, sl
 80032c2:	018a      	lsls	r2, r1, #6
 80032c4:	4651      	mov	r1, sl
 80032c6:	ebb2 0801 	subs.w	r8, r2, r1
 80032ca:	4659      	mov	r1, fp
 80032cc:	eb63 0901 	sbc.w	r9, r3, r1
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e4:	4690      	mov	r8, r2
 80032e6:	4699      	mov	r9, r3
 80032e8:	4623      	mov	r3, r4
 80032ea:	eb18 0303 	adds.w	r3, r8, r3
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	462b      	mov	r3, r5
 80032f2:	eb49 0303 	adc.w	r3, r9, r3
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003304:	4629      	mov	r1, r5
 8003306:	024b      	lsls	r3, r1, #9
 8003308:	4621      	mov	r1, r4
 800330a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800330e:	4621      	mov	r1, r4
 8003310:	024a      	lsls	r2, r1, #9
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800331a:	2200      	movs	r2, #0
 800331c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800331e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003324:	f7fc ffc4 	bl	80002b0 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4613      	mov	r3, r2
 800332e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003332:	e065      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x420>
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003340:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x458>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	2200      	movs	r2, #0
 8003348:	4618      	mov	r0, r3
 800334a:	4611      	mov	r1, r2
 800334c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003350:	653b      	str	r3, [r7, #80]	@ 0x50
 8003352:	2300      	movs	r3, #0
 8003354:	657b      	str	r3, [r7, #84]	@ 0x54
 8003356:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800335a:	4642      	mov	r2, r8
 800335c:	464b      	mov	r3, r9
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4641      	mov	r1, r8
 8003374:	1a51      	subs	r1, r2, r1
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	4649      	mov	r1, r9
 800337a:	eb63 0301 	sbc.w	r3, r3, r1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800338c:	4659      	mov	r1, fp
 800338e:	018b      	lsls	r3, r1, #6
 8003390:	4651      	mov	r1, sl
 8003392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003396:	4651      	mov	r1, sl
 8003398:	018a      	lsls	r2, r1, #6
 800339a:	4651      	mov	r1, sl
 800339c:	1a54      	subs	r4, r2, r1
 800339e:	4659      	mov	r1, fp
 80033a0:	eb63 0501 	sbc.w	r5, r3, r1
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	00eb      	lsls	r3, r5, #3
 80033ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b2:	00e2      	lsls	r2, r4, #3
 80033b4:	4614      	mov	r4, r2
 80033b6:	461d      	mov	r5, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	18e3      	adds	r3, r4, r3
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	464b      	mov	r3, r9
 80033c0:	eb45 0303 	adc.w	r3, r5, r3
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033d2:	4629      	mov	r1, r5
 80033d4:	028b      	lsls	r3, r1, #10
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033dc:	4621      	mov	r1, r4
 80033de:	028a      	lsls	r2, r1, #10
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e8:	2200      	movs	r2, #0
 80033ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033f2:	f7fc ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4613      	mov	r3, r2
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003400:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <HAL_RCC_GetSysClockFreq+0x458>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0f1b      	lsrs	r3, r3, #28
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800340e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800341e:	e003      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003426:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800342c:	4618      	mov	r0, r3
 800342e:	37b8      	adds	r7, #184	@ 0xb8
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400

08003440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e28d      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8083 	beq.w	8003566 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003460:	4b94      	ldr	r3, [pc, #592]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b04      	cmp	r3, #4
 800346a:	d019      	beq.n	80034a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800346c:	4b91      	ldr	r3, [pc, #580]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
        || \
 8003474:	2b08      	cmp	r3, #8
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003478:	4b8e      	ldr	r3, [pc, #568]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003484:	d00c      	beq.n	80034a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003486:	4b8b      	ldr	r3, [pc, #556]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d112      	bne.n	80034b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b88      	ldr	r3, [pc, #544]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349e:	d10b      	bne.n	80034b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	4b84      	ldr	r3, [pc, #528]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d05b      	beq.n	8003564 <HAL_RCC_OscConfig+0x124>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d157      	bne.n	8003564 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e25a      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d106      	bne.n	80034d0 <HAL_RCC_OscConfig+0x90>
 80034c2:	4b7c      	ldr	r3, [pc, #496]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7b      	ldr	r2, [pc, #492]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xcc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xb4>
 80034da:	4b76      	ldr	r3, [pc, #472]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a75      	ldr	r2, [pc, #468]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b73      	ldr	r3, [pc, #460]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a72      	ldr	r2, [pc, #456]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xcc>
 80034f4:	4b6f      	ldr	r3, [pc, #444]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6e      	ldr	r2, [pc, #440]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b6c      	ldr	r3, [pc, #432]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a6b      	ldr	r2, [pc, #428]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003514:	f7fe f974 	bl	8001800 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fe f970 	bl	8001800 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e21f      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b61      	ldr	r3, [pc, #388]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xdc>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe f960 	bl	8001800 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe f95c 	bl	8001800 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e20b      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b57      	ldr	r3, [pc, #348]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x104>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d06f      	beq.n	8003652 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003572:	4b50      	ldr	r3, [pc, #320]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d017      	beq.n	80035ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800357e:	4b4d      	ldr	r3, [pc, #308]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
        || \
 8003586:	2b08      	cmp	r3, #8
 8003588:	d105      	bne.n	8003596 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800358a:	4b4a      	ldr	r3, [pc, #296]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b47      	ldr	r3, [pc, #284]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a2:	4b44      	ldr	r3, [pc, #272]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b41      	ldr	r3, [pc, #260]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x186>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1d3      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b3b      	ldr	r3, [pc, #236]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4937      	ldr	r1, [pc, #220]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e03a      	b.n	8003652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_OscConfig+0x278>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe f909 	bl	8001800 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f2:	f7fe f905 	bl	8001800 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1b4      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4925      	ldr	r1, [pc, #148]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003626:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <HAL_RCC_OscConfig+0x278>)
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f8e8 	bl	8001800 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003634:	f7fe f8e4 	bl	8001800 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e193      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d036      	beq.n	80036cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_RCC_OscConfig+0x27c>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe f8c8 	bl	8001800 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fe f8c4 	bl	8001800 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e173      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCC_OscConfig+0x274>)
 8003688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x234>
 8003692:	e01b      	b.n	80036cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	4b09      	ldr	r3, [pc, #36]	@ (80036bc <HAL_RCC_OscConfig+0x27c>)
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369a:	f7fe f8b1 	bl	8001800 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a0:	e00e      	b.n	80036c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a2:	f7fe f8ad 	bl	8001800 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d907      	bls.n	80036c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e15c      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
 80036b4:	40023800 	.word	0x40023800
 80036b8:	42470000 	.word	0x42470000
 80036bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	4b8a      	ldr	r3, [pc, #552]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80036c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ea      	bne.n	80036a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8097 	beq.w	8003808 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036de:	4b83      	ldr	r3, [pc, #524]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	4b7f      	ldr	r3, [pc, #508]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a7e      	ldr	r2, [pc, #504]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fa:	4b7c      	ldr	r3, [pc, #496]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370a:	4b79      	ldr	r3, [pc, #484]	@ (80038f0 <HAL_RCC_OscConfig+0x4b0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003716:	4b76      	ldr	r3, [pc, #472]	@ (80038f0 <HAL_RCC_OscConfig+0x4b0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a75      	ldr	r2, [pc, #468]	@ (80038f0 <HAL_RCC_OscConfig+0x4b0>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003722:	f7fe f86d 	bl	8001800 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372a:	f7fe f869 	bl	8001800 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e118      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	4b6c      	ldr	r3, [pc, #432]	@ (80038f0 <HAL_RCC_OscConfig+0x4b0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d106      	bne.n	800375e <HAL_RCC_OscConfig+0x31e>
 8003750:	4b66      	ldr	r3, [pc, #408]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003754:	4a65      	ldr	r2, [pc, #404]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	@ 0x70
 800375c:	e01c      	b.n	8003798 <HAL_RCC_OscConfig+0x358>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b05      	cmp	r3, #5
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x340>
 8003766:	4b61      	ldr	r3, [pc, #388]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a60      	ldr	r2, [pc, #384]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
 8003772:	4b5e      	ldr	r3, [pc, #376]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003776:	4a5d      	ldr	r2, [pc, #372]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	6713      	str	r3, [r2, #112]	@ 0x70
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0x358>
 8003780:	4b5a      	ldr	r3, [pc, #360]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	4a59      	ldr	r2, [pc, #356]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6713      	str	r3, [r2, #112]	@ 0x70
 800378c:	4b57      	ldr	r3, [pc, #348]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	4a56      	ldr	r2, [pc, #344]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003792:	f023 0304 	bic.w	r3, r3, #4
 8003796:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7fe f82e 	bl	8001800 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7fe f82a 	bl	8001800 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0d7      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	4b4b      	ldr	r3, [pc, #300]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ee      	beq.n	80037a8 <HAL_RCC_OscConfig+0x368>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe f818 	bl	8001800 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe f814 	bl	8001800 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0c1      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	4b40      	ldr	r3, [pc, #256]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1ee      	bne.n	80037d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d105      	bne.n	8003808 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	4a3a      	ldr	r2, [pc, #232]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003806:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80ad 	beq.w	800396c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003812:	4b36      	ldr	r3, [pc, #216]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d060      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d145      	bne.n	80038b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b33      	ldr	r3, [pc, #204]	@ (80038f4 <HAL_RCC_OscConfig+0x4b4>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fd ffe8 	bl	8001800 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fd ffe4 	bl	8001800 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e093      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b29      	ldr	r3, [pc, #164]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	3b01      	subs	r3, #1
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	071b      	lsls	r3, r3, #28
 800387e:	491b      	ldr	r1, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <HAL_RCC_OscConfig+0x4b4>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fd ffb9 	bl	8001800 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd ffb5 	bl	8001800 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e064      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a4:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x452>
 80038b0:	e05c      	b.n	800396c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <HAL_RCC_OscConfig+0x4b4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd ffa2 	bl	8001800 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd ff9e 	bl	8001800 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e04d      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_RCC_OscConfig+0x4ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x480>
 80038de:	e045      	b.n	800396c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e040      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40007000 	.word	0x40007000
 80038f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <HAL_RCC_OscConfig+0x538>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d030      	beq.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d129      	bne.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d122      	bne.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003928:	4013      	ands	r3, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800392e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003930:	4293      	cmp	r3, r2
 8003932:	d119      	bne.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	3b01      	subs	r3, #1
 8003942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d10f      	bne.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e042      	b.n	8003a14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc ffee 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	@ 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f973 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	@ 0x28
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d175      	bne.n	8003b28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_UART_Transmit+0x2c>
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e06e      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2221      	movs	r2, #33	@ 0x21
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fed1 	bl	8001800 <HAL_GetTick>
 8003a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a74:	d108      	bne.n	8003a88 <HAL_UART_Transmit+0x6c>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e003      	b.n	8003a90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a90:	e02e      	b.n	8003af0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2180      	movs	r1, #128	@ 0x80
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f848 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e03a      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3302      	adds	r3, #2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e007      	b.n	8003ae2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1cb      	bne.n	8003a92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2140      	movs	r1, #64	@ 0x40
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f814 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e006      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	e03b      	b.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b4a:	d037      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4c:	f7fd fe58 	bl	8001800 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e03a      	b.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d023      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b80      	cmp	r3, #128	@ 0x80
 8003b78:	d020      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	d01d      	beq.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d116      	bne.n	8003bbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81d 	bl	8003be4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2208      	movs	r2, #8
 8003bae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e00f      	b.n	8003bdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d0b4      	beq.n	8003b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b095      	sub	sp, #84	@ 0x54
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d119      	bne.n	8003c90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c7c:	61ba      	str	r2, [r7, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c9e:	bf00      	nop
 8003ca0:	3754      	adds	r7, #84	@ 0x54
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0c0      	sub	sp, #256	@ 0x100
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	ea40 0301 	orr.w	r3, r0, r1
 8003cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d04:	f021 010c 	bic.w	r1, r1, #12
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d12:	430b      	orrs	r3, r1
 8003d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	ea40 0301 	orr.w	r3, r0, r1
 8003d32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <UART_SetConfig+0x2cc>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d005      	beq.n	8003d4c <UART_SetConfig+0xa0>
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b8d      	ldr	r3, [pc, #564]	@ (8003f7c <UART_SetConfig+0x2d0>)
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d104      	bne.n	8003d56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff f934 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8003d50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d54:	e003      	b.n	8003d5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d56:	f7ff f91b 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8003d5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d68:	f040 810c 	bne.w	8003f84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d7e:	4622      	mov	r2, r4
 8003d80:	462b      	mov	r3, r5
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d86:	415b      	adcs	r3, r3
 8003d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d8e:	4621      	mov	r1, r4
 8003d90:	eb12 0801 	adds.w	r8, r2, r1
 8003d94:	4629      	mov	r1, r5
 8003d96:	eb43 0901 	adc.w	r9, r3, r1
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dae:	4690      	mov	r8, r2
 8003db0:	4699      	mov	r9, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	eb18 0303 	adds.w	r3, r8, r3
 8003db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	eb49 0303 	adc.w	r3, r9, r3
 8003dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	18db      	adds	r3, r3, r3
 8003dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003de0:	4613      	mov	r3, r2
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003de8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003df0:	f7fc fa5e 	bl	80002b0 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4b61      	ldr	r3, [pc, #388]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	011c      	lsls	r4, r3, #4
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e24:	4641      	mov	r1, r8
 8003e26:	eb12 0a01 	adds.w	sl, r2, r1
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e44:	4692      	mov	sl, r2
 8003e46:	469b      	mov	fp, r3
 8003e48:	4643      	mov	r3, r8
 8003e4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003e4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb4b 0303 	adc.w	r3, fp, r3
 8003e58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e70:	460b      	mov	r3, r1
 8003e72:	18db      	adds	r3, r3, r3
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e76:	4613      	mov	r3, r2
 8003e78:	eb42 0303 	adc.w	r3, r2, r3
 8003e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e86:	f7fc fa13 	bl	80002b0 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4b3b      	ldr	r3, [pc, #236]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2301 	umull	r2, r3, r3, r1
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2264      	movs	r2, #100	@ 0x64
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	1acb      	subs	r3, r1, r3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ea6:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003eb4:	441c      	add	r4, r3
 8003eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ec0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003ec4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	1891      	adds	r1, r2, r2
 8003ece:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ed0:	415b      	adcs	r3, r3
 8003ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ed8:	4641      	mov	r1, r8
 8003eda:	1851      	adds	r1, r2, r1
 8003edc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ede:	4649      	mov	r1, r9
 8003ee0:	414b      	adcs	r3, r1
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	00cb      	lsls	r3, r1, #3
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003efa:	4651      	mov	r1, sl
 8003efc:	00ca      	lsls	r2, r1, #3
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	4642      	mov	r2, r8
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	460a      	mov	r2, r1
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	18db      	adds	r3, r3, r3
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f32:	4613      	mov	r3, r2
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f42:	f7fc f9b5 	bl	80002b0 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	@ 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3332      	adds	r3, #50	@ 0x32
 8003f5e:	4a08      	ldr	r2, [pc, #32]	@ (8003f80 <UART_SetConfig+0x2d4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4422      	add	r2, r4
 8003f72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f74:	e106      	b.n	8004184 <UART_SetConfig+0x4d8>
 8003f76:	bf00      	nop
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f96:	4642      	mov	r2, r8
 8003f98:	464b      	mov	r3, r9
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	6239      	str	r1, [r7, #32]
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	1854      	adds	r4, r2, r1
 8003faa:	4649      	mov	r1, r9
 8003fac:	eb43 0501 	adc.w	r5, r3, r1
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	00eb      	lsls	r3, r5, #3
 8003fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbe:	00e2      	lsls	r2, r4, #3
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fcc:	464b      	mov	r3, r9
 8003fce:	eb45 0303 	adc.w	r3, r5, r3
 8003fd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	008b      	lsls	r3, r1, #2
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	008a      	lsls	r2, r1, #2
 8004000:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004004:	f7fc f954 	bl	80002b0 <__aeabi_uldivmod>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4b60      	ldr	r3, [pc, #384]	@ (8004190 <UART_SetConfig+0x4e4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	011c      	lsls	r4, r3, #4
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004020:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004024:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	61b9      	str	r1, [r7, #24]
 8004030:	415b      	adcs	r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6139      	str	r1, [r7, #16]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800406c:	464b      	mov	r3, r9
 800406e:	460a      	mov	r2, r1
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004082:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004090:	4649      	mov	r1, r9
 8004092:	008b      	lsls	r3, r1, #2
 8004094:	4641      	mov	r1, r8
 8004096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800409a:	4641      	mov	r1, r8
 800409c:	008a      	lsls	r2, r1, #2
 800409e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040a2:	f7fc f905 	bl	80002b0 <__aeabi_uldivmod>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	4b38      	ldr	r3, [pc, #224]	@ (8004190 <UART_SetConfig+0x4e4>)
 80040ae:	fba3 2301 	umull	r2, r3, r3, r1
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2264      	movs	r2, #100	@ 0x64
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	1acb      	subs	r3, r1, r3
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	3332      	adds	r3, #50	@ 0x32
 80040c0:	4a33      	ldr	r2, [pc, #204]	@ (8004190 <UART_SetConfig+0x4e4>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80040d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	415b      	adcs	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	4641      	mov	r1, r8
 80040ee:	1851      	adds	r1, r2, r1
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	4649      	mov	r1, r9
 80040f4:	414b      	adcs	r3, r1
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004104:	4659      	mov	r1, fp
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4651      	mov	r1, sl
 800410a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410e:	4651      	mov	r1, sl
 8004110:	00ca      	lsls	r2, r1, #3
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	4603      	mov	r3, r0
 8004118:	4642      	mov	r2, r8
 800411a:	189b      	adds	r3, r3, r2
 800411c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800411e:	464b      	mov	r3, r9
 8004120:	460a      	mov	r2, r1
 8004122:	eb42 0303 	adc.w	r3, r2, r3
 8004126:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	663b      	str	r3, [r7, #96]	@ 0x60
 8004132:	667a      	str	r2, [r7, #100]	@ 0x64
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004152:	f7fc f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <UART_SetConfig+0x4e4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	@ 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	3332      	adds	r3, #50	@ 0x32
 800416e:	4a08      	ldr	r2, [pc, #32]	@ (8004190 <UART_SetConfig+0x4e4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 020f 	and.w	r2, r3, #15
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4422      	add	r2, r4
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800418a:	46bd      	mov	sp, r7
 800418c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004190:	51eb851f 	.word	0x51eb851f

08004194 <sniprintf>:
 8004194:	b40c      	push	{r2, r3}
 8004196:	b530      	push	{r4, r5, lr}
 8004198:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <sniprintf+0x68>)
 800419a:	1e0c      	subs	r4, r1, #0
 800419c:	681d      	ldr	r5, [r3, #0]
 800419e:	b09d      	sub	sp, #116	@ 0x74
 80041a0:	da08      	bge.n	80041b4 <sniprintf+0x20>
 80041a2:	238b      	movs	r3, #139	@ 0x8b
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041aa:	b01d      	add	sp, #116	@ 0x74
 80041ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041b0:	b002      	add	sp, #8
 80041b2:	4770      	bx	lr
 80041b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80041b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80041c2:	bf14      	ite	ne
 80041c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80041c8:	4623      	moveq	r3, r4
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	9307      	str	r3, [sp, #28]
 80041ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041d2:	9002      	str	r0, [sp, #8]
 80041d4:	9006      	str	r0, [sp, #24]
 80041d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80041da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80041dc:	ab21      	add	r3, sp, #132	@ 0x84
 80041de:	a902      	add	r1, sp, #8
 80041e0:	4628      	mov	r0, r5
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	f000 f9b6 	bl	8004554 <_svfiprintf_r>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	bfbc      	itt	lt
 80041ec:	238b      	movlt	r3, #139	@ 0x8b
 80041ee:	602b      	strlt	r3, [r5, #0]
 80041f0:	2c00      	cmp	r4, #0
 80041f2:	d0da      	beq.n	80041aa <sniprintf+0x16>
 80041f4:	9b02      	ldr	r3, [sp, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e7d6      	b.n	80041aa <sniprintf+0x16>
 80041fc:	20000048 	.word	0x20000048

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	b510      	push	{r4, lr}
 8004204:	b09d      	sub	sp, #116	@ 0x74
 8004206:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004208:	9002      	str	r0, [sp, #8]
 800420a:	9006      	str	r0, [sp, #24]
 800420c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004210:	480a      	ldr	r0, [pc, #40]	@ (800423c <siprintf+0x3c>)
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	9104      	str	r1, [sp, #16]
 8004216:	490a      	ldr	r1, [pc, #40]	@ (8004240 <siprintf+0x40>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	2400      	movs	r4, #0
 8004220:	a902      	add	r1, sp, #8
 8004222:	6800      	ldr	r0, [r0, #0]
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004228:	f000 f994 	bl	8004554 <_svfiprintf_r>
 800422c:	9b02      	ldr	r3, [sp, #8]
 800422e:	701c      	strb	r4, [r3, #0]
 8004230:	b01d      	add	sp, #116	@ 0x74
 8004232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004236:	b003      	add	sp, #12
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000048 	.word	0x20000048
 8004240:	ffff0208 	.word	0xffff0208

08004244 <memset>:
 8004244:	4402      	add	r2, r0
 8004246:	4603      	mov	r3, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	d100      	bne.n	800424e <memset+0xa>
 800424c:	4770      	bx	lr
 800424e:	f803 1b01 	strb.w	r1, [r3], #1
 8004252:	e7f9      	b.n	8004248 <memset+0x4>

08004254 <__errno>:
 8004254:	4b01      	ldr	r3, [pc, #4]	@ (800425c <__errno+0x8>)
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000048 	.word	0x20000048

08004260 <__libc_init_array>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	4d0d      	ldr	r5, [pc, #52]	@ (8004298 <__libc_init_array+0x38>)
 8004264:	4c0d      	ldr	r4, [pc, #52]	@ (800429c <__libc_init_array+0x3c>)
 8004266:	1b64      	subs	r4, r4, r5
 8004268:	10a4      	asrs	r4, r4, #2
 800426a:	2600      	movs	r6, #0
 800426c:	42a6      	cmp	r6, r4
 800426e:	d109      	bne.n	8004284 <__libc_init_array+0x24>
 8004270:	4d0b      	ldr	r5, [pc, #44]	@ (80042a0 <__libc_init_array+0x40>)
 8004272:	4c0c      	ldr	r4, [pc, #48]	@ (80042a4 <__libc_init_array+0x44>)
 8004274:	f000 fc64 	bl	8004b40 <_init>
 8004278:	1b64      	subs	r4, r4, r5
 800427a:	10a4      	asrs	r4, r4, #2
 800427c:	2600      	movs	r6, #0
 800427e:	42a6      	cmp	r6, r4
 8004280:	d105      	bne.n	800428e <__libc_init_array+0x2e>
 8004282:	bd70      	pop	{r4, r5, r6, pc}
 8004284:	f855 3b04 	ldr.w	r3, [r5], #4
 8004288:	4798      	blx	r3
 800428a:	3601      	adds	r6, #1
 800428c:	e7ee      	b.n	800426c <__libc_init_array+0xc>
 800428e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004292:	4798      	blx	r3
 8004294:	3601      	adds	r6, #1
 8004296:	e7f2      	b.n	800427e <__libc_init_array+0x1e>
 8004298:	08004d1c 	.word	0x08004d1c
 800429c:	08004d1c 	.word	0x08004d1c
 80042a0:	08004d1c 	.word	0x08004d1c
 80042a4:	08004d20 	.word	0x08004d20

080042a8 <__retarget_lock_acquire_recursive>:
 80042a8:	4770      	bx	lr

080042aa <__retarget_lock_release_recursive>:
 80042aa:	4770      	bx	lr

080042ac <_free_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4605      	mov	r5, r0
 80042b0:	2900      	cmp	r1, #0
 80042b2:	d041      	beq.n	8004338 <_free_r+0x8c>
 80042b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b8:	1f0c      	subs	r4, r1, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bfb8      	it	lt
 80042be:	18e4      	addlt	r4, r4, r3
 80042c0:	f000 f8e0 	bl	8004484 <__malloc_lock>
 80042c4:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <_free_r+0x90>)
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	b933      	cbnz	r3, 80042d8 <_free_r+0x2c>
 80042ca:	6063      	str	r3, [r4, #4]
 80042cc:	6014      	str	r4, [r2, #0]
 80042ce:	4628      	mov	r0, r5
 80042d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d4:	f000 b8dc 	b.w	8004490 <__malloc_unlock>
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d908      	bls.n	80042ee <_free_r+0x42>
 80042dc:	6820      	ldr	r0, [r4, #0]
 80042de:	1821      	adds	r1, r4, r0
 80042e0:	428b      	cmp	r3, r1
 80042e2:	bf01      	itttt	eq
 80042e4:	6819      	ldreq	r1, [r3, #0]
 80042e6:	685b      	ldreq	r3, [r3, #4]
 80042e8:	1809      	addeq	r1, r1, r0
 80042ea:	6021      	streq	r1, [r4, #0]
 80042ec:	e7ed      	b.n	80042ca <_free_r+0x1e>
 80042ee:	461a      	mov	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b10b      	cbz	r3, 80042f8 <_free_r+0x4c>
 80042f4:	42a3      	cmp	r3, r4
 80042f6:	d9fa      	bls.n	80042ee <_free_r+0x42>
 80042f8:	6811      	ldr	r1, [r2, #0]
 80042fa:	1850      	adds	r0, r2, r1
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	d10b      	bne.n	8004318 <_free_r+0x6c>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	4401      	add	r1, r0
 8004304:	1850      	adds	r0, r2, r1
 8004306:	4283      	cmp	r3, r0
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	d1e0      	bne.n	80042ce <_free_r+0x22>
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	6053      	str	r3, [r2, #4]
 8004312:	4408      	add	r0, r1
 8004314:	6010      	str	r0, [r2, #0]
 8004316:	e7da      	b.n	80042ce <_free_r+0x22>
 8004318:	d902      	bls.n	8004320 <_free_r+0x74>
 800431a:	230c      	movs	r3, #12
 800431c:	602b      	str	r3, [r5, #0]
 800431e:	e7d6      	b.n	80042ce <_free_r+0x22>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	1821      	adds	r1, r4, r0
 8004324:	428b      	cmp	r3, r1
 8004326:	bf04      	itt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	6063      	str	r3, [r4, #4]
 800432e:	bf04      	itt	eq
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	6054      	str	r4, [r2, #4]
 8004336:	e7ca      	b.n	80042ce <_free_r+0x22>
 8004338:	bd38      	pop	{r3, r4, r5, pc}
 800433a:	bf00      	nop
 800433c:	2000030c 	.word	0x2000030c

08004340 <sbrk_aligned>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4e0f      	ldr	r6, [pc, #60]	@ (8004380 <sbrk_aligned+0x40>)
 8004344:	460c      	mov	r4, r1
 8004346:	6831      	ldr	r1, [r6, #0]
 8004348:	4605      	mov	r5, r0
 800434a:	b911      	cbnz	r1, 8004352 <sbrk_aligned+0x12>
 800434c:	f000 fba4 	bl	8004a98 <_sbrk_r>
 8004350:	6030      	str	r0, [r6, #0]
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f000 fb9f 	bl	8004a98 <_sbrk_r>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d103      	bne.n	8004366 <sbrk_aligned+0x26>
 800435e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004362:	4620      	mov	r0, r4
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	1cc4      	adds	r4, r0, #3
 8004368:	f024 0403 	bic.w	r4, r4, #3
 800436c:	42a0      	cmp	r0, r4
 800436e:	d0f8      	beq.n	8004362 <sbrk_aligned+0x22>
 8004370:	1a21      	subs	r1, r4, r0
 8004372:	4628      	mov	r0, r5
 8004374:	f000 fb90 	bl	8004a98 <_sbrk_r>
 8004378:	3001      	adds	r0, #1
 800437a:	d1f2      	bne.n	8004362 <sbrk_aligned+0x22>
 800437c:	e7ef      	b.n	800435e <sbrk_aligned+0x1e>
 800437e:	bf00      	nop
 8004380:	20000308 	.word	0x20000308

08004384 <_malloc_r>:
 8004384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004388:	1ccd      	adds	r5, r1, #3
 800438a:	f025 0503 	bic.w	r5, r5, #3
 800438e:	3508      	adds	r5, #8
 8004390:	2d0c      	cmp	r5, #12
 8004392:	bf38      	it	cc
 8004394:	250c      	movcc	r5, #12
 8004396:	2d00      	cmp	r5, #0
 8004398:	4606      	mov	r6, r0
 800439a:	db01      	blt.n	80043a0 <_malloc_r+0x1c>
 800439c:	42a9      	cmp	r1, r5
 800439e:	d904      	bls.n	80043aa <_malloc_r+0x26>
 80043a0:	230c      	movs	r3, #12
 80043a2:	6033      	str	r3, [r6, #0]
 80043a4:	2000      	movs	r0, #0
 80043a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004480 <_malloc_r+0xfc>
 80043ae:	f000 f869 	bl	8004484 <__malloc_lock>
 80043b2:	f8d8 3000 	ldr.w	r3, [r8]
 80043b6:	461c      	mov	r4, r3
 80043b8:	bb44      	cbnz	r4, 800440c <_malloc_r+0x88>
 80043ba:	4629      	mov	r1, r5
 80043bc:	4630      	mov	r0, r6
 80043be:	f7ff ffbf 	bl	8004340 <sbrk_aligned>
 80043c2:	1c43      	adds	r3, r0, #1
 80043c4:	4604      	mov	r4, r0
 80043c6:	d158      	bne.n	800447a <_malloc_r+0xf6>
 80043c8:	f8d8 4000 	ldr.w	r4, [r8]
 80043cc:	4627      	mov	r7, r4
 80043ce:	2f00      	cmp	r7, #0
 80043d0:	d143      	bne.n	800445a <_malloc_r+0xd6>
 80043d2:	2c00      	cmp	r4, #0
 80043d4:	d04b      	beq.n	800446e <_malloc_r+0xea>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	4639      	mov	r1, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	eb04 0903 	add.w	r9, r4, r3
 80043e0:	f000 fb5a 	bl	8004a98 <_sbrk_r>
 80043e4:	4581      	cmp	r9, r0
 80043e6:	d142      	bne.n	800446e <_malloc_r+0xea>
 80043e8:	6821      	ldr	r1, [r4, #0]
 80043ea:	1a6d      	subs	r5, r5, r1
 80043ec:	4629      	mov	r1, r5
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7ff ffa6 	bl	8004340 <sbrk_aligned>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d03a      	beq.n	800446e <_malloc_r+0xea>
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	442b      	add	r3, r5
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	bb62      	cbnz	r2, 8004460 <_malloc_r+0xdc>
 8004406:	f8c8 7000 	str.w	r7, [r8]
 800440a:	e00f      	b.n	800442c <_malloc_r+0xa8>
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	1b52      	subs	r2, r2, r5
 8004410:	d420      	bmi.n	8004454 <_malloc_r+0xd0>
 8004412:	2a0b      	cmp	r2, #11
 8004414:	d917      	bls.n	8004446 <_malloc_r+0xc2>
 8004416:	1961      	adds	r1, r4, r5
 8004418:	42a3      	cmp	r3, r4
 800441a:	6025      	str	r5, [r4, #0]
 800441c:	bf18      	it	ne
 800441e:	6059      	strne	r1, [r3, #4]
 8004420:	6863      	ldr	r3, [r4, #4]
 8004422:	bf08      	it	eq
 8004424:	f8c8 1000 	streq.w	r1, [r8]
 8004428:	5162      	str	r2, [r4, r5]
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	4630      	mov	r0, r6
 800442e:	f000 f82f 	bl	8004490 <__malloc_unlock>
 8004432:	f104 000b 	add.w	r0, r4, #11
 8004436:	1d23      	adds	r3, r4, #4
 8004438:	f020 0007 	bic.w	r0, r0, #7
 800443c:	1ac2      	subs	r2, r0, r3
 800443e:	bf1c      	itt	ne
 8004440:	1a1b      	subne	r3, r3, r0
 8004442:	50a3      	strne	r3, [r4, r2]
 8004444:	e7af      	b.n	80043a6 <_malloc_r+0x22>
 8004446:	6862      	ldr	r2, [r4, #4]
 8004448:	42a3      	cmp	r3, r4
 800444a:	bf0c      	ite	eq
 800444c:	f8c8 2000 	streq.w	r2, [r8]
 8004450:	605a      	strne	r2, [r3, #4]
 8004452:	e7eb      	b.n	800442c <_malloc_r+0xa8>
 8004454:	4623      	mov	r3, r4
 8004456:	6864      	ldr	r4, [r4, #4]
 8004458:	e7ae      	b.n	80043b8 <_malloc_r+0x34>
 800445a:	463c      	mov	r4, r7
 800445c:	687f      	ldr	r7, [r7, #4]
 800445e:	e7b6      	b.n	80043ce <_malloc_r+0x4a>
 8004460:	461a      	mov	r2, r3
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	42a3      	cmp	r3, r4
 8004466:	d1fb      	bne.n	8004460 <_malloc_r+0xdc>
 8004468:	2300      	movs	r3, #0
 800446a:	6053      	str	r3, [r2, #4]
 800446c:	e7de      	b.n	800442c <_malloc_r+0xa8>
 800446e:	230c      	movs	r3, #12
 8004470:	6033      	str	r3, [r6, #0]
 8004472:	4630      	mov	r0, r6
 8004474:	f000 f80c 	bl	8004490 <__malloc_unlock>
 8004478:	e794      	b.n	80043a4 <_malloc_r+0x20>
 800447a:	6005      	str	r5, [r0, #0]
 800447c:	e7d6      	b.n	800442c <_malloc_r+0xa8>
 800447e:	bf00      	nop
 8004480:	2000030c 	.word	0x2000030c

08004484 <__malloc_lock>:
 8004484:	4801      	ldr	r0, [pc, #4]	@ (800448c <__malloc_lock+0x8>)
 8004486:	f7ff bf0f 	b.w	80042a8 <__retarget_lock_acquire_recursive>
 800448a:	bf00      	nop
 800448c:	20000304 	.word	0x20000304

08004490 <__malloc_unlock>:
 8004490:	4801      	ldr	r0, [pc, #4]	@ (8004498 <__malloc_unlock+0x8>)
 8004492:	f7ff bf0a 	b.w	80042aa <__retarget_lock_release_recursive>
 8004496:	bf00      	nop
 8004498:	20000304 	.word	0x20000304

0800449c <__ssputs_r>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	688e      	ldr	r6, [r1, #8]
 80044a2:	461f      	mov	r7, r3
 80044a4:	42be      	cmp	r6, r7
 80044a6:	680b      	ldr	r3, [r1, #0]
 80044a8:	4682      	mov	sl, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	4690      	mov	r8, r2
 80044ae:	d82d      	bhi.n	800450c <__ssputs_r+0x70>
 80044b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044b8:	d026      	beq.n	8004508 <__ssputs_r+0x6c>
 80044ba:	6965      	ldr	r5, [r4, #20]
 80044bc:	6909      	ldr	r1, [r1, #16]
 80044be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c2:	eba3 0901 	sub.w	r9, r3, r1
 80044c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044ca:	1c7b      	adds	r3, r7, #1
 80044cc:	444b      	add	r3, r9
 80044ce:	106d      	asrs	r5, r5, #1
 80044d0:	429d      	cmp	r5, r3
 80044d2:	bf38      	it	cc
 80044d4:	461d      	movcc	r5, r3
 80044d6:	0553      	lsls	r3, r2, #21
 80044d8:	d527      	bpl.n	800452a <__ssputs_r+0x8e>
 80044da:	4629      	mov	r1, r5
 80044dc:	f7ff ff52 	bl	8004384 <_malloc_r>
 80044e0:	4606      	mov	r6, r0
 80044e2:	b360      	cbz	r0, 800453e <__ssputs_r+0xa2>
 80044e4:	6921      	ldr	r1, [r4, #16]
 80044e6:	464a      	mov	r2, r9
 80044e8:	f000 fae6 	bl	8004ab8 <memcpy>
 80044ec:	89a3      	ldrh	r3, [r4, #12]
 80044ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	6126      	str	r6, [r4, #16]
 80044fa:	6165      	str	r5, [r4, #20]
 80044fc:	444e      	add	r6, r9
 80044fe:	eba5 0509 	sub.w	r5, r5, r9
 8004502:	6026      	str	r6, [r4, #0]
 8004504:	60a5      	str	r5, [r4, #8]
 8004506:	463e      	mov	r6, r7
 8004508:	42be      	cmp	r6, r7
 800450a:	d900      	bls.n	800450e <__ssputs_r+0x72>
 800450c:	463e      	mov	r6, r7
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	4632      	mov	r2, r6
 8004512:	4641      	mov	r1, r8
 8004514:	f000 faa6 	bl	8004a64 <memmove>
 8004518:	68a3      	ldr	r3, [r4, #8]
 800451a:	1b9b      	subs	r3, r3, r6
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	4433      	add	r3, r6
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	2000      	movs	r0, #0
 8004526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452a:	462a      	mov	r2, r5
 800452c:	f000 fad2 	bl	8004ad4 <_realloc_r>
 8004530:	4606      	mov	r6, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d1e0      	bne.n	80044f8 <__ssputs_r+0x5c>
 8004536:	6921      	ldr	r1, [r4, #16]
 8004538:	4650      	mov	r0, sl
 800453a:	f7ff feb7 	bl	80042ac <_free_r>
 800453e:	230c      	movs	r3, #12
 8004540:	f8ca 3000 	str.w	r3, [sl]
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454a:	81a3      	strh	r3, [r4, #12]
 800454c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004550:	e7e9      	b.n	8004526 <__ssputs_r+0x8a>
	...

08004554 <_svfiprintf_r>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	4698      	mov	r8, r3
 800455a:	898b      	ldrh	r3, [r1, #12]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	b09d      	sub	sp, #116	@ 0x74
 8004560:	4607      	mov	r7, r0
 8004562:	460d      	mov	r5, r1
 8004564:	4614      	mov	r4, r2
 8004566:	d510      	bpl.n	800458a <_svfiprintf_r+0x36>
 8004568:	690b      	ldr	r3, [r1, #16]
 800456a:	b973      	cbnz	r3, 800458a <_svfiprintf_r+0x36>
 800456c:	2140      	movs	r1, #64	@ 0x40
 800456e:	f7ff ff09 	bl	8004384 <_malloc_r>
 8004572:	6028      	str	r0, [r5, #0]
 8004574:	6128      	str	r0, [r5, #16]
 8004576:	b930      	cbnz	r0, 8004586 <_svfiprintf_r+0x32>
 8004578:	230c      	movs	r3, #12
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004580:	b01d      	add	sp, #116	@ 0x74
 8004582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004586:	2340      	movs	r3, #64	@ 0x40
 8004588:	616b      	str	r3, [r5, #20]
 800458a:	2300      	movs	r3, #0
 800458c:	9309      	str	r3, [sp, #36]	@ 0x24
 800458e:	2320      	movs	r3, #32
 8004590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004594:	f8cd 800c 	str.w	r8, [sp, #12]
 8004598:	2330      	movs	r3, #48	@ 0x30
 800459a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004738 <_svfiprintf_r+0x1e4>
 800459e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045a2:	f04f 0901 	mov.w	r9, #1
 80045a6:	4623      	mov	r3, r4
 80045a8:	469a      	mov	sl, r3
 80045aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ae:	b10a      	cbz	r2, 80045b4 <_svfiprintf_r+0x60>
 80045b0:	2a25      	cmp	r2, #37	@ 0x25
 80045b2:	d1f9      	bne.n	80045a8 <_svfiprintf_r+0x54>
 80045b4:	ebba 0b04 	subs.w	fp, sl, r4
 80045b8:	d00b      	beq.n	80045d2 <_svfiprintf_r+0x7e>
 80045ba:	465b      	mov	r3, fp
 80045bc:	4622      	mov	r2, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff ff6b 	bl	800449c <__ssputs_r>
 80045c6:	3001      	adds	r0, #1
 80045c8:	f000 80a7 	beq.w	800471a <_svfiprintf_r+0x1c6>
 80045cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045ce:	445a      	add	r2, fp
 80045d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 809f 	beq.w	800471a <_svfiprintf_r+0x1c6>
 80045dc:	2300      	movs	r3, #0
 80045de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e6:	f10a 0a01 	add.w	sl, sl, #1
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	9307      	str	r3, [sp, #28]
 80045ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80045f4:	4654      	mov	r4, sl
 80045f6:	2205      	movs	r2, #5
 80045f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fc:	484e      	ldr	r0, [pc, #312]	@ (8004738 <_svfiprintf_r+0x1e4>)
 80045fe:	f7fb fe07 	bl	8000210 <memchr>
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	b9d8      	cbnz	r0, 800463e <_svfiprintf_r+0xea>
 8004606:	06d0      	lsls	r0, r2, #27
 8004608:	bf44      	itt	mi
 800460a:	2320      	movmi	r3, #32
 800460c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004610:	0711      	lsls	r1, r2, #28
 8004612:	bf44      	itt	mi
 8004614:	232b      	movmi	r3, #43	@ 0x2b
 8004616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004620:	d015      	beq.n	800464e <_svfiprintf_r+0xfa>
 8004622:	9a07      	ldr	r2, [sp, #28]
 8004624:	4654      	mov	r4, sl
 8004626:	2000      	movs	r0, #0
 8004628:	f04f 0c0a 	mov.w	ip, #10
 800462c:	4621      	mov	r1, r4
 800462e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004632:	3b30      	subs	r3, #48	@ 0x30
 8004634:	2b09      	cmp	r3, #9
 8004636:	d94b      	bls.n	80046d0 <_svfiprintf_r+0x17c>
 8004638:	b1b0      	cbz	r0, 8004668 <_svfiprintf_r+0x114>
 800463a:	9207      	str	r2, [sp, #28]
 800463c:	e014      	b.n	8004668 <_svfiprintf_r+0x114>
 800463e:	eba0 0308 	sub.w	r3, r0, r8
 8004642:	fa09 f303 	lsl.w	r3, r9, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	9304      	str	r3, [sp, #16]
 800464a:	46a2      	mov	sl, r4
 800464c:	e7d2      	b.n	80045f4 <_svfiprintf_r+0xa0>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	1d19      	adds	r1, r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	9103      	str	r1, [sp, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfbb      	ittet	lt
 800465a:	425b      	neglt	r3, r3
 800465c:	f042 0202 	orrlt.w	r2, r2, #2
 8004660:	9307      	strge	r3, [sp, #28]
 8004662:	9307      	strlt	r3, [sp, #28]
 8004664:	bfb8      	it	lt
 8004666:	9204      	strlt	r2, [sp, #16]
 8004668:	7823      	ldrb	r3, [r4, #0]
 800466a:	2b2e      	cmp	r3, #46	@ 0x2e
 800466c:	d10a      	bne.n	8004684 <_svfiprintf_r+0x130>
 800466e:	7863      	ldrb	r3, [r4, #1]
 8004670:	2b2a      	cmp	r3, #42	@ 0x2a
 8004672:	d132      	bne.n	80046da <_svfiprintf_r+0x186>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	1d1a      	adds	r2, r3, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004680:	3402      	adds	r4, #2
 8004682:	9305      	str	r3, [sp, #20]
 8004684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004748 <_svfiprintf_r+0x1f4>
 8004688:	7821      	ldrb	r1, [r4, #0]
 800468a:	2203      	movs	r2, #3
 800468c:	4650      	mov	r0, sl
 800468e:	f7fb fdbf 	bl	8000210 <memchr>
 8004692:	b138      	cbz	r0, 80046a4 <_svfiprintf_r+0x150>
 8004694:	9b04      	ldr	r3, [sp, #16]
 8004696:	eba0 000a 	sub.w	r0, r0, sl
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	4082      	lsls	r2, r0
 800469e:	4313      	orrs	r3, r2
 80046a0:	3401      	adds	r4, #1
 80046a2:	9304      	str	r3, [sp, #16]
 80046a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a8:	4824      	ldr	r0, [pc, #144]	@ (800473c <_svfiprintf_r+0x1e8>)
 80046aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046ae:	2206      	movs	r2, #6
 80046b0:	f7fb fdae 	bl	8000210 <memchr>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d036      	beq.n	8004726 <_svfiprintf_r+0x1d2>
 80046b8:	4b21      	ldr	r3, [pc, #132]	@ (8004740 <_svfiprintf_r+0x1ec>)
 80046ba:	bb1b      	cbnz	r3, 8004704 <_svfiprintf_r+0x1b0>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	3307      	adds	r3, #7
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	3308      	adds	r3, #8
 80046c6:	9303      	str	r3, [sp, #12]
 80046c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ca:	4433      	add	r3, r6
 80046cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ce:	e76a      	b.n	80045a6 <_svfiprintf_r+0x52>
 80046d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046d4:	460c      	mov	r4, r1
 80046d6:	2001      	movs	r0, #1
 80046d8:	e7a8      	b.n	800462c <_svfiprintf_r+0xd8>
 80046da:	2300      	movs	r3, #0
 80046dc:	3401      	adds	r4, #1
 80046de:	9305      	str	r3, [sp, #20]
 80046e0:	4619      	mov	r1, r3
 80046e2:	f04f 0c0a 	mov.w	ip, #10
 80046e6:	4620      	mov	r0, r4
 80046e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ec:	3a30      	subs	r2, #48	@ 0x30
 80046ee:	2a09      	cmp	r2, #9
 80046f0:	d903      	bls.n	80046fa <_svfiprintf_r+0x1a6>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0c6      	beq.n	8004684 <_svfiprintf_r+0x130>
 80046f6:	9105      	str	r1, [sp, #20]
 80046f8:	e7c4      	b.n	8004684 <_svfiprintf_r+0x130>
 80046fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80046fe:	4604      	mov	r4, r0
 8004700:	2301      	movs	r3, #1
 8004702:	e7f0      	b.n	80046e6 <_svfiprintf_r+0x192>
 8004704:	ab03      	add	r3, sp, #12
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	462a      	mov	r2, r5
 800470a:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <_svfiprintf_r+0x1f0>)
 800470c:	a904      	add	r1, sp, #16
 800470e:	4638      	mov	r0, r7
 8004710:	f3af 8000 	nop.w
 8004714:	1c42      	adds	r2, r0, #1
 8004716:	4606      	mov	r6, r0
 8004718:	d1d6      	bne.n	80046c8 <_svfiprintf_r+0x174>
 800471a:	89ab      	ldrh	r3, [r5, #12]
 800471c:	065b      	lsls	r3, r3, #25
 800471e:	f53f af2d 	bmi.w	800457c <_svfiprintf_r+0x28>
 8004722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004724:	e72c      	b.n	8004580 <_svfiprintf_r+0x2c>
 8004726:	ab03      	add	r3, sp, #12
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	462a      	mov	r2, r5
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <_svfiprintf_r+0x1f0>)
 800472e:	a904      	add	r1, sp, #16
 8004730:	4638      	mov	r0, r7
 8004732:	f000 f879 	bl	8004828 <_printf_i>
 8004736:	e7ed      	b.n	8004714 <_svfiprintf_r+0x1c0>
 8004738:	08004ce0 	.word	0x08004ce0
 800473c:	08004cea 	.word	0x08004cea
 8004740:	00000000 	.word	0x00000000
 8004744:	0800449d 	.word	0x0800449d
 8004748:	08004ce6 	.word	0x08004ce6

0800474c <_printf_common>:
 800474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	4616      	mov	r6, r2
 8004752:	4698      	mov	r8, r3
 8004754:	688a      	ldr	r2, [r1, #8]
 8004756:	690b      	ldr	r3, [r1, #16]
 8004758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800475c:	4293      	cmp	r3, r2
 800475e:	bfb8      	it	lt
 8004760:	4613      	movlt	r3, r2
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004768:	4607      	mov	r7, r0
 800476a:	460c      	mov	r4, r1
 800476c:	b10a      	cbz	r2, 8004772 <_printf_common+0x26>
 800476e:	3301      	adds	r3, #1
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	0699      	lsls	r1, r3, #26
 8004776:	bf42      	ittt	mi
 8004778:	6833      	ldrmi	r3, [r6, #0]
 800477a:	3302      	addmi	r3, #2
 800477c:	6033      	strmi	r3, [r6, #0]
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	f015 0506 	ands.w	r5, r5, #6
 8004784:	d106      	bne.n	8004794 <_printf_common+0x48>
 8004786:	f104 0a19 	add.w	sl, r4, #25
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	6832      	ldr	r2, [r6, #0]
 800478e:	1a9b      	subs	r3, r3, r2
 8004790:	42ab      	cmp	r3, r5
 8004792:	dc26      	bgt.n	80047e2 <_printf_common+0x96>
 8004794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	3b00      	subs	r3, #0
 800479c:	bf18      	it	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	0692      	lsls	r2, r2, #26
 80047a2:	d42b      	bmi.n	80047fc <_printf_common+0xb0>
 80047a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047a8:	4641      	mov	r1, r8
 80047aa:	4638      	mov	r0, r7
 80047ac:	47c8      	blx	r9
 80047ae:	3001      	adds	r0, #1
 80047b0:	d01e      	beq.n	80047f0 <_printf_common+0xa4>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	f003 0306 	and.w	r3, r3, #6
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf02      	ittt	eq
 80047be:	68e5      	ldreq	r5, [r4, #12]
 80047c0:	6833      	ldreq	r3, [r6, #0]
 80047c2:	1aed      	subeq	r5, r5, r3
 80047c4:	68a3      	ldr	r3, [r4, #8]
 80047c6:	bf0c      	ite	eq
 80047c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047cc:	2500      	movne	r5, #0
 80047ce:	4293      	cmp	r3, r2
 80047d0:	bfc4      	itt	gt
 80047d2:	1a9b      	subgt	r3, r3, r2
 80047d4:	18ed      	addgt	r5, r5, r3
 80047d6:	2600      	movs	r6, #0
 80047d8:	341a      	adds	r4, #26
 80047da:	42b5      	cmp	r5, r6
 80047dc:	d11a      	bne.n	8004814 <_printf_common+0xc8>
 80047de:	2000      	movs	r0, #0
 80047e0:	e008      	b.n	80047f4 <_printf_common+0xa8>
 80047e2:	2301      	movs	r3, #1
 80047e4:	4652      	mov	r2, sl
 80047e6:	4641      	mov	r1, r8
 80047e8:	4638      	mov	r0, r7
 80047ea:	47c8      	blx	r9
 80047ec:	3001      	adds	r0, #1
 80047ee:	d103      	bne.n	80047f8 <_printf_common+0xac>
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	3501      	adds	r5, #1
 80047fa:	e7c6      	b.n	800478a <_printf_common+0x3e>
 80047fc:	18e1      	adds	r1, r4, r3
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	2030      	movs	r0, #48	@ 0x30
 8004802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004806:	4422      	add	r2, r4
 8004808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800480c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004810:	3302      	adds	r3, #2
 8004812:	e7c7      	b.n	80047a4 <_printf_common+0x58>
 8004814:	2301      	movs	r3, #1
 8004816:	4622      	mov	r2, r4
 8004818:	4641      	mov	r1, r8
 800481a:	4638      	mov	r0, r7
 800481c:	47c8      	blx	r9
 800481e:	3001      	adds	r0, #1
 8004820:	d0e6      	beq.n	80047f0 <_printf_common+0xa4>
 8004822:	3601      	adds	r6, #1
 8004824:	e7d9      	b.n	80047da <_printf_common+0x8e>
	...

08004828 <_printf_i>:
 8004828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800482c:	7e0f      	ldrb	r7, [r1, #24]
 800482e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004830:	2f78      	cmp	r7, #120	@ 0x78
 8004832:	4691      	mov	r9, r2
 8004834:	4680      	mov	r8, r0
 8004836:	460c      	mov	r4, r1
 8004838:	469a      	mov	sl, r3
 800483a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800483e:	d807      	bhi.n	8004850 <_printf_i+0x28>
 8004840:	2f62      	cmp	r7, #98	@ 0x62
 8004842:	d80a      	bhi.n	800485a <_printf_i+0x32>
 8004844:	2f00      	cmp	r7, #0
 8004846:	f000 80d1 	beq.w	80049ec <_printf_i+0x1c4>
 800484a:	2f58      	cmp	r7, #88	@ 0x58
 800484c:	f000 80b8 	beq.w	80049c0 <_printf_i+0x198>
 8004850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004858:	e03a      	b.n	80048d0 <_printf_i+0xa8>
 800485a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800485e:	2b15      	cmp	r3, #21
 8004860:	d8f6      	bhi.n	8004850 <_printf_i+0x28>
 8004862:	a101      	add	r1, pc, #4	@ (adr r1, 8004868 <_printf_i+0x40>)
 8004864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048d5 	.word	0x080048d5
 8004870:	08004851 	.word	0x08004851
 8004874:	08004851 	.word	0x08004851
 8004878:	08004851 	.word	0x08004851
 800487c:	08004851 	.word	0x08004851
 8004880:	080048d5 	.word	0x080048d5
 8004884:	08004851 	.word	0x08004851
 8004888:	08004851 	.word	0x08004851
 800488c:	08004851 	.word	0x08004851
 8004890:	08004851 	.word	0x08004851
 8004894:	080049d3 	.word	0x080049d3
 8004898:	080048ff 	.word	0x080048ff
 800489c:	0800498d 	.word	0x0800498d
 80048a0:	08004851 	.word	0x08004851
 80048a4:	08004851 	.word	0x08004851
 80048a8:	080049f5 	.word	0x080049f5
 80048ac:	08004851 	.word	0x08004851
 80048b0:	080048ff 	.word	0x080048ff
 80048b4:	08004851 	.word	0x08004851
 80048b8:	08004851 	.word	0x08004851
 80048bc:	08004995 	.word	0x08004995
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	1d1a      	adds	r2, r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80048d0:	2301      	movs	r3, #1
 80048d2:	e09c      	b.n	8004a0e <_printf_i+0x1e6>
 80048d4:	6833      	ldr	r3, [r6, #0]
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	1d19      	adds	r1, r3, #4
 80048da:	6031      	str	r1, [r6, #0]
 80048dc:	0606      	lsls	r6, r0, #24
 80048de:	d501      	bpl.n	80048e4 <_printf_i+0xbc>
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	e003      	b.n	80048ec <_printf_i+0xc4>
 80048e4:	0645      	lsls	r5, r0, #25
 80048e6:	d5fb      	bpl.n	80048e0 <_printf_i+0xb8>
 80048e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	da03      	bge.n	80048f8 <_printf_i+0xd0>
 80048f0:	232d      	movs	r3, #45	@ 0x2d
 80048f2:	426d      	negs	r5, r5
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f8:	4858      	ldr	r0, [pc, #352]	@ (8004a5c <_printf_i+0x234>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	e011      	b.n	8004922 <_printf_i+0xfa>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	6833      	ldr	r3, [r6, #0]
 8004902:	0608      	lsls	r0, r1, #24
 8004904:	f853 5b04 	ldr.w	r5, [r3], #4
 8004908:	d402      	bmi.n	8004910 <_printf_i+0xe8>
 800490a:	0649      	lsls	r1, r1, #25
 800490c:	bf48      	it	mi
 800490e:	b2ad      	uxthmi	r5, r5
 8004910:	2f6f      	cmp	r7, #111	@ 0x6f
 8004912:	4852      	ldr	r0, [pc, #328]	@ (8004a5c <_printf_i+0x234>)
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	bf14      	ite	ne
 8004918:	230a      	movne	r3, #10
 800491a:	2308      	moveq	r3, #8
 800491c:	2100      	movs	r1, #0
 800491e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004922:	6866      	ldr	r6, [r4, #4]
 8004924:	60a6      	str	r6, [r4, #8]
 8004926:	2e00      	cmp	r6, #0
 8004928:	db05      	blt.n	8004936 <_printf_i+0x10e>
 800492a:	6821      	ldr	r1, [r4, #0]
 800492c:	432e      	orrs	r6, r5
 800492e:	f021 0104 	bic.w	r1, r1, #4
 8004932:	6021      	str	r1, [r4, #0]
 8004934:	d04b      	beq.n	80049ce <_printf_i+0x1a6>
 8004936:	4616      	mov	r6, r2
 8004938:	fbb5 f1f3 	udiv	r1, r5, r3
 800493c:	fb03 5711 	mls	r7, r3, r1, r5
 8004940:	5dc7      	ldrb	r7, [r0, r7]
 8004942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004946:	462f      	mov	r7, r5
 8004948:	42bb      	cmp	r3, r7
 800494a:	460d      	mov	r5, r1
 800494c:	d9f4      	bls.n	8004938 <_printf_i+0x110>
 800494e:	2b08      	cmp	r3, #8
 8004950:	d10b      	bne.n	800496a <_printf_i+0x142>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	07df      	lsls	r7, r3, #31
 8004956:	d508      	bpl.n	800496a <_printf_i+0x142>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	6861      	ldr	r1, [r4, #4]
 800495c:	4299      	cmp	r1, r3
 800495e:	bfde      	ittt	le
 8004960:	2330      	movle	r3, #48	@ 0x30
 8004962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004966:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800496a:	1b92      	subs	r2, r2, r6
 800496c:	6122      	str	r2, [r4, #16]
 800496e:	f8cd a000 	str.w	sl, [sp]
 8004972:	464b      	mov	r3, r9
 8004974:	aa03      	add	r2, sp, #12
 8004976:	4621      	mov	r1, r4
 8004978:	4640      	mov	r0, r8
 800497a:	f7ff fee7 	bl	800474c <_printf_common>
 800497e:	3001      	adds	r0, #1
 8004980:	d14a      	bne.n	8004a18 <_printf_i+0x1f0>
 8004982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004986:	b004      	add	sp, #16
 8004988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f043 0320 	orr.w	r3, r3, #32
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	4832      	ldr	r0, [pc, #200]	@ (8004a60 <_printf_i+0x238>)
 8004996:	2778      	movs	r7, #120	@ 0x78
 8004998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	6831      	ldr	r1, [r6, #0]
 80049a0:	061f      	lsls	r7, r3, #24
 80049a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80049a6:	d402      	bmi.n	80049ae <_printf_i+0x186>
 80049a8:	065f      	lsls	r7, r3, #25
 80049aa:	bf48      	it	mi
 80049ac:	b2ad      	uxthmi	r5, r5
 80049ae:	6031      	str	r1, [r6, #0]
 80049b0:	07d9      	lsls	r1, r3, #31
 80049b2:	bf44      	itt	mi
 80049b4:	f043 0320 	orrmi.w	r3, r3, #32
 80049b8:	6023      	strmi	r3, [r4, #0]
 80049ba:	b11d      	cbz	r5, 80049c4 <_printf_i+0x19c>
 80049bc:	2310      	movs	r3, #16
 80049be:	e7ad      	b.n	800491c <_printf_i+0xf4>
 80049c0:	4826      	ldr	r0, [pc, #152]	@ (8004a5c <_printf_i+0x234>)
 80049c2:	e7e9      	b.n	8004998 <_printf_i+0x170>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	f023 0320 	bic.w	r3, r3, #32
 80049ca:	6023      	str	r3, [r4, #0]
 80049cc:	e7f6      	b.n	80049bc <_printf_i+0x194>
 80049ce:	4616      	mov	r6, r2
 80049d0:	e7bd      	b.n	800494e <_printf_i+0x126>
 80049d2:	6833      	ldr	r3, [r6, #0]
 80049d4:	6825      	ldr	r5, [r4, #0]
 80049d6:	6961      	ldr	r1, [r4, #20]
 80049d8:	1d18      	adds	r0, r3, #4
 80049da:	6030      	str	r0, [r6, #0]
 80049dc:	062e      	lsls	r6, r5, #24
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	d501      	bpl.n	80049e6 <_printf_i+0x1be>
 80049e2:	6019      	str	r1, [r3, #0]
 80049e4:	e002      	b.n	80049ec <_printf_i+0x1c4>
 80049e6:	0668      	lsls	r0, r5, #25
 80049e8:	d5fb      	bpl.n	80049e2 <_printf_i+0x1ba>
 80049ea:	8019      	strh	r1, [r3, #0]
 80049ec:	2300      	movs	r3, #0
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	4616      	mov	r6, r2
 80049f2:	e7bc      	b.n	800496e <_printf_i+0x146>
 80049f4:	6833      	ldr	r3, [r6, #0]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	6032      	str	r2, [r6, #0]
 80049fa:	681e      	ldr	r6, [r3, #0]
 80049fc:	6862      	ldr	r2, [r4, #4]
 80049fe:	2100      	movs	r1, #0
 8004a00:	4630      	mov	r0, r6
 8004a02:	f7fb fc05 	bl	8000210 <memchr>
 8004a06:	b108      	cbz	r0, 8004a0c <_printf_i+0x1e4>
 8004a08:	1b80      	subs	r0, r0, r6
 8004a0a:	6060      	str	r0, [r4, #4]
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	2300      	movs	r3, #0
 8004a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a16:	e7aa      	b.n	800496e <_printf_i+0x146>
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	4640      	mov	r0, r8
 8004a20:	47d0      	blx	sl
 8004a22:	3001      	adds	r0, #1
 8004a24:	d0ad      	beq.n	8004982 <_printf_i+0x15a>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	079b      	lsls	r3, r3, #30
 8004a2a:	d413      	bmi.n	8004a54 <_printf_i+0x22c>
 8004a2c:	68e0      	ldr	r0, [r4, #12]
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	4298      	cmp	r0, r3
 8004a32:	bfb8      	it	lt
 8004a34:	4618      	movlt	r0, r3
 8004a36:	e7a6      	b.n	8004986 <_printf_i+0x15e>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	4640      	mov	r0, r8
 8004a40:	47d0      	blx	sl
 8004a42:	3001      	adds	r0, #1
 8004a44:	d09d      	beq.n	8004982 <_printf_i+0x15a>
 8004a46:	3501      	adds	r5, #1
 8004a48:	68e3      	ldr	r3, [r4, #12]
 8004a4a:	9903      	ldr	r1, [sp, #12]
 8004a4c:	1a5b      	subs	r3, r3, r1
 8004a4e:	42ab      	cmp	r3, r5
 8004a50:	dcf2      	bgt.n	8004a38 <_printf_i+0x210>
 8004a52:	e7eb      	b.n	8004a2c <_printf_i+0x204>
 8004a54:	2500      	movs	r5, #0
 8004a56:	f104 0619 	add.w	r6, r4, #25
 8004a5a:	e7f5      	b.n	8004a48 <_printf_i+0x220>
 8004a5c:	08004cf1 	.word	0x08004cf1
 8004a60:	08004d02 	.word	0x08004d02

08004a64 <memmove>:
 8004a64:	4288      	cmp	r0, r1
 8004a66:	b510      	push	{r4, lr}
 8004a68:	eb01 0402 	add.w	r4, r1, r2
 8004a6c:	d902      	bls.n	8004a74 <memmove+0x10>
 8004a6e:	4284      	cmp	r4, r0
 8004a70:	4623      	mov	r3, r4
 8004a72:	d807      	bhi.n	8004a84 <memmove+0x20>
 8004a74:	1e43      	subs	r3, r0, #1
 8004a76:	42a1      	cmp	r1, r4
 8004a78:	d008      	beq.n	8004a8c <memmove+0x28>
 8004a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a82:	e7f8      	b.n	8004a76 <memmove+0x12>
 8004a84:	4402      	add	r2, r0
 8004a86:	4601      	mov	r1, r0
 8004a88:	428a      	cmp	r2, r1
 8004a8a:	d100      	bne.n	8004a8e <memmove+0x2a>
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a96:	e7f7      	b.n	8004a88 <memmove+0x24>

08004a98 <_sbrk_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d06      	ldr	r5, [pc, #24]	@ (8004ab4 <_sbrk_r+0x1c>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fb ffe6 	bl	8000a74 <_sbrk>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_sbrk_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_sbrk_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000300 	.word	0x20000300

08004ab8 <memcpy>:
 8004ab8:	440a      	add	r2, r1
 8004aba:	4291      	cmp	r1, r2
 8004abc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004ac0:	d100      	bne.n	8004ac4 <memcpy+0xc>
 8004ac2:	4770      	bx	lr
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ace:	4291      	cmp	r1, r2
 8004ad0:	d1f9      	bne.n	8004ac6 <memcpy+0xe>
 8004ad2:	bd10      	pop	{r4, pc}

08004ad4 <_realloc_r>:
 8004ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad8:	4607      	mov	r7, r0
 8004ada:	4614      	mov	r4, r2
 8004adc:	460d      	mov	r5, r1
 8004ade:	b921      	cbnz	r1, 8004aea <_realloc_r+0x16>
 8004ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	f7ff bc4d 	b.w	8004384 <_malloc_r>
 8004aea:	b92a      	cbnz	r2, 8004af8 <_realloc_r+0x24>
 8004aec:	f7ff fbde 	bl	80042ac <_free_r>
 8004af0:	4625      	mov	r5, r4
 8004af2:	4628      	mov	r0, r5
 8004af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004af8:	f000 f81a 	bl	8004b30 <_malloc_usable_size_r>
 8004afc:	4284      	cmp	r4, r0
 8004afe:	4606      	mov	r6, r0
 8004b00:	d802      	bhi.n	8004b08 <_realloc_r+0x34>
 8004b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b06:	d8f4      	bhi.n	8004af2 <_realloc_r+0x1e>
 8004b08:	4621      	mov	r1, r4
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f7ff fc3a 	bl	8004384 <_malloc_r>
 8004b10:	4680      	mov	r8, r0
 8004b12:	b908      	cbnz	r0, 8004b18 <_realloc_r+0x44>
 8004b14:	4645      	mov	r5, r8
 8004b16:	e7ec      	b.n	8004af2 <_realloc_r+0x1e>
 8004b18:	42b4      	cmp	r4, r6
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	bf28      	it	cs
 8004b20:	4632      	movcs	r2, r6
 8004b22:	f7ff ffc9 	bl	8004ab8 <memcpy>
 8004b26:	4629      	mov	r1, r5
 8004b28:	4638      	mov	r0, r7
 8004b2a:	f7ff fbbf 	bl	80042ac <_free_r>
 8004b2e:	e7f1      	b.n	8004b14 <_realloc_r+0x40>

08004b30 <_malloc_usable_size_r>:
 8004b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b34:	1f18      	subs	r0, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbc      	itt	lt
 8004b3a:	580b      	ldrlt	r3, [r1, r0]
 8004b3c:	18c0      	addlt	r0, r0, r3
 8004b3e:	4770      	bx	lr

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
