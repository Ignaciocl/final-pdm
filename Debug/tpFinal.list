
tpFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800379c  0800379c  0000479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d8  080037d8  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d8  080037d8  000047d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080037e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000001c  080037fc  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080037fc  000050e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b59b  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  000105e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  000122d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ff  00000000  00000000  00012d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020db1  00000000  00000000  0001351f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbc3  00000000  00000000  000342d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7581  00000000  00000000  00041e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002978  00000000  00000000  00109458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003784 	.word	0x08003784

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08003784 	.word	0x08003784

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fd29 	bl	8000f8c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f863 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f927 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f8fb 	bl	800073c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000546:	f000 f8cb 	bl	80006e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize */
  bool status = InitLCD();
 800054a:	f000 fbc1 	bl	8000cd0 <InitLCD>
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  status = status && WriteString("licha puto");
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d007      	beq.n	8000568 <main+0x38>
 8000558:	4827      	ldr	r0, [pc, #156]	@ (80005f8 <main+0xc8>)
 800055a:	f000 fb0b 	bl	8000b74 <WriteString>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x38>
 8000564:	2301      	movs	r3, #1
 8000566:	e000      	b.n	800056a <main+0x3a>
 8000568:	2300      	movs	r3, #0
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	71fb      	strb	r3, [r7, #7]
  GoToNextRow();
 8000574:	f000 fb0c 	bl	8000b90 <GoToNextRow>
  status && WriteString("putaso que sos");
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d004      	beq.n	8000588 <main+0x58>
 800057e:	481f      	ldr	r0, [pc, #124]	@ (80005fc <main+0xcc>)
 8000580:	f000 faf8 	bl	8000b74 <WriteString>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rescan = 81;
 8000588:	2351      	movs	r3, #81	@ 0x51
 800058a:	70fb      	strb	r3, [r7, #3]
    {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (!TransmitToSize(0x70, &rescan, 1)) Error_Handler();
 800058c:	1cfb      	adds	r3, r7, #3
 800058e:	2201      	movs	r2, #1
 8000590:	4619      	mov	r1, r3
 8000592:	2070      	movs	r0, #112	@ 0x70
 8000594:	f000 fa94 	bl	8000ac0 <TransmitToSize>
 8000598:	4603      	mov	r3, r0
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <main+0x78>
 80005a4:	f000 f962 	bl	800086c <Error_Handler>
	  HAL_Delay(1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f000 fd60 	bl	8001070 <HAL_Delay>
	  if (!ReceiveToSize(0x70, readValue, 2)) {
 80005b0:	2202      	movs	r2, #2
 80005b2:	4913      	ldr	r1, [pc, #76]	@ (8000600 <main+0xd0>)
 80005b4:	2070      	movs	r0, #112	@ 0x70
 80005b6:	f000 faa3 	bl	8000b00 <ReceiveToSize>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x9a>
		  Error_Handler();
 80005c6:	f000 f951 	bl	800086c <Error_Handler>
	  }
	  distance_cm = (readValue[0] << 8) | readValue[1];
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <main+0xd0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b21b      	sxth	r3, r3
 80005d0:	021b      	lsls	r3, r3, #8
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <main+0xd0>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	b21b      	sxth	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b21b      	sxth	r3, r3
 80005de:	80bb      	strh	r3, [r7, #4]
	  ReadSensor(&otherReadValue);
 80005e0:	1cbb      	adds	r3, r7, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc90 	bl	8000f08 <ReadSensor>
	  if (distance_cm != otherReadValue) {
 80005e8:	78bb      	ldrb	r3, [r7, #2]
 80005ea:	461a      	mov	r2, r3
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d0cc      	beq.n	800058c <main+0x5c>
		  Error_Handler();
 80005f2:	f000 f93b 	bl	800086c <Error_Handler>
    {
 80005f6:	e7c9      	b.n	800058c <main+0x5c>
 80005f8:	0800379c 	.word	0x0800379c
 80005fc:	080037a8 	.word	0x080037a8
 8000600:	200000d4 	.word	0x200000d4

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	@ 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	@ 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f88a 	bl	800372c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b2a      	ldr	r3, [pc, #168]	@ (80006d8 <SystemClock_Config+0xd4>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	4a29      	ldr	r2, [pc, #164]	@ (80006d8 <SystemClock_Config+0xd4>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	@ 0x40
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <SystemClock_Config+0xd4>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000650:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <SystemClock_Config+0xd8>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000678:	2310      	movs	r3, #16
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fae8 	bl	8002c68 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800069e:	f000 f8e5 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ff88 	bl	80025d4 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ca:	f000 f8cf 	bl	800086c <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	@ (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f000 ff5f 	bl	80015e0 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f8a0 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000038 	.word	0x20000038
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f002 fd16 	bl	80031a4 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f875 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	4812      	ldr	r0, [pc, #72]	@ (8000864 <MX_GPIO_Init+0xd4>)
 800081c:	f000 fec6 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <MX_GPIO_Init+0xd8>)
 8000838:	f000 fd24 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083c:	2320      	movs	r3, #32
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_GPIO_Init+0xd4>)
 8000854:	f000 fd16 	bl	8001284 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020800 	.word	0x40020800

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b6:	2007      	movs	r0, #7
 80008b8:	f000 fcb0 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a19      	ldr	r2, [pc, #100]	@ (800094c <HAL_I2C_MspInit+0x84>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d12c      	bne.n	8000944 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000906:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090c:	2312      	movs	r3, #18
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000918:	2304      	movs	r3, #4
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <HAL_I2C_MspInit+0x8c>)
 8000924:	f000 fcae 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 8000932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_I2C_MspInit+0x88>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	@ 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40005400 	.word	0x40005400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <HAL_UART_MspInit+0x84>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d12b      	bne.n	80009d2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b2:	230c      	movs	r3, #12
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c2:	2307      	movs	r3, #7
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <HAL_UART_MspInit+0x8c>)
 80009ce:	f000 fc59 	bl	8001284 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3e:	f000 faf7 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	@ (8000aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	@ (8000ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f002 fe4f 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd47 	bl	8000530 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ab0:	080037e0 	.word	0x080037e0
  ldr r2, =_sbss
 8000ab4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ab8:	200000e0 	.word	0x200000e0

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <TransmitToSize>:
extern I2C_HandleTypeDef hi2c1;
static const uint32_t TIMEOUT = 500;
bool Transmit(uint16_t unshiftedAddress, uint8_t* value) {
	return HAL_I2C_Master_Transmit (&hi2c1, unshiftedAddress<<1, value, sizeof(value), TIMEOUT) == HAL_OK;
}
bool TransmitToSize(uint16_t unshiftedAddress, uint8_t* value, uint16_t size) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4613      	mov	r3, r2
 8000ace:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit (&hi2c1, unshiftedAddress<<1, value, size, TIMEOUT) == HAL_OK;
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <TransmitToSize+0x3c>)
 8000ae2:	f000 fec1 	bl	8001868 <HAL_I2C_Master_Transmit>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf0c      	ite	eq
 8000aec:	2301      	moveq	r3, #1
 8000aee:	2300      	movne	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000038 	.word	0x20000038

08000b00 <ReceiveToSize>:
bool ReceiveToSize(uint16_t unshiftedAddress, uint8_t* value, uint16_t size) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive (&hi2c1, unshiftedAddress<<1, value, size, TIMEOUT) == HAL_OK;
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	b299      	uxth	r1, r3
 8000b16:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b1a:	88bb      	ldrh	r3, [r7, #4]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <ReceiveToSize+0x3c>)
 8000b22:	f000 ff9f 	bl	8001a64 <HAL_I2C_Master_Receive>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000038 	.word	0x20000038

08000b40 <GoToAddress>:
};

static uint8_t initCommandsSize = sizeof(INIT_COMMANDS) / sizeof(INIT_COMMANDS[0]);
static uint8_t clearCommandsSize = sizeof(CLEAR_COMMANDS) / sizeof(CLEAR_COMMANDS[0]);

static bool GoToAddress(uint8_t address) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	sentAddress = MAX_ADDRESS | address;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <GoToAddress+0x2c>)
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <GoToAddress+0x30>)
 8000b56:	701a      	strb	r2, [r3, #0]

	return WriteLCD(&sentAddress, true);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <GoToAddress+0x30>)
 8000b5c:	f000 f973 	bl	8000e46 <WriteLCD>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000007 	.word	0x20000007
 8000b70:	200000d7 	.word	0x200000d7

08000b74 <WriteString>:
bool WriteString(uint8_t* str) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	return WriteLCD(str, false);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f961 	bl	8000e46 <WriteLCD>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <GoToNextRow>:
bool GoToNextRow() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	nextAddress = (nextAddress + ROW_SIZE) % MAX_ADDRESS;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <GoToNextRow+0x34>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <GoToNextRow+0x38>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <GoToNextRow+0x3c>)
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ba8:	fb01 f202 	mul.w	r2, r1, r2
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <GoToNextRow+0x34>)
 8000bb2:	701a      	strb	r2, [r3, #0]
	return GoToAddress(nextAddress);
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <GoToNextRow+0x34>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffc1 	bl	8000b40 <GoToAddress>
 8000bbe:	4603      	mov	r3, r0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000d6 	.word	0x200000d6
 8000bc8:	20000006 	.word	0x20000006
 8000bcc:	20000007 	.word	0x20000007

08000bd0 <set4Bit>:


static bool set4Bit() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_Delay(50); // Initial power-on delay
 8000bd4:	2032      	movs	r0, #50	@ 0x32
 8000bd6:	f000 fa4b 	bl	8001070 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <set4Bit+0x90>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f912 	bl	8000e08 <sendInitNibble>
 8000be4:	4603      	mov	r3, r0
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <set4Bit+0x24>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e033      	b.n	8000c5c <set4Bit+0x8c>
	HAL_Delay(5);
 8000bf4:	2005      	movs	r0, #5
 8000bf6:	f000 fa3b 	bl	8001070 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <set4Bit+0x90>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f902 	bl	8000e08 <sendInitNibble>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <set4Bit+0x44>
 8000c10:	2300      	movs	r3, #0
 8000c12:	e023      	b.n	8000c5c <set4Bit+0x8c>
	HAL_Delay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 fa2b 	bl	8001070 <HAL_Delay>

	if (!sendInitNibble(FIRST_COMMAND)) return false;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <set4Bit+0x90>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f8f2 	bl	8000e08 <sendInitNibble>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f083 0301 	eor.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <set4Bit+0x64>
 8000c30:	2300      	movs	r3, #0
 8000c32:	e013      	b.n	8000c5c <set4Bit+0x8c>
	HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fa1b 	bl	8001070 <HAL_Delay>

	if (!sendInitNibble(SECOND_COMMAND)) return false;  // Switch to 4-bit
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <set4Bit+0x94>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8e2 	bl	8000e08 <sendInitNibble>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f083 0301 	eor.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <set4Bit+0x84>
 8000c50:	2300      	movs	r3, #0
 8000c52:	e003      	b.n	8000c5c <set4Bit+0x8c>
	HAL_Delay(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f000 fa0b 	bl	8001070 <HAL_Delay>

	return true;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000009 	.word	0x20000009

08000c68 <ClearScreen>:

bool ClearScreen() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
	nextAddress = 0x00;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <ClearScreen+0x5c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < clearCommandsSize; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e016      	b.n	8000ca8 <ClearScreen+0x40>
		bool status = WriteLCD(&CLEAR_COMMANDS[i], true);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <ClearScreen+0x60>)
 8000c7e:	4413      	add	r3, r2
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8df 	bl	8000e46 <WriteLCD>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71bb      	strb	r3, [r7, #6]
		if (!status) {
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <ClearScreen+0x34>
			return status;
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	e00e      	b.n	8000cba <ClearScreen+0x52>
		}
		HAL_Delay(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 f9e7 	bl	8001070 <HAL_Delay>
	for (uint8_t i = 0; i < clearCommandsSize; i++) {
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <ClearScreen+0x64>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3e3      	bcc.n	8000c7a <ClearScreen+0x12>
	}
	return GoToAddress(0x00);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff44 	bl	8000b40 <GoToAddress>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000d6 	.word	0x200000d6
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000010 	.word	0x20000010

08000cd0 <InitLCD>:


bool InitLCD() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	if (!set4Bit()) return false;
 8000cd6:	f7ff ff7b 	bl	8000bd0 <set4Bit>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f083 0301 	eor.w	r3, r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <InitLCD+0x1a>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e01f      	b.n	8000d2a <InitLCD+0x5a>

	for (uint8_t i = 0; i < initCommandsSize; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e014      	b.n	8000d1a <InitLCD+0x4a>
		if (!WriteLCD(&INIT_COMMANDS[i], true)) return false;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <InitLCD+0x64>)
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f8a4 	bl	8000e46 <WriteLCD>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f083 0301 	eor.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <InitLCD+0x3e>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e00d      	b.n	8000d2a <InitLCD+0x5a>
		HAL_Delay(2);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f000 f9ae 	bl	8001070 <HAL_Delay>
	for (uint8_t i = 0; i < initCommandsSize; i++) {
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3301      	adds	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <InitLCD+0x68>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3e5      	bcc.n	8000cf0 <InitLCD+0x20>
	}

	return ClearScreen();
 8000d24:	f7ff ffa0 	bl	8000c68 <ClearScreen>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	2000000f 	.word	0x2000000f

08000d3c <translateIntoLcd>:
#define LCD_RW         0x00
#define LCD_RS         0x01

static const uint8_t MAX_LCD_CHARS = 16;  // More than this will fill the row
static const uint8_t MAX_LCD_BYTES = (MAX_LCD_CHARS * 4);
static void translateIntoLcd(uint8_t* value, uint16_t* size, uint8_t* lcdBuffer, bool command) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	70fb      	strb	r3, [r7, #3]
	uint16_t outIndex = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	82fb      	strh	r3, [r7, #22]
	uint8_t rsFlag = command ? 0x00 : LCD_RS;
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	74fb      	strb	r3, [r7, #19]

	for (uint16_t i = 0; i < *size; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	82bb      	strh	r3, [r7, #20]
 8000d5c:	e046      	b.n	8000dec <translateIntoLcd+0xb0>
		uint8_t ch = value[i];
 8000d5e:	8abb      	ldrh	r3, [r7, #20]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	74bb      	strb	r3, [r7, #18]

		uint8_t highNibble = ch & 0xF0;
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	747b      	strb	r3, [r7, #17]
		uint8_t lowNibble  = (ch << 4) & 0xF0;
 8000d70:	7cbb      	ldrb	r3, [r7, #18]
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	743b      	strb	r3, [r7, #16]

		// Send high nibble
		lcdBuffer[outIndex++] = highNibble | LCD_BACKLIGHT | rsFlag | LCD_ENABLE;
 8000d76:	7c7a      	ldrb	r2, [r7, #17]
 8000d78:	7cfb      	ldrb	r3, [r7, #19]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	8afb      	ldrh	r3, [r7, #22]
 8000d80:	1c59      	adds	r1, r3, #1
 8000d82:	82f9      	strh	r1, [r7, #22]
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	440b      	add	r3, r1
 8000d8a:	f042 020c 	orr.w	r2, r2, #12
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	701a      	strb	r2, [r3, #0]
		lcdBuffer[outIndex++] = highNibble | LCD_BACKLIGHT | rsFlag;
 8000d92:	7c7a      	ldrb	r2, [r7, #17]
 8000d94:	7cfb      	ldrb	r3, [r7, #19]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	8afb      	ldrh	r3, [r7, #22]
 8000d9c:	1c59      	adds	r1, r3, #1
 8000d9e:	82f9      	strh	r1, [r7, #22]
 8000da0:	4619      	mov	r1, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	440b      	add	r3, r1
 8000da6:	f042 0208 	orr.w	r2, r2, #8
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]

		// Send low nibble
		lcdBuffer[outIndex++] = lowNibble | LCD_BACKLIGHT | rsFlag | LCD_ENABLE;
 8000dae:	7c3a      	ldrb	r2, [r7, #16]
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	82f9      	strh	r1, [r7, #22]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f042 020c 	orr.w	r2, r2, #12
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	701a      	strb	r2, [r3, #0]
		lcdBuffer[outIndex++] = lowNibble | LCD_BACKLIGHT | rsFlag;
 8000dca:	7c3a      	ldrb	r2, [r7, #16]
 8000dcc:	7cfb      	ldrb	r3, [r7, #19]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	8afb      	ldrh	r3, [r7, #22]
 8000dd4:	1c59      	adds	r1, r3, #1
 8000dd6:	82f9      	strh	r1, [r7, #22]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	440b      	add	r3, r1
 8000dde:	f042 0208 	orr.w	r2, r2, #8
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < *size; i++) {
 8000de6:	8abb      	ldrh	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	82bb      	strh	r3, [r7, #20]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	8aba      	ldrh	r2, [r7, #20]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d3b3      	bcc.n	8000d5e <translateIntoLcd+0x22>
	}
	*size = outIndex;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	8afa      	ldrh	r2, [r7, #22]
 8000dfa:	801a      	strh	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <sendInitNibble>:

bool sendInitNibble(uint8_t nibble) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	uint8_t highNibble = nibble & 0xF0;  // Extract upper 4 bits
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f023 030f 	bic.w	r3, r3, #15
 8000e18:	73fb      	strb	r3, [r7, #15]

	uint8_t data[2];
	data[0] = highNibble | LCD_BACKLIGHT | LCD_ENABLE;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	f043 030c 	orr.w	r3, r3, #12
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	733b      	strb	r3, [r7, #12]
	data[1] = highNibble | LCD_BACKLIGHT;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	737b      	strb	r3, [r7, #13]

	return TransmitToSize(ADDRESS, data, 2);
 8000e2e:	2027      	movs	r0, #39	@ 0x27
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2202      	movs	r2, #2
 8000e36:	4619      	mov	r1, r3
 8000e38:	f7ff fe42 	bl	8000ac0 <TransmitToSize>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <WriteLCD>:

bool WriteLCD(uint8_t* value, bool command) {
 8000e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
 8000e54:	466b      	mov	r3, sp
 8000e56:	461e      	mov	r6, r3
    uint16_t size = command ? 1 : findCharIndex(value, '\0');
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <WriteLCD+0x24>
 8000e5e:	2100      	movs	r1, #0
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 f86f 	bl	8000f44 <findCharIndex>
 8000e66:	4603      	mov	r3, r0
 8000e68:	e000      	b.n	8000e6c <WriteLCD+0x26>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	81bb      	strh	r3, [r7, #12]
    if (size > MAX_LCD_CHARS) {
 8000e6e:	2310      	movs	r3, #16
 8000e70:	461a      	mov	r2, r3
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d201      	bcs.n	8000e7c <WriteLCD+0x36>
    	size = MAX_LCD_CHARS;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	81bb      	strh	r3, [r7, #12]
    }
    uint8_t lcdBuffer[MAX_LCD_BYTES] = { };
 8000e7c:	2340      	movs	r3, #64	@ 0x40
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	2340      	movs	r3, #64	@ 0x40
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2200      	movs	r2, #0
 8000e88:	4698      	mov	r8, r3
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ea0:	2340      	movs	r3, #64	@ 0x40
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2340      	movs	r3, #64	@ 0x40
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	461c      	mov	r4, r3
 8000eac:	4615      	mov	r5, r2
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	00eb      	lsls	r3, r5, #3
 8000eb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ebc:	00e2      	lsls	r2, r4, #3
 8000ebe:	2340      	movs	r3, #64	@ 0x40
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8000eca:	466b      	mov	r3, sp
 8000ecc:	3300      	adds	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	460a      	mov	r2, r1
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fc28 	bl	800372c <memset>
    translateIntoLcd(value, &size, lcdBuffer, command);
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	f107 010c 	add.w	r1, r7, #12
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <translateIntoLcd>

    bool success = TransmitToSize(ADDRESS, lcdBuffer, size);
 8000eea:	2027      	movs	r0, #39	@ 0x27
 8000eec:	89bb      	ldrh	r3, [r7, #12]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f7ff fde5 	bl	8000ac0 <TransmitToSize>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73fb      	strb	r3, [r7, #15]
    return success;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	46b5      	mov	sp, r6
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f08 <ReadSensor>:
static uint8_t ADDRESS = 0x70;
static uint8_t WRITE_COMMAND = 81;
#define READ_SIZE 2
static uint8_t readValue[READ_SIZE];

bool ReadSensor(uint8_t* valueRead) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (valueRead == NULL) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <ReadSensor+0x12>
		return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e00b      	b.n	8000f32 <ReadSensor+0x2a>
	}
	ReceiveToSize(ADDRESS, readValue, READ_SIZE);
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <ReadSensor+0x34>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	4907      	ldr	r1, [pc, #28]	@ (8000f40 <ReadSensor+0x38>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fdec 	bl	8000b00 <ReceiveToSize>
	*valueRead = (readValue[0] << 8) | readValue[1];
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ReadSensor+0x38>)
 8000f2a:	785a      	ldrb	r2, [r3, #1]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	701a      	strb	r2, [r3, #0]
	return true;
 8000f30:	2301      	movs	r3, #1

}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000011 	.word	0x20000011
 8000f40:	200000d8 	.word	0x200000d8

08000f44 <findCharIndex>:
 * @param[in] pstring      Pointer to the input string (null-terminated).
 * @param[in] charToFind   Character to search for.
 *
 * @return Index of the found character within the string.
 */
uint16_t findCharIndex(uint8_t *pstring, uint8_t charToFind) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	uint16_t i = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	81fb      	strh	r3, [r7, #14]
	uint8_t actual = pstring[i];
 8000f54:	89fb      	ldrh	r3, [r7, #14]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind && actual != '\0') {
 8000f5e:	e007      	b.n	8000f70 <findCharIndex+0x2c>
		i++;
 8000f60:	89fb      	ldrh	r3, [r7, #14]
 8000f62:	3301      	adds	r3, #1
 8000f64:	81fb      	strh	r3, [r7, #14]
		actual = pstring[i];
 8000f66:	89fb      	ldrh	r3, [r7, #14]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	737b      	strb	r3, [r7, #13]
	while (actual != charToFind && actual != '\0') {
 8000f70:	7b7a      	ldrb	r2, [r7, #13]
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d002      	beq.n	8000f7e <findCharIndex+0x3a>
 8000f78:	7b7b      	ldrb	r3, [r7, #13]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <findCharIndex+0x1c>
	}
	return i;
 8000f7e:	89fb      	ldrh	r3, [r7, #14]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f931 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fc5a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f93b 	bl	800126a <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800100c:	f000 f911 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000018 	.word	0x20000018
 800102c:	20000014 	.word	0x20000014

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000018 	.word	0x20000018
 8001054:	200000dc 	.word	0x200000dc

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200000dc 	.word	0x200000dc

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000018 	.word	0x20000018

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff47 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff5c 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffb0 	bl	80011d8 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e165      	b.n	800156c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 8154 	bne.w	8001566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80ae 	beq.w	8001566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b5d      	ldr	r3, [pc, #372]	@ (8001584 <HAL_GPIO_Init+0x300>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	4a5c      	ldr	r2, [pc, #368]	@ (8001584 <HAL_GPIO_Init+0x300>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001418:	6453      	str	r3, [r2, #68]	@ 0x44
 800141a:	4b5a      	ldr	r3, [pc, #360]	@ (8001584 <HAL_GPIO_Init+0x300>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a58      	ldr	r2, [pc, #352]	@ (8001588 <HAL_GPIO_Init+0x304>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	@ (800158c <HAL_GPIO_Init+0x308>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	@ (8001590 <HAL_GPIO_Init+0x30c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	@ (8001594 <HAL_GPIO_Init+0x310>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	@ (8001598 <HAL_GPIO_Init+0x314>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	@ (800159c <HAL_GPIO_Init+0x318>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x20a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4a      	ldr	r2, [pc, #296]	@ (80015a0 <HAL_GPIO_Init+0x31c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x206>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a49      	ldr	r2, [pc, #292]	@ (80015a4 <HAL_GPIO_Init+0x320>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x202>
 8001482:	2306      	movs	r3, #6
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001486:	2307      	movs	r3, #7
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x21c>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	@ (8001588 <HAL_GPIO_Init+0x304>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a31      	ldr	r2, [pc, #196]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a26      	ldr	r2, [pc, #152]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001512:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001536:	4a1c      	ldr	r2, [pc, #112]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001560:	4a11      	ldr	r2, [pc, #68]	@ (80015a8 <HAL_GPIO_Init+0x324>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae96 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	@ 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e12b      	b.n	800184a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f95e 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	@ 0x24
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001644:	f001 f8b8 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a81      	ldr	r2, [pc, #516]	@ (8001854 <HAL_I2C_Init+0x274>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d807      	bhi.n	8001664 <HAL_I2C_Init+0x84>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4a80      	ldr	r2, [pc, #512]	@ (8001858 <HAL_I2C_Init+0x278>)
 8001658:	4293      	cmp	r3, r2
 800165a:	bf94      	ite	ls
 800165c:	2301      	movls	r3, #1
 800165e:	2300      	movhi	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e006      	b.n	8001672 <HAL_I2C_Init+0x92>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a7d      	ldr	r2, [pc, #500]	@ (800185c <HAL_I2C_Init+0x27c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0e7      	b.n	800184a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4a78      	ldr	r2, [pc, #480]	@ (8001860 <HAL_I2C_Init+0x280>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9b      	lsrs	r3, r3, #18
 8001684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001854 <HAL_I2C_Init+0x274>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d802      	bhi.n	80016b4 <HAL_I2C_Init+0xd4>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	e009      	b.n	80016c8 <HAL_I2C_Init+0xe8>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a69      	ldr	r2, [pc, #420]	@ (8001864 <HAL_I2C_Init+0x284>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	3301      	adds	r3, #1
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	495c      	ldr	r1, [pc, #368]	@ (8001854 <HAL_I2C_Init+0x274>)
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d819      	bhi.n	800171c <HAL_I2C_Init+0x13c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e59      	subs	r1, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016fc:	400b      	ands	r3, r1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <HAL_I2C_Init+0x138>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e59      	subs	r1, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	e051      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001718:	2304      	movs	r3, #4
 800171a:	e04f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_I2C_Init+0x168>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e58      	subs	r0, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	e012      	b.n	800176e <HAL_I2C_Init+0x18e>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e58      	subs	r0, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	0099      	lsls	r1, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Init+0x196>
 8001772:	2301      	movs	r3, #1
 8001774:	e022      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10e      	bne.n	800179c <HAL_I2C_Init+0x1bc>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e58      	subs	r0, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	440b      	add	r3, r1
 800178c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001790:	3301      	adds	r3, #1
 8001792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179a:	e00f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	6809      	ldr	r1, [r1, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6911      	ldr	r1, [r2, #16]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68d2      	ldr	r2, [r2, #12]
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	000186a0 	.word	0x000186a0
 8001858:	001e847f 	.word	0x001e847f
 800185c:	003d08ff 	.word	0x003d08ff
 8001860:	431bde83 	.word	0x431bde83
 8001864:	10624dd3 	.word	0x10624dd3

08001868 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	461a      	mov	r2, r3
 8001874:	460b      	mov	r3, r1
 8001876:	817b      	strh	r3, [r7, #10]
 8001878:	4613      	mov	r3, r2
 800187a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff fbec 	bl	8001058 <HAL_GetTick>
 8001880:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b20      	cmp	r3, #32
 800188c:	f040 80e0 	bne.w	8001a50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2319      	movs	r3, #25
 8001896:	2201      	movs	r2, #1
 8001898:	4970      	ldr	r1, [pc, #448]	@ (8001a5c <HAL_I2C_Master_Transmit+0x1f4>)
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 fc64 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018a6:	2302      	movs	r3, #2
 80018a8:	e0d3      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x50>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0cc      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d007      	beq.n	80018de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0201 	orr.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2221      	movs	r2, #33	@ 0x21
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2210      	movs	r2, #16
 80018fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	893a      	ldrh	r2, [r7, #8]
 800190e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a50      	ldr	r2, [pc, #320]	@ (8001a60 <HAL_I2C_Master_Transmit+0x1f8>)
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001920:	8979      	ldrh	r1, [r7, #10]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	6a3a      	ldr	r2, [r7, #32]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 face 	bl	8001ec8 <I2C_MasterRequestWrite>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e08d      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800194c:	e066      	b.n	8001a1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	6a39      	ldr	r1, [r7, #32]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fd22 	bl	800239c <I2C_WaitOnTXEFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00d      	beq.n	800197a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	2b04      	cmp	r3, #4
 8001964:	d107      	bne.n	8001976 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001974:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06b      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d11b      	bne.n	80019f0 <HAL_I2C_Master_Transmit+0x188>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d017      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3b01      	subs	r3, #1
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	6a39      	ldr	r1, [r7, #32]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fd19 	bl	800242c <I2C_WaitOnBTFFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00d      	beq.n	8001a1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d107      	bne.n	8001a18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e01a      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d194      	bne.n	800194e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e000      	b.n	8001a52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a50:	2302      	movs	r3, #2
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	00100002 	.word	0x00100002
 8001a60:	ffff0000 	.word	0xffff0000

08001a64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	460b      	mov	r3, r1
 8001a72:	817b      	strh	r3, [r7, #10]
 8001a74:	4613      	mov	r3, r2
 8001a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff faee 	bl	8001058 <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	f040 8217 	bne.w	8001eba <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2319      	movs	r3, #25
 8001a92:	2201      	movs	r2, #1
 8001a94:	497c      	ldr	r1, [pc, #496]	@ (8001c88 <HAL_I2C_Master_Receive+0x224>)
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fb66 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e20a      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_I2C_Master_Receive+0x50>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e203      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d007      	beq.n	8001ada <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2222      	movs	r2, #34	@ 0x22
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2210      	movs	r2, #16
 8001af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	893a      	ldrh	r2, [r7, #8]
 8001b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a5c      	ldr	r2, [pc, #368]	@ (8001c8c <HAL_I2C_Master_Receive+0x228>)
 8001b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b1c:	8979      	ldrh	r1, [r7, #10]
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa52 	bl	8001fcc <I2C_MasterRequestRead>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1c4      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d113      	bne.n	8001b62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	623b      	str	r3, [r7, #32]
 8001b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e198      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d11b      	bne.n	8001ba2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e178      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d11b      	bne.n	8001be2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	e158      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c08:	e144      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	f200 80f1 	bhi.w	8001df6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d123      	bne.n	8001c64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fc4b 	bl	80024bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e145      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c62:	e117      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d14e      	bne.n	8001d0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c72:	2200      	movs	r2, #0
 8001c74:	4906      	ldr	r1, [pc, #24]	@ (8001c90 <HAL_I2C_Master_Receive+0x22c>)
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa76 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e11a      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
 8001c86:	bf00      	nop
 8001c88:	00100002 	.word	0x00100002
 8001c8c:	ffff0000 	.word	0xffff0000
 8001c90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d08:	e0c4      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d10:	2200      	movs	r2, #0
 8001d12:	496c      	ldr	r1, [pc, #432]	@ (8001ec4 <HAL_I2C_Master_Receive+0x460>)
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fa27 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cb      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4955      	ldr	r1, [pc, #340]	@ (8001ec4 <HAL_I2C_Master_Receive+0x460>)
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f9f9 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e09d      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dac:	3b01      	subs	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001df4:	e04e      	b.n	8001e94 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fb5e 	bl	80024bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e058      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d124      	bne.n	8001e94 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d107      	bne.n	8001e62 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e60:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f aeb6 	bne.w	8001c0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
  }
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3728      	adds	r7, #40	@ 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	00010004 	.word	0x00010004

08001ec8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d006      	beq.n	8001ef2 <I2C_MasterRequestWrite+0x2a>
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d003      	beq.n	8001ef2 <I2C_MasterRequestWrite+0x2a>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ef0:	d108      	bne.n	8001f04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e00b      	b.n	8001f1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	2b12      	cmp	r3, #18
 8001f0a:	d107      	bne.n	8001f1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f91d 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f42:	d103      	bne.n	8001f4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e035      	b.n	8001fbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f58:	d108      	bne.n	8001f6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f5a:	897b      	ldrh	r3, [r7, #10]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	e01b      	b.n	8001fa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f6c:	897b      	ldrh	r3, [r7, #10]
 8001f6e:	11db      	asrs	r3, r3, #7
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f003 0306 	and.w	r3, r3, #6
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f063 030f 	orn	r3, r3, #15
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	490e      	ldr	r1, [pc, #56]	@ (8001fc4 <I2C_MasterRequestWrite+0xfc>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f966 	bl	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e010      	b.n	8001fbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f9a:	897b      	ldrh	r3, [r7, #10]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4907      	ldr	r1, [pc, #28]	@ (8001fc8 <I2C_MasterRequestWrite+0x100>)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f956 	bl	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	00010008 	.word	0x00010008
 8001fc8:	00010002 	.word	0x00010002

08001fcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d006      	beq.n	8002006 <I2C_MasterRequestRead+0x3a>
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d003      	beq.n	8002006 <I2C_MasterRequestRead+0x3a>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002004:	d108      	bne.n	8002018 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e00b      	b.n	8002030 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	2b11      	cmp	r3, #17
 800201e:	d107      	bne.n	8002030 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f893 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002056:	d103      	bne.n	8002060 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e079      	b.n	8002158 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800206c:	d108      	bne.n	8002080 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	e05f      	b.n	8002140 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	11db      	asrs	r3, r3, #7
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f003 0306 	and.w	r3, r3, #6
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f063 030f 	orn	r3, r3, #15
 8002090:	b2da      	uxtb	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4930      	ldr	r1, [pc, #192]	@ (8002160 <I2C_MasterRequestRead+0x194>)
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f8dc 	bl	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e054      	b.n	8002158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020ae:	897b      	ldrh	r3, [r7, #10]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4929      	ldr	r1, [pc, #164]	@ (8002164 <I2C_MasterRequestRead+0x198>)
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f8cc 	bl	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e044      	b.n	8002158 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f831 	bl	8002168 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800211a:	d103      	bne.n	8002124 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e017      	b.n	8002158 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	11db      	asrs	r3, r3, #7
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 0306 	and.w	r3, r3, #6
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f063 030e 	orn	r3, r3, #14
 8002138:	b2da      	uxtb	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4907      	ldr	r1, [pc, #28]	@ (8002164 <I2C_MasterRequestRead+0x198>)
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f888 	bl	800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00010008 	.word	0x00010008
 8002164:	00010002 	.word	0x00010002

08002168 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002178:	e048      	b.n	800220c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002180:	d044      	beq.n	800220c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002182:	f7fe ff69 	bl	8001058 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d302      	bcc.n	8002198 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d139      	bne.n	800220c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10d      	bne.n	80021be <I2C_WaitOnFlagUntilTimeout+0x56>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	43da      	mvns	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4013      	ands	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	e00c      	b.n	80021d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	43da      	mvns	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	4013      	ands	r3, r2
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d116      	bne.n	800220c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e023      	b.n	8002254 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0c1b      	lsrs	r3, r3, #16
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10d      	bne.n	8002232 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	43da      	mvns	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4013      	ands	r3, r2
 8002222:	b29b      	uxth	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	e00c      	b.n	800224c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	429a      	cmp	r2, r3
 8002250:	d093      	beq.n	800217a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226a:	e071      	b.n	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227a:	d123      	bne.n	80022c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e067      	b.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022ca:	d041      	beq.n	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022cc:	f7fe fec4 	bl	8001058 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d302      	bcc.n	80022e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d136      	bne.n	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10c      	bne.n	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4013      	ands	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e00b      	b.n	800231e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	43da      	mvns	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4013      	ands	r3, r2
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f043 0220 	orr.w	r2, r3, #32
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e021      	b.n	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10c      	bne.n	8002374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	43da      	mvns	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e00b      	b.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f af6d 	bne.w	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a8:	e034      	b.n	8002414 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f8e3 	bl	8002576 <I2C_IsAcknowledgeFailed>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e034      	b.n	8002424 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023c0:	d028      	beq.n	8002414 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c2:	f7fe fe49 	bl	8001058 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d302      	bcc.n	80023d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11d      	bne.n	8002414 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b80      	cmp	r3, #128	@ 0x80
 80023e4:	d016      	beq.n	8002414 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e007      	b.n	8002424 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	2b80      	cmp	r3, #128	@ 0x80
 8002420:	d1c3      	bne.n	80023aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002438:	e034      	b.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f89b 	bl	8002576 <I2C_IsAcknowledgeFailed>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e034      	b.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002450:	d028      	beq.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7fe fe01 	bl	8001058 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11d      	bne.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b04      	cmp	r3, #4
 8002474:	d016      	beq.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d1c3      	bne.n	800243a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024c8:	e049      	b.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d119      	bne.n	800250c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e030      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250c:	f7fe fda4 	bl	8001058 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	d302      	bcc.n	8002522 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11d      	bne.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d016      	beq.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e007      	b.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d1ae      	bne.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258c:	d11b      	bne.n	80025c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002596:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0cc      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e8:	4b68      	ldr	r3, [pc, #416]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d90c      	bls.n	8002610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b65      	ldr	r3, [pc, #404]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b63      	ldr	r3, [pc, #396]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002628:	4b59      	ldr	r3, [pc, #356]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a58      	ldr	r2, [pc, #352]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002640:	4b53      	ldr	r3, [pc, #332]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a52      	ldr	r2, [pc, #328]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800264a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b50      	ldr	r3, [pc, #320]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	494d      	ldr	r1, [pc, #308]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d044      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d119      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e07f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268e:	2b03      	cmp	r3, #3
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e067      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b37      	ldr	r3, [pc, #220]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4934      	ldr	r1, [pc, #208]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fcc8 	bl	8001058 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fcc4 	bl	8001058 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e04f      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d20c      	bcs.n	800271c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e032      	b.n	8002782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4916      	ldr	r1, [pc, #88]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002746:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	490e      	ldr	r1, [pc, #56]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275a:	f000 f855 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800275e:	4602      	mov	r2, r0
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	490a      	ldr	r1, [pc, #40]	@ (8002794 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	5ccb      	ldrb	r3, [r1, r3]
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fc28 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023c00 	.word	0x40023c00
 8002790:	40023800 	.word	0x40023800
 8002794:	080037b8 	.word	0x080037b8
 8002798:	20000000 	.word	0x20000000
 800279c:	20000014 	.word	0x20000014

080027a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	@ (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a9b      	lsrs	r3, r3, #10
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	080037c8 	.word	0x080037c8

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e4:	f7ff ffdc 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0b5b      	lsrs	r3, r3, #13
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	@ (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	080037c8 	.word	0x080037c8

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b0ae      	sub	sp, #184	@ 0xb8
 800280e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800282e:	4bcb      	ldr	r3, [pc, #812]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b0c      	cmp	r3, #12
 8002838:	f200 8206 	bhi.w	8002c48 <HAL_RCC_GetSysClockFreq+0x440>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <HAL_RCC_GetSysClockFreq+0x3c>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002879 	.word	0x08002879
 8002848:	08002c49 	.word	0x08002c49
 800284c:	08002c49 	.word	0x08002c49
 8002850:	08002c49 	.word	0x08002c49
 8002854:	08002881 	.word	0x08002881
 8002858:	08002c49 	.word	0x08002c49
 800285c:	08002c49 	.word	0x08002c49
 8002860:	08002c49 	.word	0x08002c49
 8002864:	08002889 	.word	0x08002889
 8002868:	08002c49 	.word	0x08002c49
 800286c:	08002c49 	.word	0x08002c49
 8002870:	08002c49 	.word	0x08002c49
 8002874:	08002a79 	.word	0x08002a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4bb9      	ldr	r3, [pc, #740]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x358>)
 800287a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800287e:	e1e7      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002880:	4bb8      	ldr	r3, [pc, #736]	@ (8002b64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002886:	e1e3      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002888:	4bb4      	ldr	r3, [pc, #720]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002894:	4bb1      	ldr	r3, [pc, #708]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d071      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a0:	4bae      	ldr	r3, [pc, #696]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028c6:	4622      	mov	r2, r4
 80028c8:	462b      	mov	r3, r5
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	0159      	lsls	r1, r3, #5
 80028d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d8:	0150      	lsls	r0, r2, #5
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4621      	mov	r1, r4
 80028e0:	1a51      	subs	r1, r2, r1
 80028e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80028e4:	4629      	mov	r1, r5
 80028e6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028f8:	4649      	mov	r1, r9
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	4641      	mov	r1, r8
 80028fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002902:	4641      	mov	r1, r8
 8002904:	018a      	lsls	r2, r1, #6
 8002906:	4641      	mov	r1, r8
 8002908:	1a51      	subs	r1, r2, r1
 800290a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800290c:	4649      	mov	r1, r9
 800290e:	eb63 0301 	sbc.w	r3, r3, r1
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002920:	4649      	mov	r1, r9
 8002922:	00cb      	lsls	r3, r1, #3
 8002924:	4641      	mov	r1, r8
 8002926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800292a:	4641      	mov	r1, r8
 800292c:	00ca      	lsls	r2, r1, #3
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	4603      	mov	r3, r0
 8002934:	4622      	mov	r2, r4
 8002936:	189b      	adds	r3, r3, r2
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
 800293a:	462b      	mov	r3, r5
 800293c:	460a      	mov	r2, r1
 800293e:	eb42 0303 	adc.w	r3, r2, r3
 8002942:	637b      	str	r3, [r7, #52]	@ 0x34
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002950:	4629      	mov	r1, r5
 8002952:	024b      	lsls	r3, r1, #9
 8002954:	4621      	mov	r1, r4
 8002956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800295a:	4621      	mov	r1, r4
 800295c:	024a      	lsls	r2, r1, #9
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002966:	2200      	movs	r2, #0
 8002968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800296c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002970:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002974:	f7fd fc46 	bl	8000204 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4613      	mov	r3, r2
 800297e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002982:	e067      	b.n	8002a54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	4b75      	ldr	r3, [pc, #468]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002990:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800299c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800299e:	2300      	movs	r3, #0
 80029a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029a6:	4622      	mov	r2, r4
 80029a8:	462b      	mov	r3, r5
 80029aa:	f04f 0000 	mov.w	r0, #0
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	0159      	lsls	r1, r3, #5
 80029b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b8:	0150      	lsls	r0, r2, #5
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4621      	mov	r1, r4
 80029c0:	1a51      	subs	r1, r2, r1
 80029c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029c4:	4629      	mov	r1, r5
 80029c6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029d8:	4649      	mov	r1, r9
 80029da:	018b      	lsls	r3, r1, #6
 80029dc:	4641      	mov	r1, r8
 80029de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029e2:	4641      	mov	r1, r8
 80029e4:	018a      	lsls	r2, r1, #6
 80029e6:	4641      	mov	r1, r8
 80029e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ec:	4649      	mov	r1, r9
 80029ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a06:	4692      	mov	sl, r2
 8002a08:	469b      	mov	fp, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	eb1a 0303 	adds.w	r3, sl, r3
 8002a10:	623b      	str	r3, [r7, #32]
 8002a12:	462b      	mov	r3, r5
 8002a14:	eb4b 0303 	adc.w	r3, fp, r3
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a26:	4629      	mov	r1, r5
 8002a28:	028b      	lsls	r3, r1, #10
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a30:	4621      	mov	r1, r4
 8002a32:	028a      	lsls	r2, r1, #10
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a40:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a46:	f7fd fbdd 	bl	8000204 <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4613      	mov	r3, r2
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a54:	4b41      	ldr	r3, [pc, #260]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a76:	e0eb      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a78:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a84:	4b35      	ldr	r3, [pc, #212]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d06b      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	2200      	movs	r2, #0
 8002a98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002aa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002aac:	4622      	mov	r2, r4
 8002aae:	462b      	mov	r3, r5
 8002ab0:	f04f 0000 	mov.w	r0, #0
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	0159      	lsls	r1, r3, #5
 8002aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002abe:	0150      	lsls	r0, r2, #5
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	1a51      	subs	r1, r2, r1
 8002ac8:	61b9      	str	r1, [r7, #24]
 8002aca:	4629      	mov	r1, r5
 8002acc:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ade:	4659      	mov	r1, fp
 8002ae0:	018b      	lsls	r3, r1, #6
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae8:	4651      	mov	r1, sl
 8002aea:	018a      	lsls	r2, r1, #6
 8002aec:	4651      	mov	r1, sl
 8002aee:	ebb2 0801 	subs.w	r8, r2, r1
 8002af2:	4659      	mov	r1, fp
 8002af4:	eb63 0901 	sbc.w	r9, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b0c:	4690      	mov	r8, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	4623      	mov	r3, r4
 8002b12:	eb18 0303 	adds.w	r3, r8, r3
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	462b      	mov	r3, r5
 8002b1a:	eb49 0303 	adc.w	r3, r9, r3
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	024b      	lsls	r3, r1, #9
 8002b30:	4621      	mov	r1, r4
 8002b32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b36:	4621      	mov	r1, r4
 8002b38:	024a      	lsls	r2, r1, #9
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b42:	2200      	movs	r2, #0
 8002b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b46:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b4c:	f7fd fb5a 	bl	8000204 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b5a:	e065      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x420>
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b68:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	4611      	mov	r1, r2
 8002b74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b78:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b82:	4642      	mov	r2, r8
 8002b84:	464b      	mov	r3, r9
 8002b86:	f04f 0000 	mov.w	r0, #0
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	0159      	lsls	r1, r3, #5
 8002b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b94:	0150      	lsls	r0, r2, #5
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	1a51      	subs	r1, r2, r1
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	018b      	lsls	r3, r1, #6
 8002bb8:	4651      	mov	r1, sl
 8002bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bbe:	4651      	mov	r1, sl
 8002bc0:	018a      	lsls	r2, r1, #6
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	1a54      	subs	r4, r2, r1
 8002bc6:	4659      	mov	r1, fp
 8002bc8:	eb63 0501 	sbc.w	r5, r3, r1
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	00eb      	lsls	r3, r5, #3
 8002bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bda:	00e2      	lsls	r2, r4, #3
 8002bdc:	4614      	mov	r4, r2
 8002bde:	461d      	mov	r5, r3
 8002be0:	4643      	mov	r3, r8
 8002be2:	18e3      	adds	r3, r4, r3
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	028b      	lsls	r3, r1, #10
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c04:	4621      	mov	r1, r4
 8002c06:	028a      	lsls	r2, r1, #10
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c10:	2200      	movs	r2, #0
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c14:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c1a:	f7fd faf3 	bl	8000204 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4613      	mov	r3, r2
 8002c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c28:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0f1b      	lsrs	r3, r3, #28
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c46:	e003      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	37b8      	adds	r7, #184	@ 0xb8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400

08002c68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e28d      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8083 	beq.w	8002d8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c88:	4b94      	ldr	r3, [pc, #592]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d019      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c94:	4b91      	ldr	r3, [pc, #580]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ca0:	4b8e      	ldr	r3, [pc, #568]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4b8b      	ldr	r3, [pc, #556]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d112      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4b84      	ldr	r3, [pc, #528]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05b      	beq.n	8002d8c <HAL_RCC_OscConfig+0x124>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d157      	bne.n	8002d8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e25a      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x90>
 8002cea:	4b7c      	ldr	r3, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7b      	ldr	r2, [pc, #492]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xcc>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0xb4>
 8002d02:	4b76      	ldr	r3, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b73      	ldr	r3, [pc, #460]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a72      	ldr	r2, [pc, #456]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xcc>
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a6e      	ldr	r2, [pc, #440]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b6c      	ldr	r3, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6b      	ldr	r2, [pc, #428]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f98c 	bl	8001058 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe f988 	bl	8001058 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e21f      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xdc>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f978 	bl	8001058 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe f974 	bl	8001058 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e20b      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b57      	ldr	r3, [pc, #348]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x104>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d06f      	beq.n	8002e7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d9a:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002da6:	4b4d      	ldr	r3, [pc, #308]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d105      	bne.n	8002dbe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002db2:	4b4a      	ldr	r3, [pc, #296]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x186>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1d3      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCC_OscConfig+0x278>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe f921 	bl	8001058 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f91d 	bl	8001058 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1b4      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <HAL_RCC_OscConfig+0x278>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f900 	bl	8001058 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f8fc 	bl	8001058 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e193      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe f8e0 	bl	8001058 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe f8dc 	bl	8001058 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e173      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x274>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x234>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f8c9 	bl	8001058 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe f8c5 	bl	8001058 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e15c      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b8a      	ldr	r3, [pc, #552]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b83      	ldr	r3, [pc, #524]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7f      	ldr	r3, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b7c      	ldr	r3, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b79      	ldr	r3, [pc, #484]	@ (8003118 <HAL_RCC_OscConfig+0x4b0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b76      	ldr	r3, [pc, #472]	@ (8003118 <HAL_RCC_OscConfig+0x4b0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a75      	ldr	r2, [pc, #468]	@ (8003118 <HAL_RCC_OscConfig+0x4b0>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f885 	bl	8001058 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe f881 	bl	8001058 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e118      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <HAL_RCC_OscConfig+0x4b0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x31e>
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	4a65      	ldr	r2, [pc, #404]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x358>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x340>
 8002f8e:	4b61      	ldr	r3, [pc, #388]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f92:	4a60      	ldr	r2, [pc, #384]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x358>
 8002fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a59      	ldr	r2, [pc, #356]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	4b57      	ldr	r3, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a56      	ldr	r2, [pc, #344]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f846 	bl	8001058 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f842 	bl	8001058 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0d7      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x368>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f830 	bl	8001058 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f82c 	bl	8001058 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0c1      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b40      	ldr	r3, [pc, #256]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	4a3a      	ldr	r2, [pc, #232]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80ad 	beq.w	8003194 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d060      	beq.n	8003108 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d145      	bne.n	80030da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b33      	ldr	r3, [pc, #204]	@ (800311c <HAL_RCC_OscConfig+0x4b4>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fe f800 	bl	8001058 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fd fffc 	bl	8001058 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e093      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	071b      	lsls	r3, r3, #28
 80030a6:	491b      	ldr	r1, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x4b4>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fd ffd1 	bl	8001058 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd ffcd 	bl	8001058 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e064      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x452>
 80030d8:	e05c      	b.n	8003194 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_RCC_OscConfig+0x4b4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd ffba 	bl	8001058 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd ffb6 	bl	8001058 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e04d      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x480>
 8003106:	e045      	b.n	8003194 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e040      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
 800311c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003120:	4b1f      	ldr	r3, [pc, #124]	@ (80031a0 <HAL_RCC_OscConfig+0x538>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d030      	beq.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d129      	bne.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d122      	bne.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d119      	bne.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d10f      	bne.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800

080031a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e042      	b.n	800323c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fbc4 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	@ 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f82b 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800320c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800321c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003248:	b0c0      	sub	sp, #256	@ 0x100
 800324a:	af00      	add	r7, sp, #0
 800324c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	68d9      	ldr	r1, [r3, #12]
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	ea40 0301 	orr.w	r3, r0, r1
 800326c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	431a      	orrs	r2, r3
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	431a      	orrs	r2, r3
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800329c:	f021 010c 	bic.w	r1, r1, #12
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032aa:	430b      	orrs	r3, r1
 80032ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032be:	6999      	ldr	r1, [r3, #24]
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	ea40 0301 	orr.w	r3, r0, r1
 80032ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003510 <UART_SetConfig+0x2cc>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d005      	beq.n	80032e4 <UART_SetConfig+0xa0>
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8d      	ldr	r3, [pc, #564]	@ (8003514 <UART_SetConfig+0x2d0>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d104      	bne.n	80032ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7ff fa7c 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 80032e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032ec:	e003      	b.n	80032f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ee:	f7ff fa63 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80032f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003300:	f040 810c 	bne.w	800351c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003308:	2200      	movs	r2, #0
 800330a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800330e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003316:	4622      	mov	r2, r4
 8003318:	462b      	mov	r3, r5
 800331a:	1891      	adds	r1, r2, r2
 800331c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800331e:	415b      	adcs	r3, r3
 8003320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003326:	4621      	mov	r1, r4
 8003328:	eb12 0801 	adds.w	r8, r2, r1
 800332c:	4629      	mov	r1, r5
 800332e:	eb43 0901 	adc.w	r9, r3, r1
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800333e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003346:	4690      	mov	r8, r2
 8003348:	4699      	mov	r9, r3
 800334a:	4623      	mov	r3, r4
 800334c:	eb18 0303 	adds.w	r3, r8, r3
 8003350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003354:	462b      	mov	r3, r5
 8003356:	eb49 0303 	adc.w	r3, r9, r3
 800335a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800336a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800336e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003372:	460b      	mov	r3, r1
 8003374:	18db      	adds	r3, r3, r3
 8003376:	653b      	str	r3, [r7, #80]	@ 0x50
 8003378:	4613      	mov	r3, r2
 800337a:	eb42 0303 	adc.w	r3, r2, r3
 800337e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003388:	f7fc ff3c 	bl	8000204 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <UART_SetConfig+0x2d4>)
 8003392:	fba3 2302 	umull	r2, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	011c      	lsls	r4, r3, #4
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033b4:	415b      	adcs	r3, r3
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033bc:	4641      	mov	r1, r8
 80033be:	eb12 0a01 	adds.w	sl, r2, r1
 80033c2:	4649      	mov	r1, r9
 80033c4:	eb43 0b01 	adc.w	fp, r3, r1
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033dc:	4692      	mov	sl, r2
 80033de:	469b      	mov	fp, r3
 80033e0:	4643      	mov	r3, r8
 80033e2:	eb1a 0303 	adds.w	r3, sl, r3
 80033e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ea:	464b      	mov	r3, r9
 80033ec:	eb4b 0303 	adc.w	r3, fp, r3
 80033f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003400:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003408:	460b      	mov	r3, r1
 800340a:	18db      	adds	r3, r3, r3
 800340c:	643b      	str	r3, [r7, #64]	@ 0x40
 800340e:	4613      	mov	r3, r2
 8003410:	eb42 0303 	adc.w	r3, r2, r3
 8003414:	647b      	str	r3, [r7, #68]	@ 0x44
 8003416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800341a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800341e:	f7fc fef1 	bl	8000204 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4611      	mov	r1, r2
 8003428:	4b3b      	ldr	r3, [pc, #236]	@ (8003518 <UART_SetConfig+0x2d4>)
 800342a:	fba3 2301 	umull	r2, r3, r3, r1
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2264      	movs	r2, #100	@ 0x64
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	1acb      	subs	r3, r1, r3
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800343e:	4b36      	ldr	r3, [pc, #216]	@ (8003518 <UART_SetConfig+0x2d4>)
 8003440:	fba3 2302 	umull	r2, r3, r3, r2
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800344c:	441c      	add	r4, r3
 800344e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003458:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800345c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	1891      	adds	r1, r2, r2
 8003466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003468:	415b      	adcs	r3, r3
 800346a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800346c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003470:	4641      	mov	r1, r8
 8003472:	1851      	adds	r1, r2, r1
 8003474:	6339      	str	r1, [r7, #48]	@ 0x30
 8003476:	4649      	mov	r1, r9
 8003478:	414b      	adcs	r3, r1
 800347a:	637b      	str	r3, [r7, #52]	@ 0x34
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003488:	4659      	mov	r1, fp
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4651      	mov	r1, sl
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4651      	mov	r1, sl
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4642      	mov	r2, r8
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034a4:	464b      	mov	r3, r9
 80034a6:	460a      	mov	r2, r1
 80034a8:	eb42 0303 	adc.w	r3, r2, r3
 80034ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034c4:	460b      	mov	r3, r1
 80034c6:	18db      	adds	r3, r3, r3
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ca:	4613      	mov	r3, r2
 80034cc:	eb42 0303 	adc.w	r3, r2, r3
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034da:	f7fc fe93 	bl	8000204 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <UART_SetConfig+0x2d4>)
 80034e4:	fba3 1302 	umull	r1, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	2164      	movs	r1, #100	@ 0x64
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3332      	adds	r3, #50	@ 0x32
 80034f6:	4a08      	ldr	r2, [pc, #32]	@ (8003518 <UART_SetConfig+0x2d4>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	f003 0207 	and.w	r2, r3, #7
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4422      	add	r2, r4
 800350a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800350c:	e106      	b.n	800371c <UART_SetConfig+0x4d8>
 800350e:	bf00      	nop
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800351c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003526:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800352a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800352e:	4642      	mov	r2, r8
 8003530:	464b      	mov	r3, r9
 8003532:	1891      	adds	r1, r2, r2
 8003534:	6239      	str	r1, [r7, #32]
 8003536:	415b      	adcs	r3, r3
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
 800353a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800353e:	4641      	mov	r1, r8
 8003540:	1854      	adds	r4, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb43 0501 	adc.w	r5, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	00eb      	lsls	r3, r5, #3
 8003552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003556:	00e2      	lsls	r2, r4, #3
 8003558:	4614      	mov	r4, r2
 800355a:	461d      	mov	r5, r3
 800355c:	4643      	mov	r3, r8
 800355e:	18e3      	adds	r3, r4, r3
 8003560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003564:	464b      	mov	r3, r9
 8003566:	eb45 0303 	adc.w	r3, r5, r3
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800356e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800357a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800358a:	4629      	mov	r1, r5
 800358c:	008b      	lsls	r3, r1, #2
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003594:	4621      	mov	r1, r4
 8003596:	008a      	lsls	r2, r1, #2
 8003598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800359c:	f7fc fe32 	bl	8000204 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4b60      	ldr	r3, [pc, #384]	@ (8003728 <UART_SetConfig+0x4e4>)
 80035a6:	fba3 2302 	umull	r2, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	011c      	lsls	r4, r3, #4
 80035ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	61b9      	str	r1, [r7, #24]
 80035c8:	415b      	adcs	r3, r3
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6139      	str	r1, [r7, #16]
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003604:	464b      	mov	r3, r9
 8003606:	460a      	mov	r2, r1
 8003608:	eb42 0303 	adc.w	r3, r2, r3
 800360c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800361a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003628:	4649      	mov	r1, r9
 800362a:	008b      	lsls	r3, r1, #2
 800362c:	4641      	mov	r1, r8
 800362e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003632:	4641      	mov	r1, r8
 8003634:	008a      	lsls	r2, r1, #2
 8003636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800363a:	f7fc fde3 	bl	8000204 <__aeabi_uldivmod>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4611      	mov	r1, r2
 8003644:	4b38      	ldr	r3, [pc, #224]	@ (8003728 <UART_SetConfig+0x4e4>)
 8003646:	fba3 2301 	umull	r2, r3, r3, r1
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2264      	movs	r2, #100	@ 0x64
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	1acb      	subs	r3, r1, r3
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3332      	adds	r3, #50	@ 0x32
 8003658:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <UART_SetConfig+0x4e4>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003664:	441c      	add	r4, r3
 8003666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800366a:	2200      	movs	r2, #0
 800366c:	673b      	str	r3, [r7, #112]	@ 0x70
 800366e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	415b      	adcs	r3, r3
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003684:	4641      	mov	r1, r8
 8003686:	1851      	adds	r1, r2, r1
 8003688:	6039      	str	r1, [r7, #0]
 800368a:	4649      	mov	r1, r9
 800368c:	414b      	adcs	r3, r1
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800369c:	4659      	mov	r1, fp
 800369e:	00cb      	lsls	r3, r1, #3
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036a6:	4651      	mov	r1, sl
 80036a8:	00ca      	lsls	r2, r1, #3
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	4642      	mov	r2, r8
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036b6:	464b      	mov	r3, r9
 80036b8:	460a      	mov	r2, r1
 80036ba:	eb42 0303 	adc.w	r3, r2, r3
 80036be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036d8:	4649      	mov	r1, r9
 80036da:	008b      	lsls	r3, r1, #2
 80036dc:	4641      	mov	r1, r8
 80036de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e2:	4641      	mov	r1, r8
 80036e4:	008a      	lsls	r2, r1, #2
 80036e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036ea:	f7fc fd8b 	bl	8000204 <__aeabi_uldivmod>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <UART_SetConfig+0x4e4>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	@ 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	3332      	adds	r3, #50	@ 0x32
 8003706:	4a08      	ldr	r2, [pc, #32]	@ (8003728 <UART_SetConfig+0x4e4>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4422      	add	r2, r4
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003728:	51eb851f 	.word	0x51eb851f

0800372c <memset>:
 800372c:	4402      	add	r2, r0
 800372e:	4603      	mov	r3, r0
 8003730:	4293      	cmp	r3, r2
 8003732:	d100      	bne.n	8003736 <memset+0xa>
 8003734:	4770      	bx	lr
 8003736:	f803 1b01 	strb.w	r1, [r3], #1
 800373a:	e7f9      	b.n	8003730 <memset+0x4>

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4d0d      	ldr	r5, [pc, #52]	@ (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	@ (8003778 <__libc_init_array+0x3c>)
 8003742:	1b64      	subs	r4, r4, r5
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2600      	movs	r6, #0
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4d0b      	ldr	r5, [pc, #44]	@ (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	@ (8003780 <__libc_init_array+0x44>)
 8003750:	f000 f818 	bl	8003784 <_init>
 8003754:	1b64      	subs	r4, r4, r5
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2600      	movs	r6, #0
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	080037d8 	.word	0x080037d8
 8003778:	080037d8 	.word	0x080037d8
 800377c:	080037d8 	.word	0x080037d8
 8003780:	080037dc 	.word	0x080037dc

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
